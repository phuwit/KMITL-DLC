var studyTable = function() {
  "use strict";var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __reflectGet = Reflect.get;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
var __privateWrapper = (obj, member, setter, getter) => ({
  set _(value) {
    __privateSet(obj, member, value, setter);
  },
  get _() {
    return __privateGet(obj, member, getter);
  }
});
var __superGet = (cls, obj, key) => __reflectGet(__getProtoOf(cls), key, obj);

  var _current, _start, _subscribers, _stop, _Readable_instances, subscribe_fn, unsubscribe_fn, _size, _previous, _curr, _id, _ref, _isActive, _isDisabled, _props, _ref2, _disabled, _id2, _root, _itemState, _isDisabled2, _props2, _ref3, _id3, _originalStyles, _isMountAnimationPrevented, _width, _height, _forceMount, _present, _snippetProps, _props3, _id4, _ref4, _level, _item, _props4, _triggerNode, _titleNode, _contentNode, _descriptionNode, _contentId, _titleId, _triggerId, _descriptionId, _cancelNode, _attrs, _sharedProps, _id5, _ref5, _root2, _disabled2, _props5, _id6, _ref6, _root3, _variant, _disabled3, _attr, _props6, _id7, _ref7, _root4, _level2, _props7, _id8, _ref8, _root5, _props8, _id9, _ref9, _snippetProps2, _props9, _id10, _ref10, _snippetProps3, _props10, _interactOutsideProp, _behaviorType, _interceptedEvents, _isResponsibleLayer, _documentObj, _enabled, _isFocusInsideDOMTree, _onFocusOutside, _currNode, _isValidEventProp, _unsubClickListener, _handleFocus, _DismissibleLayerState_instances, addEventListeners_fn, _handleDismiss, _handleInteractOutside, _markInterceptedEvent, _markNonInterceptedEvent, _markResponsibleLayer, _isTargetWithinLayer, _resetState, isAnyEventIntercepted_fn, _onfocuscapture, _onblurcapture, _onEscapeProp, _behaviorType2, _enabled2, _addEventListener, _onkeydown, _id11, _onPointerDownProp, _onPointerUpProp, _enabled3, _unsubSelectionLock, _ref11, _TextSelectionLayerState_instances, addEventListeners_fn2, _pointerdown, _resetSelectionLock, _sources, _version, _size2, _SvelteMap_instances, read_all_fn, _headingValue, _props11, _isDisabled3, _props12, _isDisabled4, _props13, _props14, _props15, _props16, _props17, _props18, _props19, _transformedStyle, _dir, _side, _sideOffset, _align, _alignOffset, _arrowPadding, _avoidCollisions, _collisionBoundary, _collisionPadding, _sticky, _hideWhenDetached, _strategy, _updatePositionStrategy, _arrowSize, _arrowWidth, _arrowHeight, _desiredPlacement, _boundary, _hasExplicitBoundaries, _detectOverflowOptions, _availableWidth, _availableHeight, _anchorWidth, _anchorHeight, _middleware, _placedSide, _placedAlign, _arrowX, _arrowY, _cannotCenterArrow, _contentZIndex, _arrowBaseSide, _wrapperProps, _props20, _arrowStyle, _contentNode2, _contentId2, _triggerNode2, _id12, _ref12, _disabled4, _root6, _PopoverTriggerState_instances, getAriaControls_fn, _props21, _id13, _ref13, _snippetProps4, _props22, _months, _visibleMonths, _focusedValue, _lastPressedDateValue, _RangeCalendarRootState_instances, updateValue_fn, setStartValue_fn, setEndValue_fn, _weekdays, _isStartInvalid, _isEndInvalid, _isInvalid, _isNextButtonDisabled, _isPrevButtonDisabled, _headingValue2, _fullCalendarLabel, _highlightedRange, announceEmpty_fn, announceSelectedDate_fn, announceSelectedRange_fn, _snippetProps5, _props23, _cellDate, _isDisabled5, _isUnavailable, _isDateToday, _isOutsideMonth, _isOutsideVisibleMonths, _isFocusedDate, _isSelectedDate, _isSelectionStart, _isSelectionEnd, _isHighlighted, _labelText, _snippetProps6, _ariaDisabled, _sharedDataAttrs, _props24, _tabindex, _snippetProps7, _props25, _id14, _ref14, _props26, _id15, _ref15, _SwitchRootState_instances, toggle_fn, _sharedProps2, _props27, _root7, _shouldRender, _props28, _id16, _ref16, _props29, _a, _b;
  function defineContentScript(definition2) {
    return definition2;
  }
  const PUBLIC_VERSION = "5";
  if (typeof window !== "undefined")
    (window.__svelte || (window.__svelte = { v: /* @__PURE__ */ new Set() })).v.add(PUBLIC_VERSION);
  let legacy_mode_flag = false;
  function enable_legacy_mode_flag() {
    legacy_mode_flag = true;
  }
  enable_legacy_mode_flag();
  const EACH_ITEM_REACTIVE = 1;
  const EACH_INDEX_REACTIVE = 1 << 1;
  const EACH_IS_CONTROLLED = 1 << 2;
  const EACH_IS_ANIMATED = 1 << 3;
  const EACH_ITEM_IMMUTABLE = 1 << 4;
  const PROPS_IS_IMMUTABLE = 1;
  const PROPS_IS_RUNES = 1 << 1;
  const PROPS_IS_UPDATED = 1 << 2;
  const PROPS_IS_BINDABLE = 1 << 3;
  const PROPS_IS_LAZY_INITIAL = 1 << 4;
  const TEMPLATE_FRAGMENT = 1;
  const TEMPLATE_USE_IMPORT_NODE = 1 << 1;
  const UNINITIALIZED = Symbol();
  const FILENAME = Symbol("filename");
  const NAMESPACE_SVG = "http://www.w3.org/2000/svg";
  function is_capture_event(name) {
    return name.endsWith("capture") && name !== "gotpointercapture" && name !== "lostpointercapture";
  }
  const DELEGATED_EVENTS = [
    "beforeinput",
    "click",
    "change",
    "dblclick",
    "contextmenu",
    "focusin",
    "focusout",
    "input",
    "keydown",
    "keyup",
    "mousedown",
    "mousemove",
    "mouseout",
    "mouseover",
    "mouseup",
    "pointerdown",
    "pointermove",
    "pointerout",
    "pointerover",
    "pointerup",
    "touchend",
    "touchmove",
    "touchstart"
  ];
  function is_delegated(event_name) {
    return DELEGATED_EVENTS.includes(event_name);
  }
  const ATTRIBUTE_ALIASES = {
    // no `class: 'className'` because we handle that separately
    formnovalidate: "formNoValidate",
    ismap: "isMap",
    nomodule: "noModule",
    playsinline: "playsInline",
    readonly: "readOnly",
    defaultvalue: "defaultValue",
    defaultchecked: "defaultChecked",
    srcobject: "srcObject"
  };
  function normalize_attribute(name) {
    name = name.toLowerCase();
    return ATTRIBUTE_ALIASES[name] ?? name;
  }
  const PASSIVE_EVENTS = ["touchstart", "touchmove"];
  function is_passive_event(name) {
    return PASSIVE_EVENTS.includes(name);
  }
  const DEV = true;
  var is_array = Array.isArray;
  var array_from = Array.from;
  var define_property = Object.defineProperty;
  var get_descriptor = Object.getOwnPropertyDescriptor;
  var get_descriptors = Object.getOwnPropertyDescriptors;
  var object_prototype = Object.prototype;
  var array_prototype = Array.prototype;
  var get_prototype_of = Object.getPrototypeOf;
  function is_function(thing) {
    return typeof thing === "function";
  }
  const noop$1 = () => {
  };
  function run(fn) {
    return fn();
  }
  function run_all(arr) {
    for (var i2 = 0; i2 < arr.length; i2++) {
      arr[i2]();
    }
  }
  const DERIVED = 1 << 1;
  const EFFECT = 1 << 2;
  const RENDER_EFFECT = 1 << 3;
  const BLOCK_EFFECT = 1 << 4;
  const BRANCH_EFFECT = 1 << 5;
  const ROOT_EFFECT = 1 << 6;
  const BOUNDARY_EFFECT = 1 << 7;
  const UNOWNED = 1 << 8;
  const DISCONNECTED = 1 << 9;
  const CLEAN = 1 << 10;
  const DIRTY = 1 << 11;
  const MAYBE_DIRTY = 1 << 12;
  const INERT = 1 << 13;
  const DESTROYED = 1 << 14;
  const EFFECT_RAN = 1 << 15;
  const EFFECT_TRANSPARENT = 1 << 16;
  const LEGACY_DERIVED_PROP = 1 << 17;
  const INSPECT_EFFECT = 1 << 18;
  const HEAD_EFFECT = 1 << 19;
  const EFFECT_HAS_DERIVED = 1 << 20;
  const STATE_SYMBOL = Symbol("$state");
  const STATE_SYMBOL_METADATA = Symbol("$state metadata");
  const LEGACY_PROPS = Symbol("legacy props");
  const LOADING_ATTR_SYMBOL = Symbol("");
  function equals$1(value) {
    return value === this.v;
  }
  function safe_not_equal(a2, b2) {
    return a2 != a2 ? b2 == b2 : a2 !== b2 || a2 !== null && typeof a2 === "object" || typeof a2 === "function";
  }
  function not_equal(a2, b2) {
    return a2 !== b2;
  }
  function safe_equals(value) {
    return !safe_not_equal(value, this.v);
  }
  function bind_invalid_checkbox_value() {
    {
      const error = new Error(`bind_invalid_checkbox_value
Using \`bind:value\` together with a checkbox input is not allowed. Use \`bind:checked\` instead
https://svelte.dev/e/bind_invalid_checkbox_value`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function bind_invalid_export(component2, key, name) {
    {
      const error = new Error(`bind_invalid_export
Component ${component2} has an export named \`${key}\` that a consumer component is trying to access using \`bind:${key}\`, which is disallowed. Instead, use \`bind:this\` (e.g. \`<${name} bind:this={component} />\`) and then access the property on the bound component instance (e.g. \`component.${key}\`)
https://svelte.dev/e/bind_invalid_export`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function bind_not_bindable(key, component2, name) {
    {
      const error = new Error(`bind_not_bindable
A component is attempting to bind to a non-bindable property \`${key}\` belonging to ${component2} (i.e. \`<${name} bind:${key}={...}>\`). To mark a property as bindable: \`let { ${key} = $bindable() } = $props()\`
https://svelte.dev/e/bind_not_bindable`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function component_api_changed(parent, method, component2) {
    {
      const error = new Error(`component_api_changed
${parent} called \`${method}\` on an instance of ${component2}, which is no longer valid in Svelte 5
https://svelte.dev/e/component_api_changed`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function component_api_invalid_new(component2, name) {
    {
      const error = new Error(`component_api_invalid_new
Attempted to instantiate ${component2} with \`new ${name}\`, which is no longer valid in Svelte 5. If this component is not under your control, set the \`compatibility.componentApi\` compiler option to \`4\` to keep it working.
https://svelte.dev/e/component_api_invalid_new`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function derived_references_self() {
    {
      const error = new Error(`derived_references_self
A derived value cannot reference itself recursively
https://svelte.dev/e/derived_references_self`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function effect_in_teardown(rune) {
    {
      const error = new Error(`effect_in_teardown
\`${rune}\` cannot be used inside an effect cleanup function
https://svelte.dev/e/effect_in_teardown`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function effect_in_unowned_derived() {
    {
      const error = new Error(`effect_in_unowned_derived
Effect cannot be created inside a \`$derived\` value that was not itself created inside an effect
https://svelte.dev/e/effect_in_unowned_derived`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function effect_orphan(rune) {
    {
      const error = new Error(`effect_orphan
\`${rune}\` can only be used inside an effect (e.g. during component initialisation)
https://svelte.dev/e/effect_orphan`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function effect_update_depth_exceeded() {
    {
      const error = new Error(`effect_update_depth_exceeded
Maximum update depth exceeded. This can happen when a reactive block or effect repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops
https://svelte.dev/e/effect_update_depth_exceeded`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function invalid_snippet() {
    {
      const error = new Error(`invalid_snippet
Could not \`{@render}\` snippet due to the expression being \`null\` or \`undefined\`. Consider using optional chaining \`{@render snippet?.()}\`
https://svelte.dev/e/invalid_snippet`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function props_invalid_value(key) {
    {
      const error = new Error(`props_invalid_value
Cannot do \`bind:${key}={undefined}\` when \`${key}\` has a fallback value
https://svelte.dev/e/props_invalid_value`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function props_rest_readonly(property) {
    {
      const error = new Error(`props_rest_readonly
Rest element properties of \`$props()\` such as \`${property}\` are readonly
https://svelte.dev/e/props_rest_readonly`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function rune_outside_svelte(rune) {
    {
      const error = new Error(`rune_outside_svelte
The \`${rune}\` rune is only available inside \`.svelte\` and \`.svelte.js/ts\` files
https://svelte.dev/e/rune_outside_svelte`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function state_descriptors_fixed() {
    {
      const error = new Error(`state_descriptors_fixed
Property descriptors defined on \`$state\` objects must contain \`value\` and always be \`enumerable\`, \`configurable\` and \`writable\`.
https://svelte.dev/e/state_descriptors_fixed`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function state_prototype_fixed() {
    {
      const error = new Error(`state_prototype_fixed
Cannot set prototype of \`$state\` object
https://svelte.dev/e/state_prototype_fixed`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function state_unsafe_local_read() {
    {
      const error = new Error(`state_unsafe_local_read
Reading state that was created inside the same derived is forbidden. Consider using \`untrack\` to read locally created state
https://svelte.dev/e/state_unsafe_local_read`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function state_unsafe_mutation() {
    {
      const error = new Error(`state_unsafe_mutation
Updating state inside a derived or a template expression is forbidden. If the value should not be reactive, declare it without \`$state\`
https://svelte.dev/e/state_unsafe_mutation`);
      error.name = "Svelte error";
      throw error;
    }
  }
  let inspect_effects = /* @__PURE__ */ new Set();
  function set_inspect_effects(v2) {
    inspect_effects = v2;
  }
  function source(v2, stack2) {
    var signal = {
      f: 0,
      // TODO ideally we could skip this altogether, but it causes type errors
      v: v2,
      reactions: null,
      equals: equals$1,
      version: 0
    };
    return signal;
  }
  function state(v2) {
    return /* @__PURE__ */ push_derived_source(source(v2));
  }
  // @__NO_SIDE_EFFECTS__
  function mutable_source(initial_value, immutable = false) {
    var _a2;
    const s = source(initial_value);
    if (!immutable) {
      s.equals = safe_equals;
    }
    if (legacy_mode_flag && component_context !== null && component_context.l !== null) {
      ((_a2 = component_context.l).s ?? (_a2.s = [])).push(s);
    }
    return s;
  }
  function mutable_state(v2, immutable = false) {
    return /* @__PURE__ */ push_derived_source(/* @__PURE__ */ mutable_source(v2, immutable));
  }
  // @__NO_SIDE_EFFECTS__
  function push_derived_source(source2) {
    if (active_reaction !== null && (active_reaction.f & DERIVED) !== 0) {
      if (derived_sources === null) {
        set_derived_sources([source2]);
      } else {
        derived_sources.push(source2);
      }
    }
    return source2;
  }
  function set(source2, value) {
    if (active_reaction !== null && is_runes() && (active_reaction.f & (DERIVED | BLOCK_EFFECT)) !== 0 && // If the source was created locally within the current derived, then
    // we allow the mutation.
    (derived_sources === null || !derived_sources.includes(source2))) {
      state_unsafe_mutation();
    }
    return internal_set(source2, value);
  }
  function internal_set(source2, value) {
    if (!source2.equals(value)) {
      source2.v = value;
      source2.version = increment_version();
      mark_reactions(source2, DIRTY);
      if (is_runes() && active_effect !== null && (active_effect.f & CLEAN) !== 0 && (active_effect.f & BRANCH_EFFECT) === 0) {
        if (new_deps !== null && new_deps.includes(source2)) {
          set_signal_status(active_effect, DIRTY);
          schedule_effect(active_effect);
        } else {
          if (untracked_writes === null) {
            set_untracked_writes([source2]);
          } else {
            untracked_writes.push(source2);
          }
        }
      }
      if (inspect_effects.size > 0) {
        const inspects = Array.from(inspect_effects);
        var previously_flushing_effect = is_flushing_effect;
        set_is_flushing_effect(true);
        try {
          for (const effect2 of inspects) {
            if ((effect2.f & CLEAN) !== 0) {
              set_signal_status(effect2, MAYBE_DIRTY);
            }
            if (check_dirtiness(effect2)) {
              update_effect(effect2);
            }
          }
        } finally {
          set_is_flushing_effect(previously_flushing_effect);
        }
        inspect_effects.clear();
      }
    }
    return value;
  }
  function mark_reactions(signal, status) {
    var reactions = signal.reactions;
    if (reactions === null) return;
    var runes = is_runes();
    var length = reactions.length;
    for (var i2 = 0; i2 < length; i2++) {
      var reaction = reactions[i2];
      var flags = reaction.f;
      if ((flags & DIRTY) !== 0) continue;
      if (!runes && reaction === active_effect) continue;
      if ((flags & INSPECT_EFFECT) !== 0) {
        inspect_effects.add(reaction);
        continue;
      }
      set_signal_status(reaction, status);
      if ((flags & (CLEAN | UNOWNED)) !== 0) {
        if ((flags & DERIVED) !== 0) {
          mark_reactions(
            /** @type {Derived} */
            reaction,
            MAYBE_DIRTY
          );
        } else {
          schedule_effect(
            /** @type {Effect} */
            reaction
          );
        }
      }
    }
  }
  var bold = "font-weight: bold";
  var normal = "font-weight: normal";
  function lifecycle_double_unmount() {
    {
      console.warn(`%c[svelte] lifecycle_double_unmount
%cTried to unmount a component that was not mounted
https://svelte.dev/e/lifecycle_double_unmount`, bold, normal);
    }
  }
  function ownership_invalid_binding(parent, child2, owner) {
    {
      console.warn(`%c[svelte] ownership_invalid_binding
%c${parent} passed a value to ${child2} with \`bind:\`, but the value is owned by ${owner}. Consider creating a binding between ${owner} and ${parent}
https://svelte.dev/e/ownership_invalid_binding`, bold, normal);
    }
  }
  function ownership_invalid_mutation(component2, owner) {
    {
      console.warn(`%c[svelte] ownership_invalid_mutation
%c${component2 ? `${component2} mutated a value owned by ${owner}. This is strongly discouraged. Consider passing values to child components with \`bind:\`, or use a callback instead` : "Mutating a value outside the component that created it is strongly discouraged. Consider passing values to child components with `bind:`, or use a callback instead"}
https://svelte.dev/e/ownership_invalid_mutation`, bold, normal);
    }
  }
  function state_proxy_equality_mismatch(operator) {
    {
      console.warn(`%c[svelte] state_proxy_equality_mismatch
%cReactive \`$state(...)\` proxies and the values they proxy have different identities. Because of this, comparisons with \`${operator}\` will produce unexpected results
https://svelte.dev/e/state_proxy_equality_mismatch`, bold, normal);
    }
  }
  let hydrating = false;
  function reset(node) {
    return;
  }
  function next(count = 1) {
  }
  const boundaries = {};
  const chrome_pattern = /at (?:.+ \()?(.+):(\d+):(\d+)\)?$/;
  const firefox_pattern = /@(.+):(\d+):(\d+)$/;
  function get_stack() {
    const stack2 = new Error().stack;
    if (!stack2) return null;
    const entries = [];
    for (const line of stack2.split("\n")) {
      let match = chrome_pattern.exec(line) ?? firefox_pattern.exec(line);
      if (match) {
        entries.push({
          file: match[1],
          line: +match[2],
          column: +match[3]
        });
      }
    }
    return entries;
  }
  function get_component() {
    var _a2;
    const stack2 = (_a2 = get_stack()) == null ? void 0 : _a2.slice(4);
    if (!stack2) return null;
    for (let i2 = 0; i2 < stack2.length; i2++) {
      const entry = stack2[i2];
      const modules = boundaries[entry.file];
      if (!modules) {
        if (i2 === 0) return null;
        continue;
      }
      for (const module of modules) {
        if (module.end == null) {
          return null;
        }
        if (module.start.line < entry.line && module.end.line > entry.line) {
          return module.component;
        }
      }
    }
    return null;
  }
  const ADD_OWNER = Symbol("ADD_OWNER");
  function mark_module_start() {
    var _a2, _b2;
    const start = (_a2 = get_stack()) == null ? void 0 : _a2[2];
    if (start) {
      (boundaries[_b2 = start.file] ?? (boundaries[_b2] = [])).push({
        start,
        // @ts-expect-error
        end: null,
        // @ts-expect-error we add the component at the end, since HMR will overwrite the function
        component: null
      });
    }
  }
  function mark_module_end(component2) {
    var _a2;
    const end = (_a2 = get_stack()) == null ? void 0 : _a2[2];
    if (end) {
      const boundaries_file = boundaries[end.file];
      const boundary = boundaries_file[boundaries_file.length - 1];
      boundary.end = end;
      boundary.component = component2;
    }
  }
  function add_owner(object, owner, global2 = false, skip_warning = false) {
    if (object && !global2) {
      const component2 = dev_current_component_function;
      const metadata = object[STATE_SYMBOL_METADATA];
      if (metadata && !has_owner(metadata, component2)) {
        let original = get_owner(metadata);
        if (owner[FILENAME] !== component2[FILENAME] && !skip_warning) {
          ownership_invalid_binding(component2[FILENAME], owner[FILENAME], original[FILENAME]);
        }
      }
    }
    add_owner_to_object(object, owner, /* @__PURE__ */ new Set());
  }
  function add_owner_effect(get_object, Component, skip_warning = false) {
    user_pre_effect(() => {
      add_owner(get_object(), Component, false, skip_warning);
    });
  }
  function widen_ownership(from, to) {
    if (to.owners === null) {
      return;
    }
    while (from) {
      if (from.owners === null) {
        to.owners = null;
        break;
      }
      for (const owner of from.owners) {
        to.owners.add(owner);
      }
      from = from.parent;
    }
  }
  function add_owner_to_object(object, owner, seen) {
    const metadata = (
      /** @type {ProxyMetadata} */
      object == null ? void 0 : object[STATE_SYMBOL_METADATA]
    );
    if (metadata) {
      if ("owners" in metadata && metadata.owners != null) {
        metadata.owners.add(owner);
      }
    } else if (object && typeof object === "object") {
      if (seen.has(object)) return;
      seen.add(object);
      if (ADD_OWNER in object && object[ADD_OWNER]) {
        render_effect(() => {
          object[ADD_OWNER](owner);
        });
      } else {
        var proto = get_prototype_of(object);
        if (proto === Object.prototype) {
          for (const key in object) {
            add_owner_to_object(object[key], owner, seen);
          }
        } else if (proto === Array.prototype) {
          for (let i2 = 0; i2 < object.length; i2 += 1) {
            add_owner_to_object(object[i2], owner, seen);
          }
        }
      }
    }
  }
  function has_owner(metadata, component2) {
    if (metadata.owners === null) {
      return true;
    }
    return metadata.owners.has(component2) || metadata.parent !== null && has_owner(metadata.parent, component2);
  }
  function get_owner(metadata) {
    var _a2;
    return ((_a2 = metadata == null ? void 0 : metadata.owners) == null ? void 0 : _a2.values().next().value) ?? get_owner(
      /** @type {ProxyMetadata} */
      metadata.parent
    );
  }
  function check_ownership(metadata) {
    const component2 = get_component();
    if (component2 && !has_owner(metadata, component2)) {
      let original = get_owner(metadata);
      if (original[FILENAME] !== component2[FILENAME]) {
        ownership_invalid_mutation(component2[FILENAME], original[FILENAME]);
      } else {
        ownership_invalid_mutation();
      }
    }
  }
  function proxy(value, parent = null, prev) {
    var _a2, _b2;
    if (typeof value !== "object" || value === null || STATE_SYMBOL in value) {
      return value;
    }
    const prototype = get_prototype_of(value);
    if (prototype !== object_prototype && prototype !== array_prototype) {
      return value;
    }
    var sources = /* @__PURE__ */ new Map();
    var is_proxied_array = is_array(value);
    var version = source(0);
    if (is_proxied_array) {
      sources.set("length", source(
        /** @type {any[]} */
        value.length
      ));
    }
    var metadata;
    {
      metadata = {
        parent,
        owners: null
      };
      if (prev) {
        const prev_owners = (_b2 = (_a2 = prev.v) == null ? void 0 : _a2[STATE_SYMBOL_METADATA]) == null ? void 0 : _b2.owners;
        metadata.owners = prev_owners ? new Set(prev_owners) : null;
      } else {
        metadata.owners = parent === null ? component_context !== null ? /* @__PURE__ */ new Set([component_context.function]) : null : /* @__PURE__ */ new Set();
      }
    }
    return new Proxy(
      /** @type {any} */
      value,
      {
        defineProperty(_2, prop2, descriptor) {
          if (!("value" in descriptor) || descriptor.configurable === false || descriptor.enumerable === false || descriptor.writable === false) {
            state_descriptors_fixed();
          }
          var s = sources.get(prop2);
          if (s === void 0) {
            s = source(descriptor.value);
            sources.set(prop2, s);
          } else {
            set(s, proxy(descriptor.value, metadata));
          }
          return true;
        },
        deleteProperty(target, prop2) {
          var s = sources.get(prop2);
          if (s === void 0) {
            if (prop2 in target) {
              sources.set(prop2, source(UNINITIALIZED));
            }
          } else {
            if (is_proxied_array && typeof prop2 === "string") {
              var ls = (
                /** @type {Source<number>} */
                sources.get("length")
              );
              var n = Number(prop2);
              if (Number.isInteger(n) && n < ls.v) {
                set(ls, n);
              }
            }
            set(s, UNINITIALIZED);
            update_version(version);
          }
          return true;
        },
        get(target, prop2, receiver) {
          var _a3;
          if (prop2 === STATE_SYMBOL_METADATA) {
            return metadata;
          }
          if (prop2 === STATE_SYMBOL) {
            return value;
          }
          var s = sources.get(prop2);
          var exists = prop2 in target;
          if (s === void 0 && (!exists || ((_a3 = get_descriptor(target, prop2)) == null ? void 0 : _a3.writable))) {
            s = source(proxy(exists ? target[prop2] : UNINITIALIZED, metadata));
            sources.set(prop2, s);
          }
          if (s !== void 0) {
            var v2 = get$2(s);
            {
              var prop_metadata = v2 == null ? void 0 : v2[STATE_SYMBOL_METADATA];
              if (prop_metadata && (prop_metadata == null ? void 0 : prop_metadata.parent) !== metadata) {
                widen_ownership(metadata, prop_metadata);
              }
            }
            return v2 === UNINITIALIZED ? void 0 : v2;
          }
          return Reflect.get(target, prop2, receiver);
        },
        getOwnPropertyDescriptor(target, prop2) {
          var descriptor = Reflect.getOwnPropertyDescriptor(target, prop2);
          if (descriptor && "value" in descriptor) {
            var s = sources.get(prop2);
            if (s) descriptor.value = get$2(s);
          } else if (descriptor === void 0) {
            var source2 = sources.get(prop2);
            var value2 = source2 == null ? void 0 : source2.v;
            if (source2 !== void 0 && value2 !== UNINITIALIZED) {
              return {
                enumerable: true,
                configurable: true,
                value: value2,
                writable: true
              };
            }
          }
          return descriptor;
        },
        has(target, prop2) {
          var _a3;
          if (prop2 === STATE_SYMBOL_METADATA) {
            return true;
          }
          if (prop2 === STATE_SYMBOL) {
            return true;
          }
          var s = sources.get(prop2);
          var has = s !== void 0 && s.v !== UNINITIALIZED || Reflect.has(target, prop2);
          if (s !== void 0 || active_effect !== null && (!has || ((_a3 = get_descriptor(target, prop2)) == null ? void 0 : _a3.writable))) {
            if (s === void 0) {
              s = source(has ? proxy(target[prop2], metadata) : UNINITIALIZED);
              sources.set(prop2, s);
            }
            var value2 = get$2(s);
            if (value2 === UNINITIALIZED) {
              return false;
            }
          }
          return has;
        },
        set(target, prop2, value2, receiver) {
          var _a3;
          var s = sources.get(prop2);
          var has = prop2 in target;
          if (is_proxied_array && prop2 === "length") {
            for (var i2 = value2; i2 < /** @type {Source<number>} */
            s.v; i2 += 1) {
              var other_s = sources.get(i2 + "");
              if (other_s !== void 0) {
                set(other_s, UNINITIALIZED);
              } else if (i2 in target) {
                other_s = source(UNINITIALIZED);
                sources.set(i2 + "", other_s);
              }
            }
          }
          if (s === void 0) {
            if (!has || ((_a3 = get_descriptor(target, prop2)) == null ? void 0 : _a3.writable)) {
              s = source(void 0);
              set(s, proxy(value2, metadata));
              sources.set(prop2, s);
            }
          } else {
            has = s.v !== UNINITIALIZED;
            set(s, proxy(value2, metadata));
          }
          {
            var prop_metadata = value2 == null ? void 0 : value2[STATE_SYMBOL_METADATA];
            if (prop_metadata && (prop_metadata == null ? void 0 : prop_metadata.parent) !== metadata) {
              widen_ownership(metadata, prop_metadata);
            }
            check_ownership(metadata);
          }
          var descriptor = Reflect.getOwnPropertyDescriptor(target, prop2);
          if (descriptor == null ? void 0 : descriptor.set) {
            descriptor.set.call(receiver, value2);
          }
          if (!has) {
            if (is_proxied_array && typeof prop2 === "string") {
              var ls = (
                /** @type {Source<number>} */
                sources.get("length")
              );
              var n = Number(prop2);
              if (Number.isInteger(n) && n >= ls.v) {
                set(ls, n + 1);
              }
            }
            update_version(version);
          }
          return true;
        },
        ownKeys(target) {
          get$2(version);
          var own_keys = Reflect.ownKeys(target).filter((key2) => {
            var source3 = sources.get(key2);
            return source3 === void 0 || source3.v !== UNINITIALIZED;
          });
          for (var [key, source2] of sources) {
            if (source2.v !== UNINITIALIZED && !(key in target)) {
              own_keys.push(key);
            }
          }
          return own_keys;
        },
        setPrototypeOf() {
          state_prototype_fixed();
        }
      }
    );
  }
  function update_version(signal, d2 = 1) {
    set(signal, signal.v + d2);
  }
  function get_proxied_value(value) {
    if (value !== null && typeof value === "object" && STATE_SYMBOL in value) {
      return value[STATE_SYMBOL];
    }
    return value;
  }
  function init_array_prototype_warnings() {
    const array_prototype2 = Array.prototype;
    const cleanup = Array.__svelte_cleanup;
    if (cleanup) {
      cleanup();
    }
    const { indexOf, lastIndexOf, includes } = array_prototype2;
    array_prototype2.indexOf = function(item, from_index) {
      const index2 = indexOf.call(this, item, from_index);
      if (index2 === -1) {
        for (let i2 = from_index ?? 0; i2 < this.length; i2 += 1) {
          if (get_proxied_value(this[i2]) === item) {
            state_proxy_equality_mismatch("array.indexOf(...)");
            break;
          }
        }
      }
      return index2;
    };
    array_prototype2.lastIndexOf = function(item, from_index) {
      const index2 = lastIndexOf.call(this, item, from_index ?? this.length - 1);
      if (index2 === -1) {
        for (let i2 = 0; i2 <= (from_index ?? this.length - 1); i2 += 1) {
          if (get_proxied_value(this[i2]) === item) {
            state_proxy_equality_mismatch("array.lastIndexOf(...)");
            break;
          }
        }
      }
      return index2;
    };
    array_prototype2.includes = function(item, from_index) {
      const has = includes.call(this, item, from_index);
      if (!has) {
        for (let i2 = 0; i2 < this.length; i2 += 1) {
          if (get_proxied_value(this[i2]) === item) {
            state_proxy_equality_mismatch("array.includes(...)");
            break;
          }
        }
      }
      return has;
    };
    Array.__svelte_cleanup = () => {
      array_prototype2.indexOf = indexOf;
      array_prototype2.lastIndexOf = lastIndexOf;
      array_prototype2.includes = includes;
    };
  }
  function strict_equals(a2, b2, equal = true) {
    try {
      if (a2 === b2 !== (get_proxied_value(a2) === get_proxied_value(b2))) {
        state_proxy_equality_mismatch(equal ? "===" : "!==");
      }
    } catch {
    }
    return a2 === b2 === equal;
  }
  function equals(a2, b2, equal = true) {
    if (a2 == b2 !== (get_proxied_value(a2) == get_proxied_value(b2))) {
      state_proxy_equality_mismatch(equal ? "==" : "!=");
    }
    return a2 == b2 === equal;
  }
  var $window;
  var first_child_getter;
  var next_sibling_getter;
  function init_operations() {
    if ($window !== void 0) {
      return;
    }
    $window = window;
    var element_prototype = Element.prototype;
    var node_prototype = Node.prototype;
    first_child_getter = get_descriptor(node_prototype, "firstChild").get;
    next_sibling_getter = get_descriptor(node_prototype, "nextSibling").get;
    element_prototype.__click = void 0;
    element_prototype.__className = "";
    element_prototype.__attributes = null;
    element_prototype.__styles = null;
    element_prototype.__e = void 0;
    Text.prototype.__t = void 0;
    {
      element_prototype.__svelte_meta = null;
      init_array_prototype_warnings();
    }
  }
  function create_text(value = "") {
    return document.createTextNode(value);
  }
  // @__NO_SIDE_EFFECTS__
  function get_first_child(node) {
    return first_child_getter.call(node);
  }
  // @__NO_SIDE_EFFECTS__
  function get_next_sibling(node) {
    return next_sibling_getter.call(node);
  }
  function child(node, is_text) {
    {
      return /* @__PURE__ */ get_first_child(node);
    }
  }
  function first_child(fragment, is_text) {
    {
      var first = (
        /** @type {DocumentFragment} */
        /* @__PURE__ */ get_first_child(
          /** @type {Node} */
          fragment
        )
      );
      if (first instanceof Comment && first.data === "") return /* @__PURE__ */ get_next_sibling(first);
      return first;
    }
  }
  function sibling(node, count = 1, is_text = false) {
    let next_sibling = node;
    while (count--) {
      next_sibling = /** @type {TemplateNode} */
      /* @__PURE__ */ get_next_sibling(next_sibling);
    }
    {
      return next_sibling;
    }
  }
  function clear_text_content(node) {
    node.textContent = "";
  }
  // @__NO_SIDE_EFFECTS__
  function derived(fn) {
    var flags = DERIVED | DIRTY;
    if (active_effect === null) {
      flags |= UNOWNED;
    } else {
      active_effect.f |= EFFECT_HAS_DERIVED;
    }
    var parent_derived = active_reaction !== null && (active_reaction.f & DERIVED) !== 0 ? (
      /** @type {Derived} */
      active_reaction
    ) : null;
    const signal = {
      children: null,
      ctx: component_context,
      deps: null,
      equals: equals$1,
      f: flags,
      fn,
      reactions: null,
      v: (
        /** @type {V} */
        null
      ),
      version: 0,
      parent: parent_derived ?? active_effect
    };
    if (parent_derived !== null) {
      (parent_derived.children ?? (parent_derived.children = [])).push(signal);
    }
    return signal;
  }
  // @__NO_SIDE_EFFECTS__
  function derived_safe_equal(fn) {
    const signal = /* @__PURE__ */ derived(fn);
    signal.equals = safe_equals;
    return signal;
  }
  function destroy_derived_children(derived2) {
    var children = derived2.children;
    if (children !== null) {
      derived2.children = null;
      for (var i2 = 0; i2 < children.length; i2 += 1) {
        var child2 = children[i2];
        if ((child2.f & DERIVED) !== 0) {
          destroy_derived(
            /** @type {Derived} */
            child2
          );
        } else {
          destroy_effect(
            /** @type {Effect} */
            child2
          );
        }
      }
    }
  }
  let stack = [];
  function get_derived_parent_effect(derived2) {
    var parent = derived2.parent;
    while (parent !== null) {
      if ((parent.f & DERIVED) === 0) {
        return (
          /** @type {Effect} */
          parent
        );
      }
      parent = parent.parent;
    }
    return null;
  }
  function execute_derived(derived2) {
    var value;
    var prev_active_effect = active_effect;
    set_active_effect(get_derived_parent_effect(derived2));
    {
      let prev_inspect_effects = inspect_effects;
      set_inspect_effects(/* @__PURE__ */ new Set());
      try {
        if (stack.includes(derived2)) {
          derived_references_self();
        }
        stack.push(derived2);
        destroy_derived_children(derived2);
        value = update_reaction(derived2);
      } finally {
        set_active_effect(prev_active_effect);
        set_inspect_effects(prev_inspect_effects);
        stack.pop();
      }
    }
    return value;
  }
  function update_derived(derived2) {
    var value = execute_derived(derived2);
    var status = (skip_reaction || (derived2.f & UNOWNED) !== 0) && derived2.deps !== null ? MAYBE_DIRTY : CLEAN;
    set_signal_status(derived2, status);
    if (!derived2.equals(value)) {
      derived2.v = value;
      derived2.version = increment_version();
    }
  }
  function destroy_derived(derived2) {
    destroy_derived_children(derived2);
    remove_reactions(derived2, 0);
    set_signal_status(derived2, DESTROYED);
    derived2.v = derived2.children = derived2.deps = derived2.ctx = derived2.reactions = null;
  }
  function validate_effect(rune) {
    if (active_effect === null && active_reaction === null) {
      effect_orphan(rune);
    }
    if (active_reaction !== null && (active_reaction.f & UNOWNED) !== 0) {
      effect_in_unowned_derived();
    }
    if (is_destroying_effect) {
      effect_in_teardown(rune);
    }
  }
  function push_effect(effect2, parent_effect) {
    var parent_last = parent_effect.last;
    if (parent_last === null) {
      parent_effect.last = parent_effect.first = effect2;
    } else {
      parent_last.next = effect2;
      effect2.prev = parent_last;
      parent_effect.last = effect2;
    }
  }
  function create_effect(type, fn, sync, push2 = true) {
    var is_root = (type & ROOT_EFFECT) !== 0;
    var parent_effect = active_effect;
    {
      while (parent_effect !== null && (parent_effect.f & INSPECT_EFFECT) !== 0) {
        parent_effect = parent_effect.parent;
      }
    }
    var effect2 = {
      ctx: component_context,
      deps: null,
      deriveds: null,
      nodes_start: null,
      nodes_end: null,
      f: type | DIRTY,
      first: null,
      fn,
      last: null,
      next: null,
      parent: is_root ? null : parent_effect,
      prev: null,
      teardown: null,
      transitions: null,
      version: 0
    };
    {
      effect2.component_function = dev_current_component_function;
    }
    if (sync) {
      var previously_flushing_effect = is_flushing_effect;
      try {
        set_is_flushing_effect(true);
        update_effect(effect2);
        effect2.f |= EFFECT_RAN;
      } catch (e) {
        destroy_effect(effect2);
        throw e;
      } finally {
        set_is_flushing_effect(previously_flushing_effect);
      }
    } else if (fn !== null) {
      schedule_effect(effect2);
    }
    var inert = sync && effect2.deps === null && effect2.first === null && effect2.nodes_start === null && effect2.teardown === null && (effect2.f & EFFECT_HAS_DERIVED) === 0;
    if (!inert && !is_root && push2) {
      if (parent_effect !== null) {
        push_effect(effect2, parent_effect);
      }
      if (active_reaction !== null && (active_reaction.f & DERIVED) !== 0) {
        var derived2 = (
          /** @type {Derived} */
          active_reaction
        );
        (derived2.children ?? (derived2.children = [])).push(effect2);
      }
    }
    return effect2;
  }
  function effect_tracking() {
    if (active_reaction === null) {
      return false;
    }
    return !skip_reaction;
  }
  function teardown(fn) {
    const effect2 = create_effect(RENDER_EFFECT, null, false);
    set_signal_status(effect2, CLEAN);
    effect2.teardown = fn;
    return effect2;
  }
  function user_effect(fn) {
    validate_effect("$effect");
    var defer = active_effect !== null && (active_effect.f & BRANCH_EFFECT) !== 0 && component_context !== null && !component_context.m;
    {
      define_property(fn, "name", {
        value: "$effect"
      });
    }
    if (defer) {
      var context = (
        /** @type {ComponentContext} */
        component_context
      );
      (context.e ?? (context.e = [])).push({
        fn,
        effect: active_effect,
        reaction: active_reaction
      });
    } else {
      var signal = effect(fn);
      return signal;
    }
  }
  function user_pre_effect(fn) {
    validate_effect("$effect.pre");
    {
      define_property(fn, "name", {
        value: "$effect.pre"
      });
    }
    return render_effect(fn);
  }
  function effect_root(fn) {
    const effect2 = create_effect(ROOT_EFFECT, fn, true);
    return () => {
      destroy_effect(effect2);
    };
  }
  function component_root(fn) {
    const effect2 = create_effect(ROOT_EFFECT, fn, true);
    return (options = {}) => {
      return new Promise((fulfil) => {
        if (options.outro) {
          pause_effect(effect2, () => {
            destroy_effect(effect2);
            fulfil(void 0);
          });
        } else {
          destroy_effect(effect2);
          fulfil(void 0);
        }
      });
    };
  }
  function effect(fn) {
    return create_effect(EFFECT, fn, false);
  }
  function render_effect(fn) {
    return create_effect(RENDER_EFFECT, fn, true);
  }
  function template_effect(fn) {
    {
      define_property(fn, "name", {
        value: "{expression}"
      });
    }
    return block(fn);
  }
  function block(fn, flags = 0) {
    return create_effect(RENDER_EFFECT | BLOCK_EFFECT | flags, fn, true);
  }
  function branch(fn, push2 = true) {
    return create_effect(RENDER_EFFECT | BRANCH_EFFECT, fn, true, push2);
  }
  function execute_effect_teardown(effect2) {
    var teardown2 = effect2.teardown;
    if (teardown2 !== null) {
      const previously_destroying_effect = is_destroying_effect;
      const previous_reaction = active_reaction;
      set_is_destroying_effect(true);
      set_active_reaction(null);
      try {
        teardown2.call(null);
      } finally {
        set_is_destroying_effect(previously_destroying_effect);
        set_active_reaction(previous_reaction);
      }
    }
  }
  function destroy_effect_deriveds(signal) {
    var deriveds = signal.deriveds;
    if (deriveds !== null) {
      signal.deriveds = null;
      for (var i2 = 0; i2 < deriveds.length; i2 += 1) {
        destroy_derived(deriveds[i2]);
      }
    }
  }
  function destroy_effect_children(signal, remove_dom = false) {
    var effect2 = signal.first;
    signal.first = signal.last = null;
    while (effect2 !== null) {
      var next2 = effect2.next;
      destroy_effect(effect2, remove_dom);
      effect2 = next2;
    }
  }
  function destroy_block_effect_children(signal) {
    var effect2 = signal.first;
    while (effect2 !== null) {
      var next2 = effect2.next;
      if ((effect2.f & BRANCH_EFFECT) === 0) {
        destroy_effect(effect2);
      }
      effect2 = next2;
    }
  }
  function destroy_effect(effect2, remove_dom = true) {
    var removed = false;
    if ((remove_dom || (effect2.f & HEAD_EFFECT) !== 0) && effect2.nodes_start !== null) {
      var node = effect2.nodes_start;
      var end = effect2.nodes_end;
      while (node !== null) {
        var next2 = node === end ? null : (
          /** @type {TemplateNode} */
          /* @__PURE__ */ get_next_sibling(node)
        );
        node.remove();
        node = next2;
      }
      removed = true;
    }
    destroy_effect_children(effect2, remove_dom && !removed);
    destroy_effect_deriveds(effect2);
    remove_reactions(effect2, 0);
    set_signal_status(effect2, DESTROYED);
    var transitions = effect2.transitions;
    if (transitions !== null) {
      for (const transition of transitions) {
        transition.stop();
      }
    }
    execute_effect_teardown(effect2);
    var parent = effect2.parent;
    if (parent !== null && parent.first !== null) {
      unlink_effect(effect2);
    }
    {
      effect2.component_function = null;
    }
    effect2.next = effect2.prev = effect2.teardown = effect2.ctx = effect2.deps = effect2.fn = effect2.nodes_start = effect2.nodes_end = null;
  }
  function unlink_effect(effect2) {
    var parent = effect2.parent;
    var prev = effect2.prev;
    var next2 = effect2.next;
    if (prev !== null) prev.next = next2;
    if (next2 !== null) next2.prev = prev;
    if (parent !== null) {
      if (parent.first === effect2) parent.first = next2;
      if (parent.last === effect2) parent.last = prev;
    }
  }
  function pause_effect(effect2, callback) {
    var transitions = [];
    pause_children(effect2, transitions, true);
    run_out_transitions(transitions, () => {
      destroy_effect(effect2);
      if (callback) callback();
    });
  }
  function run_out_transitions(transitions, fn) {
    var remaining = transitions.length;
    if (remaining > 0) {
      var check = () => --remaining || fn();
      for (var transition of transitions) {
        transition.out(check);
      }
    } else {
      fn();
    }
  }
  function pause_children(effect2, transitions, local) {
    if ((effect2.f & INERT) !== 0) return;
    effect2.f ^= INERT;
    if (effect2.transitions !== null) {
      for (const transition of effect2.transitions) {
        if (transition.is_global || local) {
          transitions.push(transition);
        }
      }
    }
    var child2 = effect2.first;
    while (child2 !== null) {
      var sibling2 = child2.next;
      var transparent = (child2.f & EFFECT_TRANSPARENT) !== 0 || (child2.f & BRANCH_EFFECT) !== 0;
      pause_children(child2, transitions, transparent ? local : false);
      child2 = sibling2;
    }
  }
  function resume_effect(effect2) {
    resume_children(effect2, true);
  }
  function resume_children(effect2, local) {
    if ((effect2.f & INERT) === 0) return;
    if (check_dirtiness(effect2)) {
      update_effect(effect2);
    }
    effect2.f ^= INERT;
    var child2 = effect2.first;
    while (child2 !== null) {
      var sibling2 = child2.next;
      var transparent = (child2.f & EFFECT_TRANSPARENT) !== 0 || (child2.f & BRANCH_EFFECT) !== 0;
      resume_children(child2, transparent ? local : false);
      child2 = sibling2;
    }
    if (effect2.transitions !== null) {
      for (const transition of effect2.transitions) {
        if (transition.is_global || local) {
          transition.in();
        }
      }
    }
  }
  let is_micro_task_queued$1 = false;
  let current_queued_micro_tasks = [];
  function process_micro_tasks() {
    is_micro_task_queued$1 = false;
    const tasks = current_queued_micro_tasks.slice();
    current_queued_micro_tasks = [];
    run_all(tasks);
  }
  function queue_micro_task(fn) {
    if (!is_micro_task_queued$1) {
      is_micro_task_queued$1 = true;
      queueMicrotask(process_micro_tasks);
    }
    current_queued_micro_tasks.push(fn);
  }
  function flush_tasks() {
    if (is_micro_task_queued$1) {
      process_micro_tasks();
    }
  }
  function lifecycle_outside_component(name) {
    {
      const error = new Error(`lifecycle_outside_component
\`${name}(...)\` can only be used during component initialisation
https://svelte.dev/e/lifecycle_outside_component`);
      error.name = "Svelte error";
      throw error;
    }
  }
  function svelte_element_invalid_this_value() {
    {
      const error = new Error(`svelte_element_invalid_this_value
The \`this\` prop on \`<svelte:element>\` must be a string, if defined
https://svelte.dev/e/svelte_element_invalid_this_value`);
      error.name = "Svelte error";
      throw error;
    }
  }
  const FLUSH_MICROTASK = 0;
  const FLUSH_SYNC = 1;
  const handled_errors = /* @__PURE__ */ new WeakSet();
  let is_throwing_error = false;
  let scheduler_mode = FLUSH_MICROTASK;
  let is_micro_task_queued = false;
  let last_scheduled_effect = null;
  let is_flushing_effect = false;
  let is_destroying_effect = false;
  function set_is_flushing_effect(value) {
    is_flushing_effect = value;
  }
  function set_is_destroying_effect(value) {
    is_destroying_effect = value;
  }
  let queued_root_effects = [];
  let flush_count = 0;
  let dev_effect_stack = [];
  let active_reaction = null;
  function set_active_reaction(reaction) {
    active_reaction = reaction;
  }
  let active_effect = null;
  function set_active_effect(effect2) {
    active_effect = effect2;
  }
  let derived_sources = null;
  function set_derived_sources(sources) {
    derived_sources = sources;
  }
  let new_deps = null;
  let skipped_deps = 0;
  let untracked_writes = null;
  function set_untracked_writes(value) {
    untracked_writes = value;
  }
  let current_version = 1;
  let skip_reaction = false;
  let captured_signals = null;
  let component_context = null;
  let dev_current_component_function = null;
  function set_dev_current_component_function(fn) {
    dev_current_component_function = fn;
  }
  function increment_version() {
    return ++current_version;
  }
  function is_runes() {
    return !legacy_mode_flag || component_context !== null && component_context.l === null;
  }
  function check_dirtiness(reaction) {
    var _a2, _b2;
    var flags = reaction.f;
    if ((flags & DIRTY) !== 0) {
      return true;
    }
    if ((flags & MAYBE_DIRTY) !== 0) {
      var dependencies = reaction.deps;
      var is_unowned = (flags & UNOWNED) !== 0;
      if (dependencies !== null) {
        var i2;
        if ((flags & DISCONNECTED) !== 0) {
          for (i2 = 0; i2 < dependencies.length; i2++) {
            ((_a2 = dependencies[i2]).reactions ?? (_a2.reactions = [])).push(reaction);
          }
          reaction.f ^= DISCONNECTED;
        }
        for (i2 = 0; i2 < dependencies.length; i2++) {
          var dependency = dependencies[i2];
          if (check_dirtiness(
            /** @type {Derived} */
            dependency
          )) {
            update_derived(
              /** @type {Derived} */
              dependency
            );
          }
          if (is_unowned && active_effect !== null && !skip_reaction && !((_b2 = dependency == null ? void 0 : dependency.reactions) == null ? void 0 : _b2.includes(reaction))) {
            (dependency.reactions ?? (dependency.reactions = [])).push(reaction);
          }
          if (dependency.version > reaction.version) {
            return true;
          }
        }
      }
      if (!is_unowned || active_effect !== null && !skip_reaction) {
        set_signal_status(reaction, CLEAN);
      }
    }
    return false;
  }
  function propagate_error(error, effect2) {
    var current = effect2;
    while (current !== null) {
      if ((current.f & BOUNDARY_EFFECT) !== 0) {
        try {
          current.fn(error);
          return;
        } catch {
          current.f ^= BOUNDARY_EFFECT;
        }
      }
      current = current.parent;
    }
    is_throwing_error = false;
    throw error;
  }
  function should_rethrow_error(effect2) {
    return (effect2.f & DESTROYED) === 0 && (effect2.parent === null || (effect2.parent.f & BOUNDARY_EFFECT) === 0);
  }
  function handle_error(error, effect2, previous_effect, component_context2) {
    var _a2, _b2;
    if (is_throwing_error) {
      if (previous_effect === null) {
        is_throwing_error = false;
      }
      if (should_rethrow_error(effect2)) {
        throw error;
      }
      return;
    }
    if (previous_effect !== null) {
      is_throwing_error = true;
    }
    if (component_context2 === null || !(error instanceof Error) || handled_errors.has(error)) {
      propagate_error(error, effect2);
      return;
    }
    handled_errors.add(error);
    const component_stack = [];
    const effect_name = (_a2 = effect2.fn) == null ? void 0 : _a2.name;
    if (effect_name) {
      component_stack.push(effect_name);
    }
    let current_context = component_context2;
    while (current_context !== null) {
      {
        var filename = (_b2 = current_context.function) == null ? void 0 : _b2[FILENAME];
        if (filename) {
          const file = filename.split("/").pop();
          component_stack.push(file);
        }
      }
      current_context = current_context.p;
    }
    const indent = /Firefox/.test(navigator.userAgent) ? "  " : "	";
    define_property(error, "message", {
      value: error.message + `
${component_stack.map((name) => `
${indent}in ${name}`).join("")}
`
    });
    define_property(error, "component_stack", {
      value: component_stack
    });
    const stack2 = error.stack;
    if (stack2) {
      const lines = stack2.split("\n");
      const new_lines = [];
      for (let i2 = 0; i2 < lines.length; i2++) {
        const line = lines[i2];
        if (line.includes("svelte/src/internal")) {
          continue;
        }
        new_lines.push(line);
      }
      define_property(error, "stack", {
        value: new_lines.join("\n")
      });
    }
    propagate_error(error, effect2);
    if (should_rethrow_error(effect2)) {
      throw error;
    }
  }
  function update_reaction(reaction) {
    var _a2;
    var previous_deps = new_deps;
    var previous_skipped_deps = skipped_deps;
    var previous_untracked_writes = untracked_writes;
    var previous_reaction = active_reaction;
    var previous_skip_reaction = skip_reaction;
    var prev_derived_sources = derived_sources;
    var previous_component_context = component_context;
    var flags = reaction.f;
    new_deps = /** @type {null | Value[]} */
    null;
    skipped_deps = 0;
    untracked_writes = null;
    active_reaction = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 ? reaction : null;
    skip_reaction = !is_flushing_effect && (flags & UNOWNED) !== 0;
    derived_sources = null;
    component_context = reaction.ctx;
    try {
      var result2 = (
        /** @type {Function} */
        (0, reaction.fn)()
      );
      var deps = reaction.deps;
      if (new_deps !== null) {
        var i2;
        remove_reactions(reaction, skipped_deps);
        if (deps !== null && skipped_deps > 0) {
          deps.length = skipped_deps + new_deps.length;
          for (i2 = 0; i2 < new_deps.length; i2++) {
            deps[skipped_deps + i2] = new_deps[i2];
          }
        } else {
          reaction.deps = deps = new_deps;
        }
        if (!skip_reaction) {
          for (i2 = skipped_deps; i2 < deps.length; i2++) {
            ((_a2 = deps[i2]).reactions ?? (_a2.reactions = [])).push(reaction);
          }
        }
      } else if (deps !== null && skipped_deps < deps.length) {
        remove_reactions(reaction, skipped_deps);
        deps.length = skipped_deps;
      }
      return result2;
    } finally {
      new_deps = previous_deps;
      skipped_deps = previous_skipped_deps;
      untracked_writes = previous_untracked_writes;
      active_reaction = previous_reaction;
      skip_reaction = previous_skip_reaction;
      derived_sources = prev_derived_sources;
      component_context = previous_component_context;
    }
  }
  function remove_reaction(signal, dependency) {
    let reactions = dependency.reactions;
    if (reactions !== null) {
      var index2 = reactions.indexOf(signal);
      if (index2 !== -1) {
        var new_length = reactions.length - 1;
        if (new_length === 0) {
          reactions = dependency.reactions = null;
        } else {
          reactions[index2] = reactions[new_length];
          reactions.pop();
        }
      }
    }
    if (reactions === null && (dependency.f & DERIVED) !== 0 && // Destroying a child effect while updating a parent effect can cause a dependency to appear
    // to be unused, when in fact it is used by the currently-updating parent. Checking `new_deps`
    // allows us to skip the expensive work of disconnecting and immediately reconnecting it
    (new_deps === null || !new_deps.includes(dependency))) {
      set_signal_status(dependency, MAYBE_DIRTY);
      if ((dependency.f & (UNOWNED | DISCONNECTED)) === 0) {
        dependency.f ^= DISCONNECTED;
      }
      remove_reactions(
        /** @type {Derived} **/
        dependency,
        0
      );
    }
  }
  function remove_reactions(signal, start_index) {
    var dependencies = signal.deps;
    if (dependencies === null) return;
    for (var i2 = start_index; i2 < dependencies.length; i2++) {
      remove_reaction(signal, dependencies[i2]);
    }
  }
  function update_effect(effect2) {
    var flags = effect2.f;
    if ((flags & DESTROYED) !== 0) {
      return;
    }
    set_signal_status(effect2, CLEAN);
    var previous_effect = active_effect;
    var previous_component_context = component_context;
    active_effect = effect2;
    {
      var previous_component_fn = dev_current_component_function;
      dev_current_component_function = effect2.component_function;
    }
    try {
      if ((flags & BLOCK_EFFECT) !== 0) {
        destroy_block_effect_children(effect2);
      } else {
        destroy_effect_children(effect2);
      }
      destroy_effect_deriveds(effect2);
      execute_effect_teardown(effect2);
      var teardown2 = update_reaction(effect2);
      effect2.teardown = typeof teardown2 === "function" ? teardown2 : null;
      effect2.version = current_version;
      if (DEV) {
        dev_effect_stack.push(effect2);
      }
    } catch (error) {
      handle_error(error, effect2, previous_effect, previous_component_context || effect2.ctx);
    } finally {
      active_effect = previous_effect;
      {
        dev_current_component_function = previous_component_fn;
      }
    }
  }
  function log_effect_stack() {
    console.error(
      "Last ten effects were: ",
      dev_effect_stack.slice(-10).map((d2) => d2.fn)
    );
    dev_effect_stack = [];
  }
  function infinite_loop_guard() {
    if (flush_count > 1e3) {
      flush_count = 0;
      try {
        effect_update_depth_exceeded();
      } catch (error) {
        {
          define_property(error, "stack", {
            value: ""
          });
        }
        if (last_scheduled_effect !== null) {
          {
            try {
              handle_error(error, last_scheduled_effect, null, null);
            } catch (e) {
              log_effect_stack();
              throw e;
            }
          }
        } else {
          {
            log_effect_stack();
          }
          throw error;
        }
      }
    }
    flush_count++;
  }
  function flush_queued_root_effects(root_effects) {
    var length = root_effects.length;
    if (length === 0) {
      return;
    }
    infinite_loop_guard();
    var previously_flushing_effect = is_flushing_effect;
    is_flushing_effect = true;
    try {
      for (var i2 = 0; i2 < length; i2++) {
        var effect2 = root_effects[i2];
        if ((effect2.f & CLEAN) === 0) {
          effect2.f ^= CLEAN;
        }
        var collected_effects = [];
        process_effects(effect2, collected_effects);
        flush_queued_effects(collected_effects);
      }
    } finally {
      is_flushing_effect = previously_flushing_effect;
    }
  }
  function flush_queued_effects(effects) {
    var length = effects.length;
    if (length === 0) return;
    for (var i2 = 0; i2 < length; i2++) {
      var effect2 = effects[i2];
      if ((effect2.f & (DESTROYED | INERT)) === 0) {
        try {
          if (check_dirtiness(effect2)) {
            update_effect(effect2);
            if (effect2.deps === null && effect2.first === null && effect2.nodes_start === null) {
              if (effect2.teardown === null) {
                unlink_effect(effect2);
              } else {
                effect2.fn = null;
              }
            }
          }
        } catch (error) {
          handle_error(error, effect2, null, effect2.ctx);
        }
      }
    }
  }
  function process_deferred() {
    is_micro_task_queued = false;
    if (flush_count > 1001) {
      return;
    }
    const previous_queued_root_effects = queued_root_effects;
    queued_root_effects = [];
    flush_queued_root_effects(previous_queued_root_effects);
    if (!is_micro_task_queued) {
      flush_count = 0;
      last_scheduled_effect = null;
      {
        dev_effect_stack = [];
      }
    }
  }
  function schedule_effect(signal) {
    if (scheduler_mode === FLUSH_MICROTASK) {
      if (!is_micro_task_queued) {
        is_micro_task_queued = true;
        queueMicrotask(process_deferred);
      }
    }
    last_scheduled_effect = signal;
    var effect2 = signal;
    while (effect2.parent !== null) {
      effect2 = effect2.parent;
      var flags = effect2.f;
      if ((flags & (ROOT_EFFECT | BRANCH_EFFECT)) !== 0) {
        if ((flags & CLEAN) === 0) return;
        effect2.f ^= CLEAN;
      }
    }
    queued_root_effects.push(effect2);
  }
  function process_effects(effect2, collected_effects) {
    var current_effect = effect2.first;
    var effects = [];
    main_loop: while (current_effect !== null) {
      var flags = current_effect.f;
      var is_branch = (flags & BRANCH_EFFECT) !== 0;
      var is_skippable_branch = is_branch && (flags & CLEAN) !== 0;
      var sibling2 = current_effect.next;
      if (!is_skippable_branch && (flags & INERT) === 0) {
        if ((flags & RENDER_EFFECT) !== 0) {
          if (is_branch) {
            current_effect.f ^= CLEAN;
          } else {
            try {
              if (check_dirtiness(current_effect)) {
                update_effect(current_effect);
              }
            } catch (error) {
              handle_error(error, current_effect, null, current_effect.ctx);
            }
          }
          var child2 = current_effect.first;
          if (child2 !== null) {
            current_effect = child2;
            continue;
          }
        } else if ((flags & EFFECT) !== 0) {
          effects.push(current_effect);
        }
      }
      if (sibling2 === null) {
        let parent = current_effect.parent;
        while (parent !== null) {
          if (effect2 === parent) {
            break main_loop;
          }
          var parent_sibling = parent.next;
          if (parent_sibling !== null) {
            current_effect = parent_sibling;
            continue main_loop;
          }
          parent = parent.parent;
        }
      }
      current_effect = sibling2;
    }
    for (var i2 = 0; i2 < effects.length; i2++) {
      child2 = effects[i2];
      collected_effects.push(child2);
      process_effects(child2, collected_effects);
    }
  }
  function flush_sync(fn) {
    var previous_scheduler_mode = scheduler_mode;
    var previous_queued_root_effects = queued_root_effects;
    try {
      infinite_loop_guard();
      const root_effects = [];
      scheduler_mode = FLUSH_SYNC;
      queued_root_effects = root_effects;
      is_micro_task_queued = false;
      flush_queued_root_effects(previous_queued_root_effects);
      var result2 = fn == null ? void 0 : fn();
      flush_tasks();
      if (queued_root_effects.length > 0 || root_effects.length > 0) {
        flush_sync();
      }
      flush_count = 0;
      last_scheduled_effect = null;
      if (DEV) {
        dev_effect_stack = [];
      }
      return result2;
    } finally {
      scheduler_mode = previous_scheduler_mode;
      queued_root_effects = previous_queued_root_effects;
    }
  }
  async function tick() {
    await Promise.resolve();
    flush_sync();
  }
  function get$2(signal) {
    var _a2;
    var flags = signal.f;
    var is_derived = (flags & DERIVED) !== 0;
    if (is_derived && (flags & DESTROYED) !== 0) {
      var value = execute_derived(
        /** @type {Derived} */
        signal
      );
      destroy_derived(
        /** @type {Derived} */
        signal
      );
      return value;
    }
    if (captured_signals !== null) {
      captured_signals.add(signal);
    }
    if (active_reaction !== null) {
      if (derived_sources !== null && derived_sources.includes(signal)) {
        state_unsafe_local_read();
      }
      var deps = active_reaction.deps;
      if (new_deps === null && deps !== null && deps[skipped_deps] === signal) {
        skipped_deps++;
      } else if (new_deps === null) {
        new_deps = [signal];
      } else {
        new_deps.push(signal);
      }
      if (untracked_writes !== null && active_effect !== null && (active_effect.f & CLEAN) !== 0 && (active_effect.f & BRANCH_EFFECT) === 0 && untracked_writes.includes(signal)) {
        set_signal_status(active_effect, DIRTY);
        schedule_effect(active_effect);
      }
    } else if (is_derived && /** @type {Derived} */
    signal.deps === null) {
      var derived2 = (
        /** @type {Derived} */
        signal
      );
      var parent = derived2.parent;
      var target = derived2;
      while (parent !== null) {
        if ((parent.f & DERIVED) !== 0) {
          var parent_derived = (
            /** @type {Derived} */
            parent
          );
          target = parent_derived;
          parent = parent_derived.parent;
        } else {
          var parent_effect = (
            /** @type {Effect} */
            parent
          );
          if (!((_a2 = parent_effect.deriveds) == null ? void 0 : _a2.includes(target))) {
            (parent_effect.deriveds ?? (parent_effect.deriveds = [])).push(target);
          }
          break;
        }
      }
    }
    if (is_derived) {
      derived2 = /** @type {Derived} */
      signal;
      if (check_dirtiness(derived2)) {
        update_derived(derived2);
      }
    }
    return signal.v;
  }
  function capture_signals(fn) {
    var previous_captured_signals = captured_signals;
    captured_signals = /* @__PURE__ */ new Set();
    var captured = captured_signals;
    var signal;
    try {
      untrack(fn);
      if (previous_captured_signals !== null) {
        for (signal of captured_signals) {
          previous_captured_signals.add(signal);
        }
      }
    } finally {
      captured_signals = previous_captured_signals;
    }
    return captured;
  }
  function invalidate_inner_signals(fn) {
    var captured = capture_signals(() => untrack(fn));
    for (var signal of captured) {
      if ((signal.f & LEGACY_DERIVED_PROP) !== 0) {
        for (
          const dep of
          /** @type {Derived} */
          signal.deps || []
        ) {
          if ((dep.f & DERIVED) === 0) {
            internal_set(dep, dep.v);
          }
        }
      } else {
        internal_set(signal, signal.v);
      }
    }
  }
  function untrack(fn) {
    const previous_reaction = active_reaction;
    try {
      active_reaction = null;
      return fn();
    } finally {
      active_reaction = previous_reaction;
    }
  }
  const STATUS_MASK = ~(DIRTY | MAYBE_DIRTY | CLEAN);
  function set_signal_status(signal, status) {
    signal.f = signal.f & STATUS_MASK | status;
  }
  function getContext$1(key) {
    const context_map = get_or_init_context_map("getContext");
    const result2 = (
      /** @type {T} */
      context_map.get(key)
    );
    {
      const fn = (
        /** @type {ComponentContext} */
        component_context.function
      );
      if (fn) {
        add_owner(result2, fn, true);
      }
    }
    return result2;
  }
  function setContext$1(key, context) {
    const context_map = get_or_init_context_map("setContext");
    context_map.set(key, context);
    return context;
  }
  function hasContext(key) {
    const context_map = get_or_init_context_map("hasContext");
    return context_map.has(key);
  }
  function getAllContexts() {
    const context_map = get_or_init_context_map("getAllContexts");
    {
      const fn = component_context == null ? void 0 : component_context.function;
      if (fn) {
        for (const value of context_map.values()) {
          add_owner(value, fn, true);
        }
      }
    }
    return (
      /** @type {T} */
      context_map
    );
  }
  function get_or_init_context_map(name) {
    if (component_context === null) {
      lifecycle_outside_component(name);
    }
    return component_context.c ?? (component_context.c = new Map(get_parent_context(component_context) || void 0));
  }
  function get_parent_context(component_context2) {
    let parent = component_context2.p;
    while (parent !== null) {
      const context_map = parent.c;
      if (context_map !== null) {
        return context_map;
      }
      parent = parent.p;
    }
    return null;
  }
  function update(signal, d2 = 1) {
    var value = get$2(signal);
    var result2 = d2 === 1 ? value++ : value--;
    set(signal, value);
    return result2;
  }
  function push(props, runes = false, fn) {
    component_context = {
      p: component_context,
      c: null,
      e: null,
      m: false,
      s: props,
      x: null,
      l: null
    };
    if (legacy_mode_flag && !runes) {
      component_context.l = {
        s: null,
        u: null,
        r1: [],
        r2: source(false)
      };
    }
    {
      component_context.function = fn;
      dev_current_component_function = fn;
    }
  }
  function pop(component2) {
    var _a2;
    const context_stack_item = component_context;
    if (context_stack_item !== null) {
      if (component2 !== void 0) {
        context_stack_item.x = component2;
      }
      const component_effects = context_stack_item.e;
      if (component_effects !== null) {
        var previous_effect = active_effect;
        var previous_reaction = active_reaction;
        context_stack_item.e = null;
        try {
          for (var i2 = 0; i2 < component_effects.length; i2++) {
            var component_effect = component_effects[i2];
            set_active_effect(component_effect.effect);
            set_active_reaction(component_effect.reaction);
            effect(component_effect.fn);
          }
        } finally {
          set_active_effect(previous_effect);
          set_active_reaction(previous_reaction);
        }
      }
      component_context = context_stack_item.p;
      {
        dev_current_component_function = ((_a2 = context_stack_item.p) == null ? void 0 : _a2.function) ?? null;
      }
      context_stack_item.m = true;
    }
    return component2 || /** @type {T} */
    {};
  }
  function deep_read_state(value) {
    if (typeof value !== "object" || !value || value instanceof EventTarget) {
      return;
    }
    if (STATE_SYMBOL in value) {
      deep_read(value);
    } else if (!Array.isArray(value)) {
      for (let key in value) {
        const prop2 = value[key];
        if (typeof prop2 === "object" && prop2 && STATE_SYMBOL in prop2) {
          deep_read(prop2);
        }
      }
    }
  }
  function deep_read(value, visited = /* @__PURE__ */ new Set()) {
    if (typeof value === "object" && value !== null && // We don't want to traverse DOM elements
    !(value instanceof EventTarget) && !visited.has(value)) {
      visited.add(value);
      if (value instanceof Date) {
        value.getTime();
      }
      for (let key in value) {
        try {
          deep_read(value[key], visited);
        } catch (e) {
        }
      }
      const proto = get_prototype_of(value);
      if (proto !== Object.prototype && proto !== Array.prototype && proto !== Map.prototype && proto !== Set.prototype && proto !== Date.prototype) {
        const descriptors = get_descriptors(proto);
        for (let key in descriptors) {
          const get2 = descriptors[key].get;
          if (get2) {
            try {
              get2.call(value);
            } catch (e) {
            }
          }
        }
      }
    }
  }
  {
    let throw_rune_error = function(rune) {
      if (!(rune in globalThis)) {
        let value;
        Object.defineProperty(globalThis, rune, {
          configurable: true,
          // eslint-disable-next-line getter-return
          get: () => {
            if (value !== void 0) {
              return value;
            }
            rune_outside_svelte(rune);
          },
          set: (v2) => {
            value = v2;
          }
        });
      }
    };
    throw_rune_error("$state");
    throw_rune_error("$effect");
    throw_rune_error("$derived");
    throw_rune_error("$inspect");
    throw_rune_error("$props");
    throw_rune_error("$bindable");
  }
  function add_locations(fn, filename, locations) {
    return (...args) => {
      const dom = fn(...args);
      var node = dom.nodeType === 11 ? dom.firstChild : dom;
      assign_locations(node, filename, locations);
      return dom;
    };
  }
  function assign_location(element2, filename, location2) {
    element2.__svelte_meta = {
      loc: { file: filename, line: location2[0], column: location2[1] }
    };
    if (location2[2]) {
      assign_locations(element2.firstChild, filename, location2[2]);
    }
  }
  function assign_locations(node, filename, locations) {
    var i2 = 0;
    while (node && i2 < locations.length) {
      if (node.nodeType === 1) {
        assign_location(
          /** @type {Element} */
          node,
          filename,
          locations[i2++]
        );
      }
      node = node.nextSibling;
    }
  }
  function autofocus(dom, value) {
    if (value) {
      const body = document.body;
      dom.autofocus = true;
      queue_micro_task(() => {
        if (document.activeElement === body) {
          dom.focus();
        }
      });
    }
  }
  let listening_to_form_reset = false;
  function add_form_reset_listener() {
    if (!listening_to_form_reset) {
      listening_to_form_reset = true;
      document.addEventListener(
        "reset",
        (evt) => {
          Promise.resolve().then(() => {
            var _a2;
            if (!evt.defaultPrevented) {
              for (
                const e of
                /**@type {HTMLFormElement} */
                evt.target.elements
              ) {
                (_a2 = e.__on_r) == null ? void 0 : _a2.call(e);
              }
            }
          });
        },
        // In the capture phase to guarantee we get noticed of it (no possiblity of stopPropagation)
        { capture: true }
      );
    }
  }
  function without_reactive_context(fn) {
    var previous_reaction = active_reaction;
    var previous_effect = active_effect;
    set_active_reaction(null);
    set_active_effect(null);
    try {
      return fn();
    } finally {
      set_active_reaction(previous_reaction);
      set_active_effect(previous_effect);
    }
  }
  function listen_to_event_and_reset_event(element2, event2, handler, on_reset = handler) {
    element2.addEventListener(event2, () => without_reactive_context(handler));
    const prev = element2.__on_r;
    if (prev) {
      element2.__on_r = () => {
        prev();
        on_reset(true);
      };
    } else {
      element2.__on_r = () => on_reset(true);
    }
    add_form_reset_listener();
  }
  const all_registered_events = /* @__PURE__ */ new Set();
  const root_event_handles = /* @__PURE__ */ new Set();
  function create_event(event_name, dom, handler, options) {
    function target_handler(event2) {
      if (!options.capture) {
        handle_event_propagation.call(dom, event2);
      }
      if (!event2.cancelBubble) {
        return without_reactive_context(() => {
          return handler.call(this, event2);
        });
      }
    }
    if (event_name.startsWith("pointer") || event_name.startsWith("touch") || event_name === "wheel") {
      queue_micro_task(() => {
        dom.addEventListener(event_name, target_handler, options);
      });
    } else {
      dom.addEventListener(event_name, target_handler, options);
    }
    return target_handler;
  }
  function event(event_name, dom, handler, capture, passive) {
    var options = { capture, passive };
    var target_handler = create_event(event_name, dom, handler, options);
    if (dom === document.body || dom === window || dom === document) {
      teardown(() => {
        dom.removeEventListener(event_name, target_handler, options);
      });
    }
  }
  function delegate(events) {
    for (var i2 = 0; i2 < events.length; i2++) {
      all_registered_events.add(events[i2]);
    }
    for (var fn of root_event_handles) {
      fn(events);
    }
  }
  function handle_event_propagation(event2) {
    var _a2;
    var handler_element = this;
    var owner_document = (
      /** @type {Node} */
      handler_element.ownerDocument
    );
    var event_name = event2.type;
    var path = ((_a2 = event2.composedPath) == null ? void 0 : _a2.call(event2)) || [];
    var current_target = (
      /** @type {null | Element} */
      path[0] || event2.target
    );
    var path_idx = 0;
    var handled_at = event2.__root;
    if (handled_at) {
      var at_idx = path.indexOf(handled_at);
      if (at_idx !== -1 && (handler_element === document || handler_element === /** @type {any} */
      window)) {
        event2.__root = handler_element;
        return;
      }
      var handler_idx = path.indexOf(handler_element);
      if (handler_idx === -1) {
        return;
      }
      if (at_idx <= handler_idx) {
        path_idx = at_idx;
      }
    }
    current_target = /** @type {Element} */
    path[path_idx] || event2.target;
    if (current_target === handler_element) return;
    define_property(event2, "currentTarget", {
      configurable: true,
      get() {
        return current_target || owner_document;
      }
    });
    var previous_reaction = active_reaction;
    var previous_effect = active_effect;
    set_active_reaction(null);
    set_active_effect(null);
    try {
      var throw_error;
      var other_errors = [];
      while (current_target !== null) {
        var parent_element = current_target.assignedSlot || current_target.parentNode || /** @type {any} */
        current_target.host || null;
        try {
          var delegated = current_target["__" + event_name];
          if (delegated !== void 0 && !/** @type {any} */
          current_target.disabled) {
            if (is_array(delegated)) {
              var [fn, ...data] = delegated;
              fn.apply(current_target, [event2, ...data]);
            } else {
              delegated.call(current_target, event2);
            }
          }
        } catch (error) {
          if (throw_error) {
            other_errors.push(error);
          } else {
            throw_error = error;
          }
        }
        if (event2.cancelBubble || parent_element === handler_element || parent_element === null) {
          break;
        }
        current_target = parent_element;
      }
      if (throw_error) {
        for (let error of other_errors) {
          queueMicrotask(() => {
            throw error;
          });
        }
        throw throw_error;
      }
    } finally {
      event2.__root = handler_element;
      delete event2.currentTarget;
      set_active_reaction(previous_reaction);
      set_active_effect(previous_effect);
    }
  }
  function create_fragment_from_html(html) {
    var elem = document.createElement("template");
    elem.innerHTML = html;
    return elem.content;
  }
  function assign_nodes(start, end) {
    var effect2 = (
      /** @type {Effect} */
      active_effect
    );
    if (effect2.nodes_start === null) {
      effect2.nodes_start = start;
      effect2.nodes_end = end;
    }
  }
  // @__NO_SIDE_EFFECTS__
  function template(content, flags) {
    var is_fragment = (flags & TEMPLATE_FRAGMENT) !== 0;
    var use_import_node = (flags & TEMPLATE_USE_IMPORT_NODE) !== 0;
    var node;
    var has_start = !content.startsWith("<!>");
    return () => {
      if (node === void 0) {
        node = create_fragment_from_html(has_start ? content : "<!>" + content);
        if (!is_fragment) node = /** @type {Node} */
        /* @__PURE__ */ get_first_child(node);
      }
      var clone = (
        /** @type {TemplateNode} */
        use_import_node ? document.importNode(node, true) : node.cloneNode(true)
      );
      if (is_fragment) {
        var start = (
          /** @type {TemplateNode} */
          /* @__PURE__ */ get_first_child(clone)
        );
        var end = (
          /** @type {TemplateNode} */
          clone.lastChild
        );
        assign_nodes(start, end);
      } else {
        assign_nodes(clone, clone);
      }
      return clone;
    };
  }
  // @__NO_SIDE_EFFECTS__
  function ns_template(content, flags, ns = "svg") {
    var has_start = !content.startsWith("<!>");
    var wrapped = `<${ns}>${has_start ? content : "<!>" + content}</${ns}>`;
    var node;
    return () => {
      if (!node) {
        var fragment = (
          /** @type {DocumentFragment} */
          create_fragment_from_html(wrapped)
        );
        var root2 = (
          /** @type {Element} */
          /* @__PURE__ */ get_first_child(fragment)
        );
        {
          node = /** @type {Element} */
          /* @__PURE__ */ get_first_child(root2);
        }
      }
      var clone = (
        /** @type {TemplateNode} */
        node.cloneNode(true)
      );
      {
        assign_nodes(clone, clone);
      }
      return clone;
    };
  }
  function text(value = "") {
    {
      var t = create_text(value + "");
      assign_nodes(t, t);
      return t;
    }
  }
  function comment() {
    var frag = document.createDocumentFragment();
    var start = document.createComment("");
    var anchor = create_text();
    frag.append(start, anchor);
    assign_nodes(start, anchor);
    return frag;
  }
  function append(anchor, dom) {
    if (anchor === null) {
      return;
    }
    anchor.before(
      /** @type {Node} */
      dom
    );
  }
  function set_text(text2, value) {
    var str = value == null ? "" : typeof value === "object" ? value + "" : value;
    if (str !== (text2.__t ?? (text2.__t = text2.nodeValue))) {
      text2.__t = str;
      text2.nodeValue = str == null ? "" : str + "";
    }
  }
  function mount(component2, options) {
    return _mount(component2, options);
  }
  const document_listeners = /* @__PURE__ */ new Map();
  function _mount(Component, { target, anchor, props = {}, events, context, intro = true }) {
    init_operations();
    var registered_events = /* @__PURE__ */ new Set();
    var event_handle = (events2) => {
      for (var i2 = 0; i2 < events2.length; i2++) {
        var event_name = events2[i2];
        if (registered_events.has(event_name)) continue;
        registered_events.add(event_name);
        var passive = is_passive_event(event_name);
        target.addEventListener(event_name, handle_event_propagation, { passive });
        var n = document_listeners.get(event_name);
        if (n === void 0) {
          document.addEventListener(event_name, handle_event_propagation, { passive });
          document_listeners.set(event_name, 1);
        } else {
          document_listeners.set(event_name, n + 1);
        }
      }
    };
    event_handle(array_from(all_registered_events));
    root_event_handles.add(event_handle);
    var component2 = void 0;
    var unmount2 = component_root(() => {
      var anchor_node = anchor ?? target.appendChild(create_text());
      branch(() => {
        if (context) {
          push({});
          var ctx = (
            /** @type {ComponentContext} */
            component_context
          );
          ctx.c = context;
        }
        if (events) {
          props.$$events = events;
        }
        component2 = Component(anchor_node, props) || {};
        if (context) {
          pop();
        }
      });
      return () => {
        var _a2;
        for (var event_name of registered_events) {
          target.removeEventListener(event_name, handle_event_propagation);
          var n = (
            /** @type {number} */
            document_listeners.get(event_name)
          );
          if (--n === 0) {
            document.removeEventListener(event_name, handle_event_propagation);
            document_listeners.delete(event_name);
          } else {
            document_listeners.set(event_name, n);
          }
        }
        root_event_handles.delete(event_handle);
        if (anchor_node !== anchor) {
          (_a2 = anchor_node.parentNode) == null ? void 0 : _a2.removeChild(anchor_node);
        }
      };
    });
    mounted_components.set(component2, unmount2);
    return component2;
  }
  let mounted_components = /* @__PURE__ */ new WeakMap();
  function unmount(component2, options) {
    const fn = mounted_components.get(component2);
    if (fn) {
      mounted_components.delete(component2);
      return fn(options);
    }
    {
      lifecycle_double_unmount();
    }
    return Promise.resolve();
  }
  function check_target(target) {
    if (target) {
      component_api_invalid_new(target[FILENAME] ?? "a component", target.name);
    }
  }
  function legacy_api() {
    const component2 = component_context == null ? void 0 : component_context.function;
    function error(method) {
      var _a2;
      const parent = ((_a2 = get_component()) == null ? void 0 : _a2[FILENAME]) ?? "Something";
      component_api_changed(parent, method, component2[FILENAME]);
    }
    return {
      $destroy: () => error("$destroy()"),
      $on: () => error("$on(...)"),
      $set: () => error("$set(...)")
    };
  }
  function if_block(node, fn, elseif = false) {
    var anchor = node;
    var consequent_effect = null;
    var alternate_effect = null;
    var condition = UNINITIALIZED;
    var flags = elseif ? EFFECT_TRANSPARENT : 0;
    var has_branch = false;
    const set_branch = (fn2, flag = true) => {
      has_branch = true;
      update_branch(flag, fn2);
    };
    const update_branch = (new_condition, fn2) => {
      if (condition === (condition = new_condition)) return;
      if (condition) {
        if (consequent_effect) {
          resume_effect(consequent_effect);
        } else if (fn2) {
          consequent_effect = branch(() => fn2(anchor));
        }
        if (alternate_effect) {
          pause_effect(alternate_effect, () => {
            alternate_effect = null;
          });
        }
      } else {
        if (alternate_effect) {
          resume_effect(alternate_effect);
        } else if (fn2) {
          alternate_effect = branch(() => fn2(anchor));
        }
        if (consequent_effect) {
          pause_effect(consequent_effect, () => {
            consequent_effect = null;
          });
        }
      }
    };
    block(() => {
      has_branch = false;
      fn(set_branch);
      if (!has_branch) {
        update_branch(null, null);
      }
    }, flags);
  }
  function key_block(node, get_key, render_fn) {
    var anchor = node;
    var key = UNINITIALIZED;
    var effect2;
    var changed = is_runes() ? not_equal : safe_not_equal;
    block(() => {
      if (changed(key, key = get_key())) {
        if (effect2) {
          pause_effect(effect2);
        }
        effect2 = branch(() => render_fn(anchor));
      }
    });
  }
  function index(_2, i2) {
    return i2;
  }
  function pause_effects(state2, items, controlled_anchor, items_map) {
    var transitions = [];
    var length = items.length;
    for (var i2 = 0; i2 < length; i2++) {
      pause_children(items[i2].e, transitions, true);
    }
    var is_controlled = length > 0 && transitions.length === 0 && controlled_anchor !== null;
    if (is_controlled) {
      var parent_node = (
        /** @type {Element} */
        /** @type {Element} */
        controlled_anchor.parentNode
      );
      clear_text_content(parent_node);
      parent_node.append(
        /** @type {Element} */
        controlled_anchor
      );
      items_map.clear();
      link(state2, items[0].prev, items[length - 1].next);
    }
    run_out_transitions(transitions, () => {
      for (var i3 = 0; i3 < length; i3++) {
        var item = items[i3];
        if (!is_controlled) {
          items_map.delete(item.k);
          link(state2, item.prev, item.next);
        }
        destroy_effect(item.e, !is_controlled);
      }
    });
  }
  function each(node, flags, get_collection, get_key, render_fn, fallback_fn = null) {
    var anchor = node;
    var state2 = { flags, items: /* @__PURE__ */ new Map(), first: null };
    var is_controlled = (flags & EACH_IS_CONTROLLED) !== 0;
    if (is_controlled) {
      var parent_node = (
        /** @type {Element} */
        node
      );
      anchor = parent_node.appendChild(create_text());
    }
    var fallback = null;
    var was_empty = false;
    block(() => {
      var collection = get_collection();
      var array = is_array(collection) ? collection : collection == null ? [] : array_from(collection);
      var length = array.length;
      if (was_empty && length === 0) {
        return;
      }
      was_empty = length === 0;
      {
        var effect2 = (
          /** @type {Effect} */
          active_reaction
        );
        reconcile(
          array,
          state2,
          anchor,
          render_fn,
          flags,
          (effect2.f & INERT) !== 0,
          get_key,
          get_collection
        );
      }
      if (fallback_fn !== null) {
        if (length === 0) {
          if (fallback) {
            resume_effect(fallback);
          } else {
            fallback = branch(() => fallback_fn(anchor));
          }
        } else if (fallback !== null) {
          pause_effect(fallback, () => {
            fallback = null;
          });
        }
      }
      get_collection();
    });
  }
  function reconcile(array, state2, anchor, render_fn, flags, is_inert, get_key, get_collection) {
    var _a2, _b2, _c, _d;
    var is_animated = (flags & EACH_IS_ANIMATED) !== 0;
    var should_update = (flags & (EACH_ITEM_REACTIVE | EACH_INDEX_REACTIVE)) !== 0;
    var length = array.length;
    var items = state2.items;
    var first = state2.first;
    var current = first;
    var seen;
    var prev = null;
    var to_animate;
    var matched = [];
    var stashed = [];
    var value;
    var key;
    var item;
    var i2;
    if (is_animated) {
      for (i2 = 0; i2 < length; i2 += 1) {
        value = array[i2];
        key = get_key(value, i2);
        item = items.get(key);
        if (item !== void 0) {
          (_a2 = item.a) == null ? void 0 : _a2.measure();
          (to_animate ?? (to_animate = /* @__PURE__ */ new Set())).add(item);
        }
      }
    }
    for (i2 = 0; i2 < length; i2 += 1) {
      value = array[i2];
      key = get_key(value, i2);
      item = items.get(key);
      if (item === void 0) {
        var child_anchor = current ? (
          /** @type {TemplateNode} */
          current.e.nodes_start
        ) : anchor;
        prev = create_item(
          child_anchor,
          state2,
          prev,
          prev === null ? state2.first : prev.next,
          value,
          key,
          i2,
          render_fn,
          flags,
          get_collection
        );
        items.set(key, prev);
        matched = [];
        stashed = [];
        current = prev.next;
        continue;
      }
      if (should_update) {
        update_item(item, value, i2, flags);
      }
      if ((item.e.f & INERT) !== 0) {
        resume_effect(item.e);
        if (is_animated) {
          (_b2 = item.a) == null ? void 0 : _b2.unfix();
          (to_animate ?? (to_animate = /* @__PURE__ */ new Set())).delete(item);
        }
      }
      if (item !== current) {
        if (seen !== void 0 && seen.has(item)) {
          if (matched.length < stashed.length) {
            var start = stashed[0];
            var j2;
            prev = start.prev;
            var a2 = matched[0];
            var b2 = matched[matched.length - 1];
            for (j2 = 0; j2 < matched.length; j2 += 1) {
              move(matched[j2], start, anchor);
            }
            for (j2 = 0; j2 < stashed.length; j2 += 1) {
              seen.delete(stashed[j2]);
            }
            link(state2, a2.prev, b2.next);
            link(state2, prev, a2);
            link(state2, b2, start);
            current = start;
            prev = b2;
            i2 -= 1;
            matched = [];
            stashed = [];
          } else {
            seen.delete(item);
            move(item, current, anchor);
            link(state2, item.prev, item.next);
            link(state2, item, prev === null ? state2.first : prev.next);
            link(state2, prev, item);
            prev = item;
          }
          continue;
        }
        matched = [];
        stashed = [];
        while (current !== null && current.k !== key) {
          if (is_inert || (current.e.f & INERT) === 0) {
            (seen ?? (seen = /* @__PURE__ */ new Set())).add(current);
          }
          stashed.push(current);
          current = current.next;
        }
        if (current === null) {
          continue;
        }
        item = current;
      }
      matched.push(item);
      prev = item;
      current = item.next;
    }
    if (current !== null || seen !== void 0) {
      var to_destroy = seen === void 0 ? [] : array_from(seen);
      while (current !== null) {
        if (is_inert || (current.e.f & INERT) === 0) {
          to_destroy.push(current);
        }
        current = current.next;
      }
      var destroy_length = to_destroy.length;
      if (destroy_length > 0) {
        var controlled_anchor = (flags & EACH_IS_CONTROLLED) !== 0 && length === 0 ? anchor : null;
        if (is_animated) {
          for (i2 = 0; i2 < destroy_length; i2 += 1) {
            (_c = to_destroy[i2].a) == null ? void 0 : _c.measure();
          }
          for (i2 = 0; i2 < destroy_length; i2 += 1) {
            (_d = to_destroy[i2].a) == null ? void 0 : _d.fix();
          }
        }
        pause_effects(state2, to_destroy, controlled_anchor, items);
      }
    }
    if (is_animated) {
      queue_micro_task(() => {
        var _a3;
        if (to_animate === void 0) return;
        for (item of to_animate) {
          (_a3 = item.a) == null ? void 0 : _a3.apply();
        }
      });
    }
    active_effect.first = state2.first && state2.first.e;
    active_effect.last = prev && prev.e;
  }
  function update_item(item, value, index2, type) {
    if ((type & EACH_ITEM_REACTIVE) !== 0) {
      internal_set(item.v, value);
    }
    if ((type & EACH_INDEX_REACTIVE) !== 0) {
      internal_set(
        /** @type {Value<number>} */
        item.i,
        index2
      );
    } else {
      item.i = index2;
    }
  }
  function create_item(anchor, state2, prev, next2, value, key, index2, render_fn, flags, get_collection) {
    var reactive = (flags & EACH_ITEM_REACTIVE) !== 0;
    var mutable = (flags & EACH_ITEM_IMMUTABLE) === 0;
    var v2 = reactive ? mutable ? /* @__PURE__ */ mutable_source(value) : source(value) : value;
    var i2 = (flags & EACH_INDEX_REACTIVE) === 0 ? index2 : source(index2);
    if (reactive) {
      v2.debug = () => {
        var collection_index = typeof i2 === "number" ? index2 : i2.v;
        get_collection()[collection_index];
      };
    }
    var item = {
      i: i2,
      v: v2,
      k: key,
      a: null,
      // @ts-expect-error
      e: null,
      prev,
      next: next2
    };
    try {
      item.e = branch(() => render_fn(anchor, v2, i2), hydrating);
      item.e.prev = prev && prev.e;
      item.e.next = next2 && next2.e;
      if (prev === null) {
        state2.first = item;
      } else {
        prev.next = item;
        prev.e.next = item.e;
      }
      if (next2 !== null) {
        next2.prev = item;
        next2.e.prev = item.e;
      }
      return item;
    } finally {
    }
  }
  function move(item, next2, anchor) {
    var end = item.next ? (
      /** @type {TemplateNode} */
      item.next.e.nodes_start
    ) : anchor;
    var dest = next2 ? (
      /** @type {TemplateNode} */
      next2.e.nodes_start
    ) : anchor;
    var node = (
      /** @type {TemplateNode} */
      item.e.nodes_start
    );
    while (node !== end) {
      var next_node = (
        /** @type {TemplateNode} */
        /* @__PURE__ */ get_next_sibling(node)
      );
      dest.before(node);
      node = next_node;
    }
  }
  function link(state2, prev, next2) {
    if (prev === null) {
      state2.first = next2;
    } else {
      prev.next = next2;
      prev.e.next = next2 && next2.e;
    }
    if (next2 !== null) {
      next2.prev = prev;
      next2.e.prev = prev && prev.e;
    }
  }
  function slot(anchor, $$props, name, slot_props, fallback_fn) {
    var _a2;
    var slot_fn = (_a2 = $$props.$$slots) == null ? void 0 : _a2[name];
    var is_interop = false;
    if (slot_fn === true) {
      slot_fn = $$props["children"];
      is_interop = true;
    }
    if (slot_fn === void 0) ;
    else {
      slot_fn(anchor, is_interop ? () => slot_props : slot_props);
    }
  }
  function snippet(node, get_snippet, ...args) {
    var anchor = node;
    var snippet2 = noop$1;
    var snippet_effect;
    block(() => {
      if (snippet2 === (snippet2 = get_snippet())) return;
      if (snippet_effect) {
        destroy_effect(snippet_effect);
        snippet_effect = null;
      }
      if (snippet2 == null) {
        invalid_snippet();
      }
      snippet_effect = branch(() => (
        /** @type {SnippetFn} */
        snippet2(anchor, ...args)
      ));
    }, EFFECT_TRANSPARENT);
  }
  function wrap_snippet(component2, fn) {
    return (node, ...args) => {
      var previous_component_function = dev_current_component_function;
      set_dev_current_component_function(component2);
      try {
        return fn(node, ...args);
      } finally {
        set_dev_current_component_function(previous_component_function);
      }
    };
  }
  function component(node, get_component2, render_fn) {
    var anchor = node;
    var component2;
    var effect2;
    block(() => {
      if (component2 === (component2 = get_component2())) return;
      if (effect2) {
        pause_effect(effect2);
        effect2 = null;
      }
      if (component2) {
        effect2 = branch(() => render_fn(anchor, component2));
      }
    }, EFFECT_TRANSPARENT);
  }
  function element(node, get_tag, is_svg, render_fn, get_namespace, location2) {
    var filename = location2 && (component_context == null ? void 0 : component_context.function[FILENAME]);
    var tag;
    var current_tag;
    var element2 = null;
    var anchor = (
      /** @type {TemplateNode} */
      node
    );
    var effect2;
    block(() => {
      const next_tag = get_tag() || null;
      var ns = NAMESPACE_SVG;
      if (next_tag === tag) return;
      if (effect2) {
        if (next_tag === null) {
          pause_effect(effect2, () => {
            effect2 = null;
            current_tag = null;
          });
        } else if (next_tag === current_tag) {
          resume_effect(effect2);
        } else {
          destroy_effect(effect2);
        }
      }
      if (next_tag && next_tag !== current_tag) {
        effect2 = branch(() => {
          element2 = document.createElementNS(ns, next_tag);
          if (location2) {
            element2.__svelte_meta = {
              loc: {
                file: filename,
                line: location2[0],
                column: location2[1]
              }
            };
          }
          assign_nodes(element2, element2);
          if (render_fn) {
            var child_anchor = (
              /** @type {TemplateNode} */
              element2.appendChild(create_text())
            );
            render_fn(element2, child_anchor);
          }
          active_effect.nodes_end = element2;
          anchor.before(element2);
        });
      }
      tag = next_tag;
      if (tag) current_tag = tag;
    }, EFFECT_TRANSPARENT);
  }
  function r$1(e) {
    var t, f2, n = "";
    if ("string" == typeof e || "number" == typeof e) n += e;
    else if ("object" == typeof e) if (Array.isArray(e)) {
      var o2 = e.length;
      for (t = 0; t < o2; t++) e[t] && (f2 = r$1(e[t])) && (n && (n += " "), n += f2);
    } else for (f2 in e) e[f2] && (n && (n += " "), n += f2);
    return n;
  }
  function clsx$1() {
    for (var e, t, f2 = 0, n = "", o2 = arguments.length; f2 < o2; f2++) (e = arguments[f2]) && (t = r$1(e)) && (n && (n += " "), n += t);
    return n;
  }
  function clsx(value) {
    if (typeof value === "object") {
      return clsx$1(value);
    } else {
      return value ?? "";
    }
  }
  function set_selected(element2, selected) {
    if (selected) {
      if (!element2.hasAttribute("selected")) {
        element2.setAttribute("selected", "");
      }
    } else {
      element2.removeAttribute("selected");
    }
  }
  function set_attribute(element2, attribute, value, skip_warning) {
    var attributes = element2.__attributes ?? (element2.__attributes = {});
    if (attributes[attribute] === (attributes[attribute] = value)) return;
    if (attribute === "style" && "__styles" in element2) {
      element2.__styles = {};
    }
    if (attribute === "loading") {
      element2[LOADING_ATTR_SYMBOL] = value;
    }
    if (value == null) {
      element2.removeAttribute(attribute);
    } else if (typeof value !== "string" && get_setters(element2).includes(attribute)) {
      element2[attribute] = value;
    } else {
      element2.setAttribute(attribute, value);
    }
  }
  function set_attributes(element2, prev, next2, css_hash, preserve_attribute_case = false, is_custom_element = false, skip_warning = false) {
    var current = prev || {};
    var is_option_element = element2.tagName === "OPTION";
    for (var key in prev) {
      if (!(key in next2)) {
        next2[key] = null;
      }
    }
    if (next2.class) {
      next2.class = clsx(next2.class);
    }
    var setters = get_setters(element2);
    var attributes = (
      /** @type {Record<string, unknown>} **/
      element2.__attributes ?? (element2.__attributes = {})
    );
    for (const key2 in next2) {
      let value = next2[key2];
      if (is_option_element && key2 === "value" && value == null) {
        element2.value = element2.__value = "";
        current[key2] = value;
        continue;
      }
      var prev_value = current[key2];
      if (value === prev_value) continue;
      current[key2] = value;
      var prefix = key2[0] + key2[1];
      if (prefix === "$$") continue;
      if (prefix === "on") {
        const opts = {};
        const event_handle_key = "$$" + key2;
        let event_name = key2.slice(2);
        var delegated = is_delegated(event_name);
        if (is_capture_event(event_name)) {
          event_name = event_name.slice(0, -7);
          opts.capture = true;
        }
        if (!delegated && prev_value) {
          if (value != null) continue;
          element2.removeEventListener(event_name, current[event_handle_key], opts);
          current[event_handle_key] = null;
        }
        if (value != null) {
          if (!delegated) {
            let handle = function(evt) {
              current[key2].call(this, evt);
            };
            current[event_handle_key] = create_event(event_name, element2, handle, opts);
          } else {
            element2[`__${event_name}`] = value;
            delegate([event_name]);
          }
        } else if (delegated) {
          element2[`__${event_name}`] = void 0;
        }
      } else if (key2 === "style" && value != null) {
        element2.style.cssText = value + "";
      } else if (key2 === "autofocus") {
        autofocus(
          /** @type {HTMLElement} */
          element2,
          Boolean(value)
        );
      } else if (key2 === "__value" || key2 === "value" && value != null) {
        element2.value = element2[key2] = element2.__value = value;
      } else if (key2 === "selected" && is_option_element) {
        set_selected(
          /** @type {HTMLOptionElement} */
          element2,
          value
        );
      } else {
        var name = key2;
        if (!preserve_attribute_case) {
          name = normalize_attribute(name);
        }
        var is_default = name === "defaultValue" || name === "defaultChecked";
        if (value == null && !is_custom_element && !is_default) {
          attributes[key2] = null;
          if (name === "value" || name === "checked") {
            let input = (
              /** @type {HTMLInputElement} */
              element2
            );
            if (name === "value") {
              let prev2 = input.defaultValue;
              input.removeAttribute(name);
              input.defaultValue = prev2;
            } else {
              let prev2 = input.defaultChecked;
              input.removeAttribute(name);
              input.defaultChecked = prev2;
            }
          } else {
            element2.removeAttribute(key2);
          }
        } else if (is_default || setters.includes(name) && (is_custom_element || typeof value !== "string")) {
          element2[name] = value;
        } else if (typeof value !== "function") {
          {
            set_attribute(element2, name, value);
          }
        }
      }
      if (key2 === "style" && "__styles" in element2) {
        element2.__styles = {};
      }
    }
    return current;
  }
  var setters_cache = /* @__PURE__ */ new Map();
  function get_setters(element2) {
    var setters = setters_cache.get(element2.nodeName);
    if (setters) return setters;
    setters_cache.set(element2.nodeName, setters = []);
    var descriptors;
    var proto = element2;
    var element_proto = Element.prototype;
    while (element_proto !== proto) {
      descriptors = get_descriptors(proto);
      for (var key in descriptors) {
        if (descriptors[key].set) {
          setters.push(key);
        }
      }
      proto = get_prototype_of(proto);
    }
    return setters;
  }
  function set_class(dom, value, hash) {
    var prev_class_name = dom.__className;
    var next_class_name = to_class(value);
    if (prev_class_name !== next_class_name || hydrating) {
      if (value == null && !hash) {
        dom.removeAttribute("class");
      } else {
        dom.className = next_class_name;
      }
      dom.__className = next_class_name;
    }
  }
  function to_class(value, hash) {
    return (value == null ? "" : value) + "";
  }
  function bind_value(input, get2, set2 = get2) {
    var runes = is_runes();
    listen_to_event_and_reset_event(input, "input", (is_reset) => {
      if (input.type === "checkbox") {
        bind_invalid_checkbox_value();
      }
      var value = is_reset ? input.defaultValue : input.value;
      value = is_numberlike_input(input) ? to_number(value) : value;
      set2(value);
      if (runes && value !== (value = get2())) {
        var start = input.selectionStart;
        var end = input.selectionEnd;
        input.value = value ?? "";
        if (end !== null) {
          input.selectionStart = start;
          input.selectionEnd = Math.min(end, input.value.length);
        }
      }
    });
    if (
      // If we are hydrating and the value has since changed,
      // then use the updated value from the input instead.
      // If defaultValue is set, then value == defaultValue
      // TODO Svelte 6: remove input.value check and set to empty string?
      untrack(get2) == null && input.value
    ) {
      set2(is_numberlike_input(input) ? to_number(input.value) : input.value);
    }
    render_effect(() => {
      if (input.type === "checkbox") {
        bind_invalid_checkbox_value();
      }
      var value = get2();
      if (is_numberlike_input(input) && value === to_number(input.value)) {
        return;
      }
      if (input.type === "date" && !value && !input.value) {
        return;
      }
      if (value !== input.value) {
        input.value = value ?? "";
      }
    });
  }
  function is_numberlike_input(input) {
    var type = input.type;
    return type === "number" || type === "range";
  }
  function to_number(value) {
    return value === "" ? null : +value;
  }
  function is_bound_this(bound_value, element_or_component) {
    return bound_value === element_or_component || (bound_value == null ? void 0 : bound_value[STATE_SYMBOL]) === element_or_component;
  }
  function bind_this(element_or_component = {}, update2, get_value, get_parts) {
    effect(() => {
      var old_parts;
      var parts;
      render_effect(() => {
        old_parts = parts;
        parts = [];
        untrack(() => {
          if (element_or_component !== get_value(...parts)) {
            update2(element_or_component, ...parts);
            if (old_parts && is_bound_this(get_value(...old_parts), element_or_component)) {
              update2(null, ...old_parts);
            }
          }
        });
      });
      return () => {
        queue_micro_task(() => {
          if (parts && is_bound_this(get_value(...parts), element_or_component)) {
            update2(null, ...parts);
          }
        });
      };
    });
    return element_or_component;
  }
  function init(immutable = false) {
    const context = (
      /** @type {ComponentContextLegacy} */
      component_context
    );
    const callbacks = context.l.u;
    if (!callbacks) return;
    let props = () => deep_read_state(context.s);
    if (immutable) {
      let version = 0;
      let prev = (
        /** @type {Record<string, any>} */
        {}
      );
      const d2 = /* @__PURE__ */ derived(() => {
        let changed = false;
        const props2 = context.s;
        for (const key in props2) {
          if (props2[key] !== prev[key]) {
            prev[key] = props2[key];
            changed = true;
          }
        }
        if (changed) version++;
        return version;
      });
      props = () => get$2(d2);
    }
    if (callbacks.b.length) {
      user_pre_effect(() => {
        observe_all(context, props);
        run_all(callbacks.b);
      });
    }
    user_effect(() => {
      const fns = untrack(() => callbacks.m.map(run));
      return () => {
        for (const fn of fns) {
          if (typeof fn === "function") {
            fn();
          }
        }
      };
    });
    if (callbacks.a.length) {
      user_effect(() => {
        observe_all(context, props);
        run_all(callbacks.a);
      });
    }
  }
  function observe_all(context, props) {
    if (context.l.s) {
      for (const signal of context.l.s) get$2(signal);
    }
    props();
  }
  function onMount(fn) {
    if (component_context === null) {
      lifecycle_outside_component("onMount");
    }
    if (legacy_mode_flag && component_context.l !== null) {
      init_update_callbacks(component_context).m.push(fn);
    } else {
      user_effect(() => {
        const cleanup = untrack(fn);
        if (typeof cleanup === "function") return (
          /** @type {() => void} */
          cleanup
        );
      });
    }
  }
  function init_update_callbacks(context) {
    var l2 = (
      /** @type {ComponentContextLegacy} */
      context.l
    );
    return l2.u ?? (l2.u = { a: [], b: [], m: [] });
  }
  let is_store_binding = false;
  function capture_store_binding(fn) {
    var previous_is_store_binding = is_store_binding;
    try {
      is_store_binding = false;
      return [fn(), is_store_binding];
    } finally {
      is_store_binding = previous_is_store_binding;
    }
  }
  const rest_props_handler = {
    get(target, key) {
      if (target.exclude.includes(key)) return;
      return target.props[key];
    },
    set(target, key) {
      {
        props_rest_readonly(`${target.name}.${String(key)}`);
      }
      return false;
    },
    getOwnPropertyDescriptor(target, key) {
      if (target.exclude.includes(key)) return;
      if (key in target.props) {
        return {
          enumerable: true,
          configurable: true,
          value: target.props[key]
        };
      }
    },
    has(target, key) {
      if (target.exclude.includes(key)) return false;
      return key in target.props;
    },
    ownKeys(target) {
      return Reflect.ownKeys(target.props).filter((key) => !target.exclude.includes(key));
    }
  };
  // @__NO_SIDE_EFFECTS__
  function rest_props(props, exclude, name) {
    return new Proxy(
      { props, exclude, name, other: {}, to_proxy: [] },
      rest_props_handler
    );
  }
  const legacy_rest_props_handler = {
    get(target, key) {
      if (target.exclude.includes(key)) return;
      get$2(target.version);
      return key in target.special ? target.special[key]() : target.props[key];
    },
    set(target, key, value) {
      if (!(key in target.special)) {
        target.special[key] = prop(
          {
            get [key]() {
              return target.props[key];
            }
          },
          /** @type {string} */
          key,
          PROPS_IS_UPDATED
        );
      }
      target.special[key](value);
      update(target.version);
      return true;
    },
    getOwnPropertyDescriptor(target, key) {
      if (target.exclude.includes(key)) return;
      if (key in target.props) {
        return {
          enumerable: true,
          configurable: true,
          value: target.props[key]
        };
      }
    },
    deleteProperty(target, key) {
      if (target.exclude.includes(key)) return true;
      target.exclude.push(key);
      update(target.version);
      return true;
    },
    has(target, key) {
      if (target.exclude.includes(key)) return false;
      return key in target.props;
    },
    ownKeys(target) {
      return Reflect.ownKeys(target.props).filter((key) => !target.exclude.includes(key));
    }
  };
  function legacy_rest_props(props, exclude) {
    return new Proxy({ props, exclude, special: {}, version: source(0) }, legacy_rest_props_handler);
  }
  const spread_props_handler = {
    get(target, key) {
      let i2 = target.props.length;
      while (i2--) {
        let p2 = target.props[i2];
        if (is_function(p2)) p2 = p2();
        if (typeof p2 === "object" && p2 !== null && key in p2) return p2[key];
      }
    },
    set(target, key, value) {
      let i2 = target.props.length;
      while (i2--) {
        let p2 = target.props[i2];
        if (is_function(p2)) p2 = p2();
        const desc = get_descriptor(p2, key);
        if (desc && desc.set) {
          desc.set(value);
          return true;
        }
      }
      return false;
    },
    getOwnPropertyDescriptor(target, key) {
      let i2 = target.props.length;
      while (i2--) {
        let p2 = target.props[i2];
        if (is_function(p2)) p2 = p2();
        if (typeof p2 === "object" && p2 !== null && key in p2) {
          const descriptor = get_descriptor(p2, key);
          if (descriptor && !descriptor.configurable) {
            descriptor.configurable = true;
          }
          return descriptor;
        }
      }
    },
    has(target, key) {
      if (key === STATE_SYMBOL || key === LEGACY_PROPS) return false;
      for (let p2 of target.props) {
        if (is_function(p2)) p2 = p2();
        if (p2 != null && key in p2) return true;
      }
      return false;
    },
    ownKeys(target) {
      const keys = [];
      for (let p2 of target.props) {
        if (is_function(p2)) p2 = p2();
        for (const key in p2) {
          if (!keys.includes(key)) keys.push(key);
        }
      }
      return keys;
    }
  };
  function spread_props(...props) {
    return new Proxy({ props }, spread_props_handler);
  }
  function with_parent_branch(fn) {
    var effect2 = active_effect;
    var previous_effect = active_effect;
    while (effect2 !== null && (effect2.f & (BRANCH_EFFECT | ROOT_EFFECT)) === 0) {
      effect2 = effect2.parent;
    }
    try {
      set_active_effect(effect2);
      return fn();
    } finally {
      set_active_effect(previous_effect);
    }
  }
  function prop(props, key, flags, fallback) {
    var _a2;
    var immutable = (flags & PROPS_IS_IMMUTABLE) !== 0;
    var runes = !legacy_mode_flag || (flags & PROPS_IS_RUNES) !== 0;
    var bindable = (flags & PROPS_IS_BINDABLE) !== 0;
    var lazy = (flags & PROPS_IS_LAZY_INITIAL) !== 0;
    var is_store_sub = false;
    var prop_value;
    if (bindable) {
      [prop_value, is_store_sub] = capture_store_binding(() => (
        /** @type {V} */
        props[key]
      ));
    } else {
      prop_value = /** @type {V} */
      props[key];
    }
    var is_entry_props = STATE_SYMBOL in props || LEGACY_PROPS in props;
    var setter = ((_a2 = get_descriptor(props, key)) == null ? void 0 : _a2.set) ?? (is_entry_props && bindable && key in props ? (v2) => props[key] = v2 : void 0);
    var fallback_value = (
      /** @type {V} */
      fallback
    );
    var fallback_dirty = true;
    var fallback_used = false;
    var get_fallback = () => {
      fallback_used = true;
      if (fallback_dirty) {
        fallback_dirty = false;
        if (lazy) {
          fallback_value = untrack(
            /** @type {() => V} */
            fallback
          );
        } else {
          fallback_value = /** @type {V} */
          fallback;
        }
      }
      return fallback_value;
    };
    if (prop_value === void 0 && fallback !== void 0) {
      if (setter && runes) {
        props_invalid_value(key);
      }
      prop_value = get_fallback();
      if (setter) setter(prop_value);
    }
    var getter;
    if (runes) {
      getter = () => {
        var value = (
          /** @type {V} */
          props[key]
        );
        if (value === void 0) return get_fallback();
        fallback_dirty = true;
        fallback_used = false;
        return value;
      };
    } else {
      var derived_getter = with_parent_branch(
        () => (immutable ? derived : derived_safe_equal)(() => (
          /** @type {V} */
          props[key]
        ))
      );
      derived_getter.f |= LEGACY_DERIVED_PROP;
      getter = () => {
        var value = get$2(derived_getter);
        if (value !== void 0) fallback_value = /** @type {V} */
        void 0;
        return value === void 0 ? fallback_value : value;
      };
    }
    if ((flags & PROPS_IS_UPDATED) === 0) {
      return getter;
    }
    if (setter) {
      var legacy_parent = props.$$legacy;
      return function(value, mutation) {
        if (arguments.length > 0) {
          if (!runes || !mutation || legacy_parent || is_store_sub) {
            setter(mutation ? getter() : value);
          }
          return value;
        } else {
          return getter();
        }
      };
    }
    var from_child = false;
    var was_from_child = false;
    var inner_current_value = /* @__PURE__ */ mutable_source(prop_value);
    var current_value = with_parent_branch(
      () => /* @__PURE__ */ derived(() => {
        var parent_value = getter();
        var child_value = get$2(inner_current_value);
        if (from_child) {
          from_child = false;
          was_from_child = true;
          return child_value;
        }
        was_from_child = false;
        return inner_current_value.v = parent_value;
      })
    );
    if (!immutable) current_value.equals = safe_equals;
    return function(value, mutation) {
      if (captured_signals !== null) {
        from_child = was_from_child;
        getter();
        get$2(inner_current_value);
      }
      if (arguments.length > 0) {
        const new_value = mutation ? get$2(current_value) : runes && bindable ? proxy(value) : value;
        if (!current_value.equals(new_value)) {
          from_child = true;
          set(inner_current_value, new_value);
          if (fallback_used && fallback_value !== void 0) {
            fallback_value = new_value;
          }
          untrack(() => get$2(current_value));
        }
        return value;
      }
      return get$2(current_value);
    };
  }
  function validate_prop_bindings($$props, bindable, exports, component2) {
    var _a2;
    for (const key in $$props) {
      var setter = (_a2 = get_descriptor($$props, key)) == null ? void 0 : _a2.set;
      var name = component2.name;
      if (setter) {
        if (exports.includes(key)) {
          bind_invalid_export(component2[FILENAME], key, name);
        }
        if (!bindable.includes(key)) {
          bind_not_bindable(key, component2[FILENAME], name);
        }
      }
    }
  }
  function validate_dynamic_element_tag(tag_fn) {
    const tag = tag_fn();
    const is_string = typeof tag === "string";
    if (tag && !is_string) {
      svelte_element_invalid_this_value();
    }
  }
  function $2b4dce13dd5a17fa$export$842a2cf37af977e1(amount, numerator) {
    return amount - numerator * Math.floor(amount / numerator);
  }
  const $3b62074eb05584b2$var$EPOCH = 1721426;
  function $3b62074eb05584b2$export$f297eb839006d339(era, year, month, day) {
    year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year);
    let y1 = year - 1;
    let monthOffset = -2;
    if (month <= 2) monthOffset = 0;
    else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) monthOffset = -1;
    return $3b62074eb05584b2$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);
  }
  function $3b62074eb05584b2$export$553d7fa8e3805fc0(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
  }
  function $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year) {
    return era === "BC" ? 1 - year : year;
  }
  function $3b62074eb05584b2$export$4475b7e617eb123c(year) {
    let era = "AD";
    if (year <= 0) {
      era = "BC";
      year = 1 - year;
    }
    return [
      era,
      year
    ];
  }
  const $3b62074eb05584b2$var$daysInMonth = {
    standard: [
      31,
      28,
      31,
      30,
      31,
      30,
      31,
      31,
      30,
      31,
      30,
      31
    ],
    leapyear: [
      31,
      29,
      31,
      30,
      31,
      30,
      31,
      31,
      30,
      31,
      30,
      31
    ]
  };
  class $3b62074eb05584b2$export$80ee6245ec4f29ec {
    fromJulianDay(jd) {
      let jd0 = jd;
      let depoch = jd0 - $3b62074eb05584b2$var$EPOCH;
      let quadricent = Math.floor(depoch / 146097);
      let dqc = $2b4dce13dd5a17fa$export$842a2cf37af977e1(depoch, 146097);
      let cent = Math.floor(dqc / 36524);
      let dcent = $2b4dce13dd5a17fa$export$842a2cf37af977e1(dqc, 36524);
      let quad = Math.floor(dcent / 1461);
      let dquad = $2b4dce13dd5a17fa$export$842a2cf37af977e1(dcent, 1461);
      let yindex = Math.floor(dquad / 365);
      let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);
      let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear);
      let yearDay = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, 1, 1);
      let leapAdj = 2;
      if (jd0 < $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 1)) leapAdj = 0;
      else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) leapAdj = 1;
      let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);
      let day = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, month, 1) + 1;
      return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(era, year, month, day);
    }
    toJulianDay(date) {
      return $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, date.month, date.day);
    }
    getDaysInMonth(date) {
      return $3b62074eb05584b2$var$daysInMonth[$3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? "leapyear" : "standard"][date.month - 1];
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getMonthsInYear(date) {
      return 12;
    }
    getDaysInYear(date) {
      return $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 366 : 365;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getYearsInEra(date) {
      return 9999;
    }
    getEras() {
      return [
        "BC",
        "AD"
      ];
    }
    isInverseEra(date) {
      return date.era === "BC";
    }
    balanceDate(date) {
      if (date.year <= 0) {
        date.era = date.era === "BC" ? "AD" : "BC";
        date.year = 1 - date.year;
      }
    }
    constructor() {
      this.identifier = "gregory";
    }
  }
  const $2fe286d2fb449abb$export$7a5acbd77d414bd9 = {
    "001": 1,
    AD: 1,
    AE: 6,
    AF: 6,
    AI: 1,
    AL: 1,
    AM: 1,
    AN: 1,
    AR: 1,
    AT: 1,
    AU: 1,
    AX: 1,
    AZ: 1,
    BA: 1,
    BE: 1,
    BG: 1,
    BH: 6,
    BM: 1,
    BN: 1,
    BY: 1,
    CH: 1,
    CL: 1,
    CM: 1,
    CN: 1,
    CR: 1,
    CY: 1,
    CZ: 1,
    DE: 1,
    DJ: 6,
    DK: 1,
    DZ: 6,
    EC: 1,
    EE: 1,
    EG: 6,
    ES: 1,
    FI: 1,
    FJ: 1,
    FO: 1,
    FR: 1,
    GB: 1,
    GE: 1,
    GF: 1,
    GP: 1,
    GR: 1,
    HR: 1,
    HU: 1,
    IE: 1,
    IQ: 6,
    IR: 6,
    IS: 1,
    IT: 1,
    JO: 6,
    KG: 1,
    KW: 6,
    KZ: 1,
    LB: 1,
    LI: 1,
    LK: 1,
    LT: 1,
    LU: 1,
    LV: 1,
    LY: 6,
    MC: 1,
    MD: 1,
    ME: 1,
    MK: 1,
    MN: 1,
    MQ: 1,
    MV: 5,
    MY: 1,
    NL: 1,
    NO: 1,
    NZ: 1,
    OM: 6,
    PL: 1,
    QA: 6,
    RE: 1,
    RO: 1,
    RS: 1,
    RU: 1,
    SD: 6,
    SE: 1,
    SI: 1,
    SK: 1,
    SM: 1,
    SY: 6,
    TJ: 1,
    TM: 1,
    TR: 1,
    UA: 1,
    UY: 1,
    UZ: 1,
    VA: 1,
    VN: 1,
    XK: 1
  };
  function $14e0f24ef4ac5c92$export$ea39ec197993aef0(a2, b2) {
    b2 = $11d87f3f76e88657$export$b4a036af3fc0b032(b2, a2.calendar);
    return a2.era === b2.era && a2.year === b2.year && a2.month === b2.month && a2.day === b2.day;
  }
  function $14e0f24ef4ac5c92$export$a18c89cbd24170ff(a2, b2) {
    b2 = $11d87f3f76e88657$export$b4a036af3fc0b032(b2, a2.calendar);
    a2 = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a2);
    b2 = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b2);
    return a2.era === b2.era && a2.year === b2.year && a2.month === b2.month;
  }
  function $14e0f24ef4ac5c92$export$629b0a497aa65267(date, timeZone) {
    return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone));
  }
  function $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale) {
    let julian = date.calendar.toJulianDay(date);
    let dayOfWeek = Math.ceil(julian + 1 - $14e0f24ef4ac5c92$var$getWeekStart(locale)) % 7;
    if (dayOfWeek < 0) dayOfWeek += 7;
    return dayOfWeek;
  }
  function $14e0f24ef4ac5c92$export$461939dd4422153(timeZone) {
    return $11d87f3f76e88657$export$1b96692a1ba042ac(Date.now(), timeZone);
  }
  function $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone) {
    return $11d87f3f76e88657$export$93522d1a439f3617($14e0f24ef4ac5c92$export$461939dd4422153(timeZone));
  }
  function $14e0f24ef4ac5c92$export$68781ddf31c0090f(a2, b2) {
    return a2.calendar.toJulianDay(a2) - b2.calendar.toJulianDay(b2);
  }
  function $14e0f24ef4ac5c92$export$c19a80a9721b80f6(a2, b2) {
    return $14e0f24ef4ac5c92$var$timeToMs(a2) - $14e0f24ef4ac5c92$var$timeToMs(b2);
  }
  function $14e0f24ef4ac5c92$var$timeToMs(a2) {
    return a2.hour * 36e5 + a2.minute * 6e4 + a2.second * 1e3 + a2.millisecond;
  }
  let $14e0f24ef4ac5c92$var$localTimeZone = null;
  function $14e0f24ef4ac5c92$export$aa8b41735afcabd2() {
    if ($14e0f24ef4ac5c92$var$localTimeZone == null) $14e0f24ef4ac5c92$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;
    return $14e0f24ef4ac5c92$var$localTimeZone;
  }
  function $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date) {
    return date.subtract({
      days: date.day - 1
    });
  }
  function $14e0f24ef4ac5c92$export$a2258d9c4118825c(date) {
    return date.add({
      days: date.calendar.getDaysInMonth(date) - date.day
    });
  }
  const $14e0f24ef4ac5c92$var$cachedRegions = /* @__PURE__ */ new Map();
  function $14e0f24ef4ac5c92$var$getRegion(locale) {
    if (Intl.Locale) {
      let region = $14e0f24ef4ac5c92$var$cachedRegions.get(locale);
      if (!region) {
        region = new Intl.Locale(locale).maximize().region;
        if (region) $14e0f24ef4ac5c92$var$cachedRegions.set(locale, region);
      }
      return region;
    }
    let part = locale.split("-")[1];
    return part === "u" ? void 0 : part;
  }
  function $14e0f24ef4ac5c92$var$getWeekStart(locale) {
    let region = $14e0f24ef4ac5c92$var$getRegion(locale);
    return region ? $2fe286d2fb449abb$export$7a5acbd77d414bd9[region] || 0 : 0;
  }
  function $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) {
    date = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new $3b62074eb05584b2$export$80ee6245ec4f29ec());
    let year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(date.era, date.year);
    return $11d87f3f76e88657$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);
  }
  function $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {
    let date = /* @__PURE__ */ new Date();
    date.setUTCHours(hour, minute, second, millisecond);
    date.setUTCFullYear(year, month - 1, day);
    return date.getTime();
  }
  function $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone) {
    if (timeZone === "UTC") return 0;
    if (ms > 0 && timeZone === $14e0f24ef4ac5c92$export$aa8b41735afcabd2()) return new Date(ms).getTimezoneOffset() * -6e4;
    let { year, month, day, hour, minute, second } = $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone);
    let utc = $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, 0);
    return utc - Math.floor(ms / 1e3) * 1e3;
  }
  const $11d87f3f76e88657$var$formattersByTimeZone = /* @__PURE__ */ new Map();
  function $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone) {
    let formatter = $11d87f3f76e88657$var$formattersByTimeZone.get(timeZone);
    if (!formatter) {
      formatter = new Intl.DateTimeFormat("en-US", {
        timeZone,
        hour12: false,
        era: "short",
        year: "numeric",
        month: "numeric",
        day: "numeric",
        hour: "numeric",
        minute: "numeric",
        second: "numeric"
      });
      $11d87f3f76e88657$var$formattersByTimeZone.set(timeZone, formatter);
    }
    let parts = formatter.formatToParts(new Date(ms));
    let namedParts = {};
    for (let part of parts) if (part.type !== "literal") namedParts[part.type] = part.value;
    return {
      // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253
      year: namedParts.era === "BC" || namedParts.era === "B" ? -namedParts.year + 1 : +namedParts.year,
      month: +namedParts.month,
      day: +namedParts.day,
      hour: namedParts.hour === "24" ? 0 : +namedParts.hour,
      minute: +namedParts.minute,
      second: +namedParts.second
    };
  }
  const $11d87f3f76e88657$var$DAYMILLIS = 864e5;
  function $11d87f3f76e88657$export$136f38efe7caf549(date, timeZone) {
    let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date);
    let earlier = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);
    let later = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);
    return $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later);
  }
  function $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later) {
    let found = earlier === later ? [
      earlier
    ] : [
      earlier,
      later
    ];
    return found.filter((absolute) => $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute));
  }
  function $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute) {
    let parts = $11d87f3f76e88657$var$getTimeZoneParts(absolute, timeZone);
    return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;
  }
  function $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation = "compatible") {
    let dateTime = $11d87f3f76e88657$export$b21e0b124e224484(date);
    if (timeZone === "UTC") return $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);
    if (timeZone === $14e0f24ef4ac5c92$export$aa8b41735afcabd2() && disambiguation === "compatible") {
      dateTime = $11d87f3f76e88657$export$b4a036af3fc0b032(dateTime, new $3b62074eb05584b2$export$80ee6245ec4f29ec());
      let date2 = /* @__PURE__ */ new Date();
      let year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(dateTime.era, dateTime.year);
      date2.setFullYear(year, dateTime.month - 1, dateTime.day);
      date2.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);
      return date2.getTime();
    }
    let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);
    let offsetBefore = $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);
    let offsetAfter = $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);
    let valid = $11d87f3f76e88657$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);
    if (valid.length === 1) return valid[0];
    if (valid.length > 1) switch (disambiguation) {
      // 'compatible' means 'earlier' for "fall back" transitions
      case "compatible":
      case "earlier":
        return valid[0];
      case "later":
        return valid[valid.length - 1];
      case "reject":
        throw new RangeError("Multiple possible absolute times found");
    }
    switch (disambiguation) {
      case "earlier":
        return Math.min(ms - offsetBefore, ms - offsetAfter);
      // 'compatible' means 'later' for "spring forward" transitions
      case "compatible":
      case "later":
        return Math.max(ms - offsetBefore, ms - offsetAfter);
      case "reject":
        throw new RangeError("No such absolute time found");
    }
  }
  function $11d87f3f76e88657$export$e67a095c620b86fe(dateTime, timeZone, disambiguation = "compatible") {
    return new Date($11d87f3f76e88657$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));
  }
  function $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone) {
    let offset2 = $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone);
    let date = new Date(ms + offset2);
    let year = date.getUTCFullYear();
    let month = date.getUTCMonth() + 1;
    let day = date.getUTCDate();
    let hour = date.getUTCHours();
    let minute = date.getUTCMinutes();
    let second = date.getUTCSeconds();
    let millisecond = date.getUTCMilliseconds();
    return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(year < 1 ? "BC" : "AD", year < 1 ? -year + 1 : year, month, day, timeZone, offset2, hour, minute, second, millisecond);
  }
  function $11d87f3f76e88657$export$93522d1a439f3617(dateTime) {
    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);
  }
  function $11d87f3f76e88657$export$b21e0b124e224484(date, time) {
    let hour = 0, minute = 0, second = 0, millisecond = 0;
    if ("timeZone" in date) ({ hour, minute, second, millisecond } = date);
    else if ("hour" in date && !time) return date;
    if (time) ({ hour, minute, second, millisecond } = time);
    return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);
  }
  function $11d87f3f76e88657$export$b4a036af3fc0b032(date, calendar) {
    if (date.calendar.identifier === calendar.identifier) return date;
    let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));
    let copy = date.copy();
    copy.calendar = calendar;
    copy.era = calendarDate.era;
    copy.year = calendarDate.year;
    copy.month = calendarDate.month;
    copy.day = calendarDate.day;
    $735220c2d4774dd3$export$c4e2ecac49351ef2(copy);
    return copy;
  }
  function $11d87f3f76e88657$export$84c95a83c799e074(date, timeZone, disambiguation) {
    if (date instanceof $35ea8db9cb2ccb90$export$d3b7288e7994edea) {
      if (date.timeZone === timeZone) return date;
      return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);
    }
    let ms = $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation);
    return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone);
  }
  function $11d87f3f76e88657$export$83aac07b4c37b25(date) {
    let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;
    return new Date(ms);
  }
  function $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone) {
    let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;
    return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone), date.calendar);
  }
  const $735220c2d4774dd3$var$ONE_HOUR = 36e5;
  function $735220c2d4774dd3$export$e16d8520af44a096(date, duration) {
    let mutableDate = date.copy();
    let days = "hour" in mutableDate ? $735220c2d4774dd3$var$addTimeFields(mutableDate, duration) : 0;
    $735220c2d4774dd3$var$addYears(mutableDate, duration.years || 0);
    if (mutableDate.calendar.balanceYearMonth) mutableDate.calendar.balanceYearMonth(mutableDate, date);
    mutableDate.month += duration.months || 0;
    $735220c2d4774dd3$var$balanceYearMonth(mutableDate);
    $735220c2d4774dd3$var$constrainMonthDay(mutableDate);
    mutableDate.day += (duration.weeks || 0) * 7;
    mutableDate.day += duration.days || 0;
    mutableDate.day += days;
    $735220c2d4774dd3$var$balanceDay(mutableDate);
    if (mutableDate.calendar.balanceDate) mutableDate.calendar.balanceDate(mutableDate);
    if (mutableDate.year < 1) {
      mutableDate.year = 1;
      mutableDate.month = 1;
      mutableDate.day = 1;
    }
    let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);
    if (mutableDate.year > maxYear) {
      var _mutableDate_calendar_isInverseEra, _mutableDate_calendar;
      let isInverseEra = (_mutableDate_calendar_isInverseEra = (_mutableDate_calendar = mutableDate.calendar).isInverseEra) === null || _mutableDate_calendar_isInverseEra === void 0 ? void 0 : _mutableDate_calendar_isInverseEra.call(_mutableDate_calendar, mutableDate);
      mutableDate.year = maxYear;
      mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);
      mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);
    }
    if (mutableDate.month < 1) {
      mutableDate.month = 1;
      mutableDate.day = 1;
    }
    let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);
    if (mutableDate.month > maxMonth) {
      mutableDate.month = maxMonth;
      mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);
    }
    mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));
    return mutableDate;
  }
  function $735220c2d4774dd3$var$addYears(date, years) {
    var _date_calendar_isInverseEra, _date_calendar;
    if ((_date_calendar_isInverseEra = (_date_calendar = date.calendar).isInverseEra) === null || _date_calendar_isInverseEra === void 0 ? void 0 : _date_calendar_isInverseEra.call(_date_calendar, date)) years = -years;
    date.year += years;
  }
  function $735220c2d4774dd3$var$balanceYearMonth(date) {
    while (date.month < 1) {
      $735220c2d4774dd3$var$addYears(date, -1);
      date.month += date.calendar.getMonthsInYear(date);
    }
    let monthsInYear = 0;
    while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {
      date.month -= monthsInYear;
      $735220c2d4774dd3$var$addYears(date, 1);
    }
  }
  function $735220c2d4774dd3$var$balanceDay(date) {
    while (date.day < 1) {
      date.month--;
      $735220c2d4774dd3$var$balanceYearMonth(date);
      date.day += date.calendar.getDaysInMonth(date);
    }
    while (date.day > date.calendar.getDaysInMonth(date)) {
      date.day -= date.calendar.getDaysInMonth(date);
      date.month++;
      $735220c2d4774dd3$var$balanceYearMonth(date);
    }
  }
  function $735220c2d4774dd3$var$constrainMonthDay(date) {
    date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));
    date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));
  }
  function $735220c2d4774dd3$export$c4e2ecac49351ef2(date) {
    if (date.calendar.constrainDate) date.calendar.constrainDate(date);
    date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));
    $735220c2d4774dd3$var$constrainMonthDay(date);
  }
  function $735220c2d4774dd3$export$3e2544e88a25bff8(duration) {
    let inverseDuration = {};
    for (let key in duration) if (typeof duration[key] === "number") inverseDuration[key] = -duration[key];
    return inverseDuration;
  }
  function $735220c2d4774dd3$export$4e2d2ead65e5f7e3(date, duration) {
    return $735220c2d4774dd3$export$e16d8520af44a096(date, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
  }
  function $735220c2d4774dd3$export$adaa4cf7ef1b65be(date, fields) {
    let mutableDate = date.copy();
    if (fields.era != null) mutableDate.era = fields.era;
    if (fields.year != null) mutableDate.year = fields.year;
    if (fields.month != null) mutableDate.month = fields.month;
    if (fields.day != null) mutableDate.day = fields.day;
    $735220c2d4774dd3$export$c4e2ecac49351ef2(mutableDate);
    return mutableDate;
  }
  function $735220c2d4774dd3$export$e5d5e1c1822b6e56(value, fields) {
    let mutableValue = value.copy();
    if (fields.hour != null) mutableValue.hour = fields.hour;
    if (fields.minute != null) mutableValue.minute = fields.minute;
    if (fields.second != null) mutableValue.second = fields.second;
    if (fields.millisecond != null) mutableValue.millisecond = fields.millisecond;
    $735220c2d4774dd3$export$7555de1e070510cb(mutableValue);
    return mutableValue;
  }
  function $735220c2d4774dd3$var$balanceTime(time) {
    time.second += Math.floor(time.millisecond / 1e3);
    time.millisecond = $735220c2d4774dd3$var$nonNegativeMod(time.millisecond, 1e3);
    time.minute += Math.floor(time.second / 60);
    time.second = $735220c2d4774dd3$var$nonNegativeMod(time.second, 60);
    time.hour += Math.floor(time.minute / 60);
    time.minute = $735220c2d4774dd3$var$nonNegativeMod(time.minute, 60);
    let days = Math.floor(time.hour / 24);
    time.hour = $735220c2d4774dd3$var$nonNegativeMod(time.hour, 24);
    return days;
  }
  function $735220c2d4774dd3$export$7555de1e070510cb(time) {
    time.millisecond = Math.max(0, Math.min(time.millisecond, 1e3));
    time.second = Math.max(0, Math.min(time.second, 59));
    time.minute = Math.max(0, Math.min(time.minute, 59));
    time.hour = Math.max(0, Math.min(time.hour, 23));
  }
  function $735220c2d4774dd3$var$nonNegativeMod(a2, b2) {
    let result2 = a2 % b2;
    if (result2 < 0) result2 += b2;
    return result2;
  }
  function $735220c2d4774dd3$var$addTimeFields(time, duration) {
    time.hour += duration.hours || 0;
    time.minute += duration.minutes || 0;
    time.second += duration.seconds || 0;
    time.millisecond += duration.milliseconds || 0;
    return $735220c2d4774dd3$var$balanceTime(time);
  }
  function $735220c2d4774dd3$export$7ed87b6bc2506470(time, duration) {
    let res = time.copy();
    $735220c2d4774dd3$var$addTimeFields(res, duration);
    return res;
  }
  function $735220c2d4774dd3$export$fe34d3a381cd7501(time, duration) {
    return $735220c2d4774dd3$export$7ed87b6bc2506470(time, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
  }
  function $735220c2d4774dd3$export$d52ced6badfb9a4c(value, field, amount, options) {
    let mutable = value.copy();
    switch (field) {
      case "era": {
        let eras = value.calendar.getEras();
        let eraIndex = eras.indexOf(value.era);
        if (eraIndex < 0) throw new Error("Invalid era: " + value.era);
        eraIndex = $735220c2d4774dd3$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);
        mutable.era = eras[eraIndex];
        $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);
        break;
      }
      case "year":
        var _mutable_calendar_isInverseEra, _mutable_calendar;
        if ((_mutable_calendar_isInverseEra = (_mutable_calendar = mutable.calendar).isInverseEra) === null || _mutable_calendar_isInverseEra === void 0 ? void 0 : _mutable_calendar_isInverseEra.call(_mutable_calendar, mutable)) amount = -amount;
        mutable.year = $735220c2d4774dd3$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);
        if (mutable.year === -Infinity) mutable.year = 1;
        if (mutable.calendar.balanceYearMonth) mutable.calendar.balanceYearMonth(mutable, value);
        break;
      case "month":
        mutable.month = $735220c2d4774dd3$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);
        break;
      case "day":
        mutable.day = $735220c2d4774dd3$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);
        break;
      default:
        throw new Error("Unsupported field " + field);
    }
    if (value.calendar.balanceDate) value.calendar.balanceDate(mutable);
    $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);
    return mutable;
  }
  function $735220c2d4774dd3$export$dd02b3e0007dfe28(value, field, amount, options) {
    let mutable = value.copy();
    switch (field) {
      case "hour": {
        let hours = value.hour;
        let min2 = 0;
        let max2 = 23;
        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {
          let isPM = hours >= 12;
          min2 = isPM ? 12 : 0;
          max2 = isPM ? 23 : 11;
        }
        mutable.hour = $735220c2d4774dd3$var$cycleValue(hours, amount, min2, max2, options === null || options === void 0 ? void 0 : options.round);
        break;
      }
      case "minute":
        mutable.minute = $735220c2d4774dd3$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);
        break;
      case "second":
        mutable.second = $735220c2d4774dd3$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);
        break;
      case "millisecond":
        mutable.millisecond = $735220c2d4774dd3$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);
        break;
      default:
        throw new Error("Unsupported field " + field);
    }
    return mutable;
  }
  function $735220c2d4774dd3$var$cycleValue(value, amount, min2, max2, round2 = false) {
    if (round2) {
      value += Math.sign(amount);
      if (value < min2) value = max2;
      let div = Math.abs(amount);
      if (amount > 0) value = Math.ceil(value / div) * div;
      else value = Math.floor(value / div) * div;
      if (value > max2) value = min2;
    } else {
      value += amount;
      if (value < min2) value = max2 - (min2 - value - 1);
      else if (value > max2) value = min2 + (value - max2 - 1);
    }
    return value;
  }
  function $735220c2d4774dd3$export$96b1d28349274637(dateTime, duration) {
    let ms;
    if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.weeks != null && duration.weeks !== 0 || duration.days != null && duration.days !== 0) {
      let res2 = $735220c2d4774dd3$export$e16d8520af44a096($11d87f3f76e88657$export$b21e0b124e224484(dateTime), {
        years: duration.years,
        months: duration.months,
        weeks: duration.weeks,
        days: duration.days
      });
      ms = $11d87f3f76e88657$export$5107c82f94518f5c(res2, dateTime.timeZone);
    } else
      ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime) - dateTime.offset;
    ms += duration.milliseconds || 0;
    ms += (duration.seconds || 0) * 1e3;
    ms += (duration.minutes || 0) * 6e4;
    ms += (duration.hours || 0) * 36e5;
    let res = $11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone);
    return $11d87f3f76e88657$export$b4a036af3fc0b032(res, dateTime.calendar);
  }
  function $735220c2d4774dd3$export$6814caac34ca03c7(dateTime, duration) {
    return $735220c2d4774dd3$export$96b1d28349274637(dateTime, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
  }
  function $735220c2d4774dd3$export$9a297d111fc86b79(dateTime, field, amount, options) {
    switch (field) {
      case "hour": {
        let min2 = 0;
        let max2 = 23;
        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {
          let isPM = dateTime.hour >= 12;
          min2 = isPM ? 12 : 0;
          max2 = isPM ? 23 : 11;
        }
        let plainDateTime = $11d87f3f76e88657$export$b21e0b124e224484(dateTime);
        let minDate = $11d87f3f76e88657$export$b4a036af3fc0b032($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {
          hour: min2
        }), new $3b62074eb05584b2$export$80ee6245ec4f29ec());
        let minAbsolute = [
          $11d87f3f76e88657$export$5107c82f94518f5c(minDate, dateTime.timeZone, "earlier"),
          $11d87f3f76e88657$export$5107c82f94518f5c(minDate, dateTime.timeZone, "later")
        ].filter((ms2) => $11d87f3f76e88657$export$1b96692a1ba042ac(ms2, dateTime.timeZone).day === minDate.day)[0];
        let maxDate = $11d87f3f76e88657$export$b4a036af3fc0b032($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {
          hour: max2
        }), new $3b62074eb05584b2$export$80ee6245ec4f29ec());
        let maxAbsolute = [
          $11d87f3f76e88657$export$5107c82f94518f5c(maxDate, dateTime.timeZone, "earlier"),
          $11d87f3f76e88657$export$5107c82f94518f5c(maxDate, dateTime.timeZone, "later")
        ].filter((ms2) => $11d87f3f76e88657$export$1b96692a1ba042ac(ms2, dateTime.timeZone).day === maxDate.day).pop();
        let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime) - dateTime.offset;
        let hours = Math.floor(ms / $735220c2d4774dd3$var$ONE_HOUR);
        let remainder = ms % $735220c2d4774dd3$var$ONE_HOUR;
        ms = $735220c2d4774dd3$var$cycleValue(hours, amount, Math.floor(minAbsolute / $735220c2d4774dd3$var$ONE_HOUR), Math.floor(maxAbsolute / $735220c2d4774dd3$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $735220c2d4774dd3$var$ONE_HOUR + remainder;
        return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);
      }
      case "minute":
      case "second":
      case "millisecond":
        return $735220c2d4774dd3$export$dd02b3e0007dfe28(dateTime, field, amount, options);
      case "era":
      case "year":
      case "month":
      case "day": {
        let res = $735220c2d4774dd3$export$d52ced6badfb9a4c($11d87f3f76e88657$export$b21e0b124e224484(dateTime), field, amount, options);
        let ms = $11d87f3f76e88657$export$5107c82f94518f5c(res, dateTime.timeZone);
        return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);
      }
      default:
        throw new Error("Unsupported field " + field);
    }
  }
  function $735220c2d4774dd3$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {
    let plainDateTime = $11d87f3f76e88657$export$b21e0b124e224484(dateTime);
    let res = $735220c2d4774dd3$export$e5d5e1c1822b6e56($735220c2d4774dd3$export$adaa4cf7ef1b65be(plainDateTime, fields), fields);
    if (res.compare(plainDateTime) === 0) return dateTime;
    let ms = $11d87f3f76e88657$export$5107c82f94518f5c(res, dateTime.timeZone, disambiguation);
    return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);
  }
  const $fae977aafc393c5c$var$DATE_RE = /^([+-]\d{6}|\d{4})-(\d{2})-(\d{2})$/;
  const $fae977aafc393c5c$var$DATE_TIME_RE = /^([+-]\d{6}|\d{4})-(\d{2})-(\d{2})(?:T(\d{2}))?(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?$/;
  const $fae977aafc393c5c$var$ZONED_DATE_TIME_RE = /^([+-]\d{6}|\d{4})-(\d{2})-(\d{2})(?:T(\d{2}))?(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?(?:([+-]\d{2})(?::?(\d{2}))?)?\[(.*?)\]$/;
  function $fae977aafc393c5c$export$6b862160d295c8e(value) {
    let m = value.match($fae977aafc393c5c$var$DATE_RE);
    if (!m) throw new Error("Invalid ISO 8601 date string: " + value);
    let date = new $35ea8db9cb2ccb90$export$99faa760c7908e4f($fae977aafc393c5c$var$parseNumber(m[1], 0, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1);
    date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
    return date;
  }
  function $fae977aafc393c5c$export$588937bcd60ade55(value) {
    let m = value.match($fae977aafc393c5c$var$DATE_TIME_RE);
    if (!m) throw new Error("Invalid ISO 8601 date time string: " + value);
    let year = $fae977aafc393c5c$var$parseNumber(m[1], -9999, 9999);
    let era = year < 1 ? "BC" : "AD";
    let date = new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(era, year < 1 ? -year + 1 : year, $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1e3 : 0);
    date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
    return date;
  }
  function $fae977aafc393c5c$export$fd7893f06e92a6a4(value, disambiguation) {
    let m = value.match($fae977aafc393c5c$var$ZONED_DATE_TIME_RE);
    if (!m) throw new Error("Invalid ISO 8601 date time string: " + value);
    let year = $fae977aafc393c5c$var$parseNumber(m[1], -9999, 9999);
    let era = year < 1 ? "BC" : "AD";
    let date = new $35ea8db9cb2ccb90$export$d3b7288e7994edea(era, year < 1 ? -year + 1 : year, $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[10], 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1e3 : 0);
    date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
    let plainDateTime = $11d87f3f76e88657$export$b21e0b124e224484(date);
    let ms;
    if (m[8]) {
      var _m_;
      date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 36e5 + $fae977aafc393c5c$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : "0", 0, 59) * 6e4;
      ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;
      let absolutes = $11d87f3f76e88657$export$136f38efe7caf549(plainDateTime, date.timeZone);
      if (!absolutes.includes(ms)) throw new Error(`Offset ${$fae977aafc393c5c$var$offsetToString(date.offset)} is invalid for ${$fae977aafc393c5c$export$4223de14708adc63(date)} in ${date.timeZone}`);
    } else
      ms = $11d87f3f76e88657$export$5107c82f94518f5c($11d87f3f76e88657$export$b21e0b124e224484(plainDateTime), date.timeZone, disambiguation);
    return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, date.timeZone);
  }
  function $fae977aafc393c5c$var$parseNumber(value, min2, max2) {
    let val = Number(value);
    if (val < min2 || val > max2) throw new RangeError(`Value out of range: ${min2} <= ${val} <= ${max2}`);
    return val;
  }
  function $fae977aafc393c5c$export$f59dee82248f5ad4(time) {
    return `${String(time.hour).padStart(2, "0")}:${String(time.minute).padStart(2, "0")}:${String(time.second).padStart(2, "0")}${time.millisecond ? String(time.millisecond / 1e3).slice(1) : ""}`;
  }
  function $fae977aafc393c5c$export$60dfd74aa96791bd(date) {
    let gregorianDate = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new $3b62074eb05584b2$export$80ee6245ec4f29ec());
    let year;
    if (gregorianDate.era === "BC") year = gregorianDate.year === 1 ? "0000" : "-" + String(Math.abs(1 - gregorianDate.year)).padStart(6, "00");
    else year = String(gregorianDate.year).padStart(4, "0");
    return `${year}-${String(gregorianDate.month).padStart(2, "0")}-${String(gregorianDate.day).padStart(2, "0")}`;
  }
  function $fae977aafc393c5c$export$4223de14708adc63(date) {
    return `${$fae977aafc393c5c$export$60dfd74aa96791bd(date)}T${$fae977aafc393c5c$export$f59dee82248f5ad4(date)}`;
  }
  function $fae977aafc393c5c$var$offsetToString(offset2) {
    let sign = Math.sign(offset2) < 0 ? "-" : "+";
    offset2 = Math.abs(offset2);
    let offsetHours = Math.floor(offset2 / 36e5);
    let offsetMinutes = offset2 % 36e5 / 6e4;
    return `${sign}${String(offsetHours).padStart(2, "0")}:${String(offsetMinutes).padStart(2, "0")}`;
  }
  function $fae977aafc393c5c$export$bf79f1ebf4b18792(date) {
    return `${$fae977aafc393c5c$export$4223de14708adc63(date)}${$fae977aafc393c5c$var$offsetToString(date.offset)}[${date.timeZone}]`;
  }
  function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
      throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
  }
  function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
  }
  function $35ea8db9cb2ccb90$var$shiftArgs(args) {
    let calendar = typeof args[0] === "object" ? args.shift() : new $3b62074eb05584b2$export$80ee6245ec4f29ec();
    let era;
    if (typeof args[0] === "string") era = args.shift();
    else {
      let eras = calendar.getEras();
      era = eras[eras.length - 1];
    }
    let year = args.shift();
    let month = args.shift();
    let day = args.shift();
    return [
      calendar,
      era,
      year,
      month,
      day
    ];
  }
  var $35ea8db9cb2ccb90$var$_type = /* @__PURE__ */ new WeakMap();
  class $35ea8db9cb2ccb90$export$99faa760c7908e4f {
    /** Returns a copy of this date. */
    copy() {
      if (this.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);
      else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);
    }
    /** Returns a new `CalendarDate` with the given duration added to it. */
    add(duration) {
      return $735220c2d4774dd3$export$e16d8520af44a096(this, duration);
    }
    /** Returns a new `CalendarDate` with the given duration subtracted from it. */
    subtract(duration) {
      return $735220c2d4774dd3$export$4e2d2ead65e5f7e3(this, duration);
    }
    /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */
    set(fields) {
      return $735220c2d4774dd3$export$adaa4cf7ef1b65be(this, fields);
    }
    /**
    * Returns a new `CalendarDate` with the given field adjusted by a specified amount.
    * When the resulting value reaches the limits of the field, it wraps around.
    */
    cycle(field, amount, options) {
      return $735220c2d4774dd3$export$d52ced6badfb9a4c(this, field, amount, options);
    }
    /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */
    toDate(timeZone) {
      return $11d87f3f76e88657$export$e67a095c620b86fe(this, timeZone);
    }
    /** Converts the date to an ISO 8601 formatted string. */
    toString() {
      return $fae977aafc393c5c$export$60dfd74aa96791bd(this);
    }
    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
    compare(b2) {
      return $14e0f24ef4ac5c92$export$68781ddf31c0090f(this, b2);
    }
    constructor(...args) {
      _class_private_field_init(this, $35ea8db9cb2ccb90$var$_type, {
        writable: true,
        value: void 0
      });
      let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
      this.calendar = calendar;
      this.era = era;
      this.year = year;
      this.month = month;
      this.day = day;
      $735220c2d4774dd3$export$c4e2ecac49351ef2(this);
    }
  }
  var $35ea8db9cb2ccb90$var$_type1 = /* @__PURE__ */ new WeakMap();
  class $35ea8db9cb2ccb90$export$680ea196effce5f {
    /** Returns a copy of this time. */
    copy() {
      return new $35ea8db9cb2ccb90$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);
    }
    /** Returns a new `Time` with the given duration added to it. */
    add(duration) {
      return $735220c2d4774dd3$export$7ed87b6bc2506470(this, duration);
    }
    /** Returns a new `Time` with the given duration subtracted from it. */
    subtract(duration) {
      return $735220c2d4774dd3$export$fe34d3a381cd7501(this, duration);
    }
    /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */
    set(fields) {
      return $735220c2d4774dd3$export$e5d5e1c1822b6e56(this, fields);
    }
    /**
    * Returns a new `Time` with the given field adjusted by a specified amount.
    * When the resulting value reaches the limits of the field, it wraps around.
    */
    cycle(field, amount, options) {
      return $735220c2d4774dd3$export$dd02b3e0007dfe28(this, field, amount, options);
    }
    /** Converts the time to an ISO 8601 formatted string. */
    toString() {
      return $fae977aafc393c5c$export$f59dee82248f5ad4(this);
    }
    /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */
    compare(b2) {
      return $14e0f24ef4ac5c92$export$c19a80a9721b80f6(this, b2);
    }
    constructor(hour = 0, minute = 0, second = 0, millisecond = 0) {
      _class_private_field_init(this, $35ea8db9cb2ccb90$var$_type1, {
        writable: true,
        value: void 0
      });
      this.hour = hour;
      this.minute = minute;
      this.second = second;
      this.millisecond = millisecond;
      $735220c2d4774dd3$export$7555de1e070510cb(this);
    }
  }
  var $35ea8db9cb2ccb90$var$_type2 = /* @__PURE__ */ new WeakMap();
  class $35ea8db9cb2ccb90$export$ca871e8dbb80966f {
    /** Returns a copy of this date. */
    copy() {
      if (this.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
      else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
    }
    /** Returns a new `CalendarDateTime` with the given duration added to it. */
    add(duration) {
      return $735220c2d4774dd3$export$e16d8520af44a096(this, duration);
    }
    /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */
    subtract(duration) {
      return $735220c2d4774dd3$export$4e2d2ead65e5f7e3(this, duration);
    }
    /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
    set(fields) {
      return $735220c2d4774dd3$export$adaa4cf7ef1b65be($735220c2d4774dd3$export$e5d5e1c1822b6e56(this, fields), fields);
    }
    /**
    * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.
    * When the resulting value reaches the limits of the field, it wraps around.
    */
    cycle(field, amount, options) {
      switch (field) {
        case "era":
        case "year":
        case "month":
        case "day":
          return $735220c2d4774dd3$export$d52ced6badfb9a4c(this, field, amount, options);
        default:
          return $735220c2d4774dd3$export$dd02b3e0007dfe28(this, field, amount, options);
      }
    }
    /** Converts the date to a native JavaScript Date object in the given time zone. */
    toDate(timeZone, disambiguation) {
      return $11d87f3f76e88657$export$e67a095c620b86fe(this, timeZone, disambiguation);
    }
    /** Converts the date to an ISO 8601 formatted string. */
    toString() {
      return $fae977aafc393c5c$export$4223de14708adc63(this);
    }
    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
    compare(b2) {
      let res = $14e0f24ef4ac5c92$export$68781ddf31c0090f(this, b2);
      if (res === 0) return $14e0f24ef4ac5c92$export$c19a80a9721b80f6(this, $11d87f3f76e88657$export$b21e0b124e224484(b2));
      return res;
    }
    constructor(...args) {
      _class_private_field_init(this, $35ea8db9cb2ccb90$var$_type2, {
        writable: true,
        value: void 0
      });
      let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
      this.calendar = calendar;
      this.era = era;
      this.year = year;
      this.month = month;
      this.day = day;
      this.hour = args.shift() || 0;
      this.minute = args.shift() || 0;
      this.second = args.shift() || 0;
      this.millisecond = args.shift() || 0;
      $735220c2d4774dd3$export$c4e2ecac49351ef2(this);
    }
  }
  var $35ea8db9cb2ccb90$var$_type3 = /* @__PURE__ */ new WeakMap();
  class $35ea8db9cb2ccb90$export$d3b7288e7994edea {
    /** Returns a copy of this date. */
    copy() {
      if (this.era) return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
      else return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
    }
    /** Returns a new `ZonedDateTime` with the given duration added to it. */
    add(duration) {
      return $735220c2d4774dd3$export$96b1d28349274637(this, duration);
    }
    /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */
    subtract(duration) {
      return $735220c2d4774dd3$export$6814caac34ca03c7(this, duration);
    }
    /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
    set(fields, disambiguation) {
      return $735220c2d4774dd3$export$31b5430eb18be4f8(this, fields, disambiguation);
    }
    /**
    * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.
    * When the resulting value reaches the limits of the field, it wraps around.
    */
    cycle(field, amount, options) {
      return $735220c2d4774dd3$export$9a297d111fc86b79(this, field, amount, options);
    }
    /** Converts the date to a native JavaScript Date object. */
    toDate() {
      return $11d87f3f76e88657$export$83aac07b4c37b25(this);
    }
    /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */
    toString() {
      return $fae977aafc393c5c$export$bf79f1ebf4b18792(this);
    }
    /** Converts the date to an ISO 8601 formatted string in UTC. */
    toAbsoluteString() {
      return this.toDate().toISOString();
    }
    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
    compare(b2) {
      return this.toDate().getTime() - $11d87f3f76e88657$export$84c95a83c799e074(b2, this.timeZone).toDate().getTime();
    }
    constructor(...args) {
      _class_private_field_init(this, $35ea8db9cb2ccb90$var$_type3, {
        writable: true,
        value: void 0
      });
      let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
      let timeZone = args.shift();
      let offset2 = args.shift();
      this.calendar = calendar;
      this.era = era;
      this.year = year;
      this.month = month;
      this.day = day;
      this.timeZone = timeZone;
      this.offset = offset2;
      this.hour = args.shift() || 0;
      this.minute = args.shift() || 0;
      this.second = args.shift() || 0;
      this.millisecond = args.shift() || 0;
      $735220c2d4774dd3$export$c4e2ecac49351ef2(this);
    }
  }
  let $fb18d541ea1ad717$var$formatterCache = /* @__PURE__ */ new Map();
  class $fb18d541ea1ad717$export$ad991b66133851cf {
    /** Formats a date as a string according to the locale and format options passed to the constructor. */
    format(value) {
      return this.formatter.format(value);
    }
    /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */
    formatToParts(value) {
      return this.formatter.formatToParts(value);
    }
    /** Formats a date range as a string. */
    formatRange(start, end) {
      if (typeof this.formatter.formatRange === "function")
        return this.formatter.formatRange(start, end);
      if (end < start) throw new RangeError("End date must be >= start date");
      return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;
    }
    /** Formats a date range as an array of parts. */
    formatRangeToParts(start, end) {
      if (typeof this.formatter.formatRangeToParts === "function")
        return this.formatter.formatRangeToParts(start, end);
      if (end < start) throw new RangeError("End date must be >= start date");
      let startParts = this.formatter.formatToParts(start);
      let endParts = this.formatter.formatToParts(end);
      return [
        ...startParts.map((p2) => ({
          ...p2,
          source: "startRange"
        })),
        {
          type: "literal",
          value: " – ",
          source: "shared"
        },
        ...endParts.map((p2) => ({
          ...p2,
          source: "endRange"
        }))
      ];
    }
    /** Returns the resolved formatting options based on the values passed to the constructor. */
    resolvedOptions() {
      let resolvedOptions = this.formatter.resolvedOptions();
      if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {
        if (!this.resolvedHourCycle) this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);
        resolvedOptions.hourCycle = this.resolvedHourCycle;
        resolvedOptions.hour12 = this.resolvedHourCycle === "h11" || this.resolvedHourCycle === "h12";
      }
      if (resolvedOptions.calendar === "ethiopic-amete-alem") resolvedOptions.calendar = "ethioaa";
      return resolvedOptions;
    }
    constructor(locale, options = {}) {
      this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options);
      this.options = options;
    }
  }
  const $fb18d541ea1ad717$var$hour12Preferences = {
    true: {
      // Only Japanese uses the h11 style for 12 hour time. All others use h12.
      ja: "h11"
    },
    false: {}
  };
  function $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options = {}) {
    if (typeof options.hour12 === "boolean" && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {
      options = {
        ...options
      };
      let pref = $fb18d541ea1ad717$var$hour12Preferences[String(options.hour12)][locale.split("-")[0]];
      let defaultHourCycle = options.hour12 ? "h12" : "h23";
      options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;
      delete options.hour12;
    }
    let cacheKey = locale + (options ? Object.entries(options).sort((a2, b2) => a2[0] < b2[0] ? -1 : 1).join() : "");
    if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey)) return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);
    let numberFormatter = new Intl.DateTimeFormat(locale, options);
    $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);
    return numberFormatter;
  }
  let $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;
  function $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {
    if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null) $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat("en-US", {
      hour: "numeric",
      hour12: false
    }).format(new Date(2020, 2, 3, 0)) === "24";
    return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;
  }
  let $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;
  function $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {
    if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null) $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat("fr", {
      hour: "numeric",
      hour12: false
    }).resolvedOptions().hourCycle === "h12";
    return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;
  }
  function $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options) {
    if (!options.timeStyle && !options.hour) return void 0;
    locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, "");
    locale += (locale.includes("-u-") ? "" : "-u") + "-nu-latn";
    let formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, {
      ...options,
      timeZone: void 0
      // use local timezone
    });
    let min2 = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find((p2) => p2.type === "hour").value, 10);
    let max2 = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find((p2) => p2.type === "hour").value, 10);
    if (min2 === 0 && max2 === 23) return "h23";
    if (min2 === 24 && max2 === 23) return "h24";
    if (min2 === 0 && max2 === 11) return "h11";
    if (min2 === 12 && max2 === 11) return "h12";
    throw new Error("Unexpected hour cycle result");
  }
  var l$1 = (e) => typeof e == "boolean" ? `${e}` : e === 0 ? "0" : e, u = (e) => !e || typeof e != "object" || Object.keys(e).length === 0, x$2 = (e, o2) => JSON.stringify(e) === JSON.stringify(o2);
  function i(e, o2) {
    e.forEach(function(r2) {
      Array.isArray(r2) ? i(r2, o2) : o2.push(r2);
    });
  }
  function y$1(e) {
    let o2 = [];
    return i(e, o2), o2;
  }
  var a = (...e) => y$1(e).filter(Boolean), p$1 = (e, o2) => {
    let r2 = {}, c2 = Object.keys(e), f2 = Object.keys(o2);
    for (let t of c2) if (f2.includes(t)) {
      let s = e[t], n = o2[t];
      Array.isArray(s) || Array.isArray(n) ? r2[t] = a(n, s) : typeof s == "object" && typeof n == "object" ? r2[t] = p$1(s, n) : r2[t] = n + " " + s;
    } else r2[t] = e[t];
    for (let t of f2) c2.includes(t) || (r2[t] = o2[t]);
    return r2;
  }, g$1 = (e) => !e || typeof e != "string" ? e : e.replace(/\s+/g, " ").trim();
  const CLASS_PART_SEPARATOR = "-";
  const createClassGroupUtils = (config) => {
    const classMap = createClassMap(config);
    const {
      conflictingClassGroups,
      conflictingClassGroupModifiers
    } = config;
    const getClassGroupId = (className) => {
      const classParts = className.split(CLASS_PART_SEPARATOR);
      if (classParts[0] === "" && classParts.length !== 1) {
        classParts.shift();
      }
      return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
    };
    const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {
      const conflicts = conflictingClassGroups[classGroupId] || [];
      if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
        return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
      }
      return conflicts;
    };
    return {
      getClassGroupId,
      getConflictingClassGroupIds
    };
  };
  const getGroupRecursive = (classParts, classPartObject) => {
    var _a2;
    if (classParts.length === 0) {
      return classPartObject.classGroupId;
    }
    const currentClassPart = classParts[0];
    const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
    const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
    if (classGroupFromNextClassPart) {
      return classGroupFromNextClassPart;
    }
    if (classPartObject.validators.length === 0) {
      return void 0;
    }
    const classRest = classParts.join(CLASS_PART_SEPARATOR);
    return (_a2 = classPartObject.validators.find(({
      validator
    }) => validator(classRest))) == null ? void 0 : _a2.classGroupId;
  };
  const arbitraryPropertyRegex = /^\[(.+)\]$/;
  const getGroupIdForArbitraryProperty = (className) => {
    if (arbitraryPropertyRegex.test(className)) {
      const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
      const property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(":"));
      if (property) {
        return "arbitrary.." + property;
      }
    }
  };
  const createClassMap = (config) => {
    const {
      theme,
      prefix
    } = config;
    const classMap = {
      nextPart: /* @__PURE__ */ new Map(),
      validators: []
    };
    const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
    prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {
      processClassesRecursively(classGroup, classMap, classGroupId, theme);
    });
    return classMap;
  };
  const processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {
    classGroup.forEach((classDefinition) => {
      if (typeof classDefinition === "string") {
        const classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
        classPartObjectToEdit.classGroupId = classGroupId;
        return;
      }
      if (typeof classDefinition === "function") {
        if (isThemeGetter(classDefinition)) {
          processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
          return;
        }
        classPartObject.validators.push({
          validator: classDefinition,
          classGroupId
        });
        return;
      }
      Object.entries(classDefinition).forEach(([key, classGroup2]) => {
        processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);
      });
    });
  };
  const getPart = (classPartObject, path) => {
    let currentClassPartObject = classPartObject;
    path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {
      if (!currentClassPartObject.nextPart.has(pathPart)) {
        currentClassPartObject.nextPart.set(pathPart, {
          nextPart: /* @__PURE__ */ new Map(),
          validators: []
        });
      }
      currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
    });
    return currentClassPartObject;
  };
  const isThemeGetter = (func) => func.isThemeGetter;
  const getPrefixedClassGroupEntries = (classGroupEntries, prefix) => {
    if (!prefix) {
      return classGroupEntries;
    }
    return classGroupEntries.map(([classGroupId, classGroup]) => {
      const prefixedClassGroup = classGroup.map((classDefinition) => {
        if (typeof classDefinition === "string") {
          return prefix + classDefinition;
        }
        if (typeof classDefinition === "object") {
          return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]));
        }
        return classDefinition;
      });
      return [classGroupId, prefixedClassGroup];
    });
  };
  const createLruCache = (maxCacheSize) => {
    if (maxCacheSize < 1) {
      return {
        get: () => void 0,
        set: () => {
        }
      };
    }
    let cacheSize = 0;
    let cache2 = /* @__PURE__ */ new Map();
    let previousCache = /* @__PURE__ */ new Map();
    const update2 = (key, value) => {
      cache2.set(key, value);
      cacheSize++;
      if (cacheSize > maxCacheSize) {
        cacheSize = 0;
        previousCache = cache2;
        cache2 = /* @__PURE__ */ new Map();
      }
    };
    return {
      get(key) {
        let value = cache2.get(key);
        if (value !== void 0) {
          return value;
        }
        if ((value = previousCache.get(key)) !== void 0) {
          update2(key, value);
          return value;
        }
      },
      set(key, value) {
        if (cache2.has(key)) {
          cache2.set(key, value);
        } else {
          update2(key, value);
        }
      }
    };
  };
  const IMPORTANT_MODIFIER = "!";
  const createParseClassName = (config) => {
    const {
      separator,
      experimentalParseClassName
    } = config;
    const isSeparatorSingleCharacter = separator.length === 1;
    const firstSeparatorCharacter = separator[0];
    const separatorLength = separator.length;
    const parseClassName = (className) => {
      const modifiers = [];
      let bracketDepth = 0;
      let modifierStart = 0;
      let postfixModifierPosition;
      for (let index2 = 0; index2 < className.length; index2++) {
        let currentCharacter = className[index2];
        if (bracketDepth === 0) {
          if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index2, index2 + separatorLength) === separator)) {
            modifiers.push(className.slice(modifierStart, index2));
            modifierStart = index2 + separatorLength;
            continue;
          }
          if (currentCharacter === "/") {
            postfixModifierPosition = index2;
            continue;
          }
        }
        if (currentCharacter === "[") {
          bracketDepth++;
        } else if (currentCharacter === "]") {
          bracketDepth--;
        }
      }
      const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
      const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
      const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
      const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
      return {
        modifiers,
        hasImportantModifier,
        baseClassName,
        maybePostfixModifierPosition
      };
    };
    if (experimentalParseClassName) {
      return (className) => experimentalParseClassName({
        className,
        parseClassName
      });
    }
    return parseClassName;
  };
  const sortModifiers = (modifiers) => {
    if (modifiers.length <= 1) {
      return modifiers;
    }
    const sortedModifiers = [];
    let unsortedModifiers = [];
    modifiers.forEach((modifier) => {
      const isArbitraryVariant = modifier[0] === "[";
      if (isArbitraryVariant) {
        sortedModifiers.push(...unsortedModifiers.sort(), modifier);
        unsortedModifiers = [];
      } else {
        unsortedModifiers.push(modifier);
      }
    });
    sortedModifiers.push(...unsortedModifiers.sort());
    return sortedModifiers;
  };
  const createConfigUtils = (config) => ({
    cache: createLruCache(config.cacheSize),
    parseClassName: createParseClassName(config),
    ...createClassGroupUtils(config)
  });
  const SPLIT_CLASSES_REGEX = /\s+/;
  const mergeClassList = (classList, configUtils) => {
    const {
      parseClassName,
      getClassGroupId,
      getConflictingClassGroupIds
    } = configUtils;
    const classGroupsInConflict = [];
    const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);
    let result2 = "";
    for (let index2 = classNames.length - 1; index2 >= 0; index2 -= 1) {
      const originalClassName = classNames[index2];
      const {
        modifiers,
        hasImportantModifier,
        baseClassName,
        maybePostfixModifierPosition
      } = parseClassName(originalClassName);
      let hasPostfixModifier = Boolean(maybePostfixModifierPosition);
      let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
      if (!classGroupId) {
        if (!hasPostfixModifier) {
          result2 = originalClassName + (result2.length > 0 ? " " + result2 : result2);
          continue;
        }
        classGroupId = getClassGroupId(baseClassName);
        if (!classGroupId) {
          result2 = originalClassName + (result2.length > 0 ? " " + result2 : result2);
          continue;
        }
        hasPostfixModifier = false;
      }
      const variantModifier = sortModifiers(modifiers).join(":");
      const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
      const classId = modifierId + classGroupId;
      if (classGroupsInConflict.includes(classId)) {
        continue;
      }
      classGroupsInConflict.push(classId);
      const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);
      for (let i2 = 0; i2 < conflictGroups.length; ++i2) {
        const group = conflictGroups[i2];
        classGroupsInConflict.push(modifierId + group);
      }
      result2 = originalClassName + (result2.length > 0 ? " " + result2 : result2);
    }
    return result2;
  };
  function twJoin() {
    let index2 = 0;
    let argument;
    let resolvedValue;
    let string = "";
    while (index2 < arguments.length) {
      if (argument = arguments[index2++]) {
        if (resolvedValue = toValue(argument)) {
          string && (string += " ");
          string += resolvedValue;
        }
      }
    }
    return string;
  }
  const toValue = (mix) => {
    if (typeof mix === "string") {
      return mix;
    }
    let resolvedValue;
    let string = "";
    for (let k = 0; k < mix.length; k++) {
      if (mix[k]) {
        if (resolvedValue = toValue(mix[k])) {
          string && (string += " ");
          string += resolvedValue;
        }
      }
    }
    return string;
  };
  function createTailwindMerge(createConfigFirst, ...createConfigRest) {
    let configUtils;
    let cacheGet;
    let cacheSet;
    let functionToCall = initTailwindMerge;
    function initTailwindMerge(classList) {
      const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());
      configUtils = createConfigUtils(config);
      cacheGet = configUtils.cache.get;
      cacheSet = configUtils.cache.set;
      functionToCall = tailwindMerge;
      return tailwindMerge(classList);
    }
    function tailwindMerge(classList) {
      const cachedResult = cacheGet(classList);
      if (cachedResult) {
        return cachedResult;
      }
      const result2 = mergeClassList(classList, configUtils);
      cacheSet(classList, result2);
      return result2;
    }
    return function callTailwindMerge() {
      return functionToCall(twJoin.apply(null, arguments));
    };
  }
  const fromTheme = (key) => {
    const themeGetter = (theme) => theme[key] || [];
    themeGetter.isThemeGetter = true;
    return themeGetter;
  };
  const arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
  const fractionRegex = /^\d+\/\d+$/;
  const stringLengths = /* @__PURE__ */ new Set(["px", "full", "screen"]);
  const tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
  const lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
  const colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/;
  const shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
  const imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
  const isLength = (value) => isNumber(value) || stringLengths.has(value) || fractionRegex.test(value);
  const isArbitraryLength = (value) => getIsArbitraryValue(value, "length", isLengthOnly);
  const isNumber = (value) => Boolean(value) && !Number.isNaN(Number(value));
  const isArbitraryNumber = (value) => getIsArbitraryValue(value, "number", isNumber);
  const isInteger = (value) => Boolean(value) && Number.isInteger(Number(value));
  const isPercent = (value) => value.endsWith("%") && isNumber(value.slice(0, -1));
  const isArbitraryValue = (value) => arbitraryValueRegex.test(value);
  const isTshirtSize = (value) => tshirtUnitRegex.test(value);
  const sizeLabels = /* @__PURE__ */ new Set(["length", "size", "percentage"]);
  const isArbitrarySize = (value) => getIsArbitraryValue(value, sizeLabels, isNever);
  const isArbitraryPosition = (value) => getIsArbitraryValue(value, "position", isNever);
  const imageLabels = /* @__PURE__ */ new Set(["image", "url"]);
  const isArbitraryImage = (value) => getIsArbitraryValue(value, imageLabels, isImage);
  const isArbitraryShadow = (value) => getIsArbitraryValue(value, "", isShadow);
  const isAny = () => true;
  const getIsArbitraryValue = (value, label, testValue) => {
    const result2 = arbitraryValueRegex.exec(value);
    if (result2) {
      if (result2[1]) {
        return typeof label === "string" ? result2[1] === label : label.has(result2[1]);
      }
      return testValue(result2[2]);
    }
    return false;
  };
  const isLengthOnly = (value) => (
    // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
    // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
    // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
    lengthUnitRegex.test(value) && !colorFunctionRegex.test(value)
  );
  const isNever = () => false;
  const isShadow = (value) => shadowRegex.test(value);
  const isImage = (value) => imageRegex.test(value);
  const getDefaultConfig = () => {
    const colors = fromTheme("colors");
    const spacing = fromTheme("spacing");
    const blur = fromTheme("blur");
    const brightness = fromTheme("brightness");
    const borderColor = fromTheme("borderColor");
    const borderRadius = fromTheme("borderRadius");
    const borderSpacing = fromTheme("borderSpacing");
    const borderWidth = fromTheme("borderWidth");
    const contrast = fromTheme("contrast");
    const grayscale = fromTheme("grayscale");
    const hueRotate = fromTheme("hueRotate");
    const invert = fromTheme("invert");
    const gap = fromTheme("gap");
    const gradientColorStops = fromTheme("gradientColorStops");
    const gradientColorStopPositions = fromTheme("gradientColorStopPositions");
    const inset = fromTheme("inset");
    const margin = fromTheme("margin");
    const opacity = fromTheme("opacity");
    const padding = fromTheme("padding");
    const saturate = fromTheme("saturate");
    const scale = fromTheme("scale");
    const sepia = fromTheme("sepia");
    const skew = fromTheme("skew");
    const space = fromTheme("space");
    const translate = fromTheme("translate");
    const getOverscroll = () => ["auto", "contain", "none"];
    const getOverflow = () => ["auto", "hidden", "clip", "visible", "scroll"];
    const getSpacingWithAutoAndArbitrary = () => ["auto", isArbitraryValue, spacing];
    const getSpacingWithArbitrary = () => [isArbitraryValue, spacing];
    const getLengthWithEmptyAndArbitrary = () => ["", isLength, isArbitraryLength];
    const getNumberWithAutoAndArbitrary = () => ["auto", isNumber, isArbitraryValue];
    const getPositions = () => ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"];
    const getLineStyles = () => ["solid", "dashed", "dotted", "double", "none"];
    const getBlendModes = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
    const getAlign = () => ["start", "end", "center", "between", "around", "evenly", "stretch"];
    const getZeroAndEmpty = () => ["", "0", isArbitraryValue];
    const getBreaks = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
    const getNumberAndArbitrary = () => [isNumber, isArbitraryValue];
    return {
      cacheSize: 500,
      separator: ":",
      theme: {
        colors: [isAny],
        spacing: [isLength, isArbitraryLength],
        blur: ["none", "", isTshirtSize, isArbitraryValue],
        brightness: getNumberAndArbitrary(),
        borderColor: [colors],
        borderRadius: ["none", "", "full", isTshirtSize, isArbitraryValue],
        borderSpacing: getSpacingWithArbitrary(),
        borderWidth: getLengthWithEmptyAndArbitrary(),
        contrast: getNumberAndArbitrary(),
        grayscale: getZeroAndEmpty(),
        hueRotate: getNumberAndArbitrary(),
        invert: getZeroAndEmpty(),
        gap: getSpacingWithArbitrary(),
        gradientColorStops: [colors],
        gradientColorStopPositions: [isPercent, isArbitraryLength],
        inset: getSpacingWithAutoAndArbitrary(),
        margin: getSpacingWithAutoAndArbitrary(),
        opacity: getNumberAndArbitrary(),
        padding: getSpacingWithArbitrary(),
        saturate: getNumberAndArbitrary(),
        scale: getNumberAndArbitrary(),
        sepia: getZeroAndEmpty(),
        skew: getNumberAndArbitrary(),
        space: getSpacingWithArbitrary(),
        translate: getSpacingWithArbitrary()
      },
      classGroups: {
        // Layout
        /**
         * Aspect Ratio
         * @see https://tailwindcss.com/docs/aspect-ratio
         */
        aspect: [{
          aspect: ["auto", "square", "video", isArbitraryValue]
        }],
        /**
         * Container
         * @see https://tailwindcss.com/docs/container
         */
        container: ["container"],
        /**
         * Columns
         * @see https://tailwindcss.com/docs/columns
         */
        columns: [{
          columns: [isTshirtSize]
        }],
        /**
         * Break After
         * @see https://tailwindcss.com/docs/break-after
         */
        "break-after": [{
          "break-after": getBreaks()
        }],
        /**
         * Break Before
         * @see https://tailwindcss.com/docs/break-before
         */
        "break-before": [{
          "break-before": getBreaks()
        }],
        /**
         * Break Inside
         * @see https://tailwindcss.com/docs/break-inside
         */
        "break-inside": [{
          "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
        }],
        /**
         * Box Decoration Break
         * @see https://tailwindcss.com/docs/box-decoration-break
         */
        "box-decoration": [{
          "box-decoration": ["slice", "clone"]
        }],
        /**
         * Box Sizing
         * @see https://tailwindcss.com/docs/box-sizing
         */
        box: [{
          box: ["border", "content"]
        }],
        /**
         * Display
         * @see https://tailwindcss.com/docs/display
         */
        display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
        /**
         * Floats
         * @see https://tailwindcss.com/docs/float
         */
        float: [{
          float: ["right", "left", "none", "start", "end"]
        }],
        /**
         * Clear
         * @see https://tailwindcss.com/docs/clear
         */
        clear: [{
          clear: ["left", "right", "both", "none", "start", "end"]
        }],
        /**
         * Isolation
         * @see https://tailwindcss.com/docs/isolation
         */
        isolation: ["isolate", "isolation-auto"],
        /**
         * Object Fit
         * @see https://tailwindcss.com/docs/object-fit
         */
        "object-fit": [{
          object: ["contain", "cover", "fill", "none", "scale-down"]
        }],
        /**
         * Object Position
         * @see https://tailwindcss.com/docs/object-position
         */
        "object-position": [{
          object: [...getPositions(), isArbitraryValue]
        }],
        /**
         * Overflow
         * @see https://tailwindcss.com/docs/overflow
         */
        overflow: [{
          overflow: getOverflow()
        }],
        /**
         * Overflow X
         * @see https://tailwindcss.com/docs/overflow
         */
        "overflow-x": [{
          "overflow-x": getOverflow()
        }],
        /**
         * Overflow Y
         * @see https://tailwindcss.com/docs/overflow
         */
        "overflow-y": [{
          "overflow-y": getOverflow()
        }],
        /**
         * Overscroll Behavior
         * @see https://tailwindcss.com/docs/overscroll-behavior
         */
        overscroll: [{
          overscroll: getOverscroll()
        }],
        /**
         * Overscroll Behavior X
         * @see https://tailwindcss.com/docs/overscroll-behavior
         */
        "overscroll-x": [{
          "overscroll-x": getOverscroll()
        }],
        /**
         * Overscroll Behavior Y
         * @see https://tailwindcss.com/docs/overscroll-behavior
         */
        "overscroll-y": [{
          "overscroll-y": getOverscroll()
        }],
        /**
         * Position
         * @see https://tailwindcss.com/docs/position
         */
        position: ["static", "fixed", "absolute", "relative", "sticky"],
        /**
         * Top / Right / Bottom / Left
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        inset: [{
          inset: [inset]
        }],
        /**
         * Right / Left
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        "inset-x": [{
          "inset-x": [inset]
        }],
        /**
         * Top / Bottom
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        "inset-y": [{
          "inset-y": [inset]
        }],
        /**
         * Start
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        start: [{
          start: [inset]
        }],
        /**
         * End
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        end: [{
          end: [inset]
        }],
        /**
         * Top
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        top: [{
          top: [inset]
        }],
        /**
         * Right
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        right: [{
          right: [inset]
        }],
        /**
         * Bottom
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        bottom: [{
          bottom: [inset]
        }],
        /**
         * Left
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        left: [{
          left: [inset]
        }],
        /**
         * Visibility
         * @see https://tailwindcss.com/docs/visibility
         */
        visibility: ["visible", "invisible", "collapse"],
        /**
         * Z-Index
         * @see https://tailwindcss.com/docs/z-index
         */
        z: [{
          z: ["auto", isInteger, isArbitraryValue]
        }],
        // Flexbox and Grid
        /**
         * Flex Basis
         * @see https://tailwindcss.com/docs/flex-basis
         */
        basis: [{
          basis: getSpacingWithAutoAndArbitrary()
        }],
        /**
         * Flex Direction
         * @see https://tailwindcss.com/docs/flex-direction
         */
        "flex-direction": [{
          flex: ["row", "row-reverse", "col", "col-reverse"]
        }],
        /**
         * Flex Wrap
         * @see https://tailwindcss.com/docs/flex-wrap
         */
        "flex-wrap": [{
          flex: ["wrap", "wrap-reverse", "nowrap"]
        }],
        /**
         * Flex
         * @see https://tailwindcss.com/docs/flex
         */
        flex: [{
          flex: ["1", "auto", "initial", "none", isArbitraryValue]
        }],
        /**
         * Flex Grow
         * @see https://tailwindcss.com/docs/flex-grow
         */
        grow: [{
          grow: getZeroAndEmpty()
        }],
        /**
         * Flex Shrink
         * @see https://tailwindcss.com/docs/flex-shrink
         */
        shrink: [{
          shrink: getZeroAndEmpty()
        }],
        /**
         * Order
         * @see https://tailwindcss.com/docs/order
         */
        order: [{
          order: ["first", "last", "none", isInteger, isArbitraryValue]
        }],
        /**
         * Grid Template Columns
         * @see https://tailwindcss.com/docs/grid-template-columns
         */
        "grid-cols": [{
          "grid-cols": [isAny]
        }],
        /**
         * Grid Column Start / End
         * @see https://tailwindcss.com/docs/grid-column
         */
        "col-start-end": [{
          col: ["auto", {
            span: ["full", isInteger, isArbitraryValue]
          }, isArbitraryValue]
        }],
        /**
         * Grid Column Start
         * @see https://tailwindcss.com/docs/grid-column
         */
        "col-start": [{
          "col-start": getNumberWithAutoAndArbitrary()
        }],
        /**
         * Grid Column End
         * @see https://tailwindcss.com/docs/grid-column
         */
        "col-end": [{
          "col-end": getNumberWithAutoAndArbitrary()
        }],
        /**
         * Grid Template Rows
         * @see https://tailwindcss.com/docs/grid-template-rows
         */
        "grid-rows": [{
          "grid-rows": [isAny]
        }],
        /**
         * Grid Row Start / End
         * @see https://tailwindcss.com/docs/grid-row
         */
        "row-start-end": [{
          row: ["auto", {
            span: [isInteger, isArbitraryValue]
          }, isArbitraryValue]
        }],
        /**
         * Grid Row Start
         * @see https://tailwindcss.com/docs/grid-row
         */
        "row-start": [{
          "row-start": getNumberWithAutoAndArbitrary()
        }],
        /**
         * Grid Row End
         * @see https://tailwindcss.com/docs/grid-row
         */
        "row-end": [{
          "row-end": getNumberWithAutoAndArbitrary()
        }],
        /**
         * Grid Auto Flow
         * @see https://tailwindcss.com/docs/grid-auto-flow
         */
        "grid-flow": [{
          "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
        }],
        /**
         * Grid Auto Columns
         * @see https://tailwindcss.com/docs/grid-auto-columns
         */
        "auto-cols": [{
          "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue]
        }],
        /**
         * Grid Auto Rows
         * @see https://tailwindcss.com/docs/grid-auto-rows
         */
        "auto-rows": [{
          "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue]
        }],
        /**
         * Gap
         * @see https://tailwindcss.com/docs/gap
         */
        gap: [{
          gap: [gap]
        }],
        /**
         * Gap X
         * @see https://tailwindcss.com/docs/gap
         */
        "gap-x": [{
          "gap-x": [gap]
        }],
        /**
         * Gap Y
         * @see https://tailwindcss.com/docs/gap
         */
        "gap-y": [{
          "gap-y": [gap]
        }],
        /**
         * Justify Content
         * @see https://tailwindcss.com/docs/justify-content
         */
        "justify-content": [{
          justify: ["normal", ...getAlign()]
        }],
        /**
         * Justify Items
         * @see https://tailwindcss.com/docs/justify-items
         */
        "justify-items": [{
          "justify-items": ["start", "end", "center", "stretch"]
        }],
        /**
         * Justify Self
         * @see https://tailwindcss.com/docs/justify-self
         */
        "justify-self": [{
          "justify-self": ["auto", "start", "end", "center", "stretch"]
        }],
        /**
         * Align Content
         * @see https://tailwindcss.com/docs/align-content
         */
        "align-content": [{
          content: ["normal", ...getAlign(), "baseline"]
        }],
        /**
         * Align Items
         * @see https://tailwindcss.com/docs/align-items
         */
        "align-items": [{
          items: ["start", "end", "center", "baseline", "stretch"]
        }],
        /**
         * Align Self
         * @see https://tailwindcss.com/docs/align-self
         */
        "align-self": [{
          self: ["auto", "start", "end", "center", "stretch", "baseline"]
        }],
        /**
         * Place Content
         * @see https://tailwindcss.com/docs/place-content
         */
        "place-content": [{
          "place-content": [...getAlign(), "baseline"]
        }],
        /**
         * Place Items
         * @see https://tailwindcss.com/docs/place-items
         */
        "place-items": [{
          "place-items": ["start", "end", "center", "baseline", "stretch"]
        }],
        /**
         * Place Self
         * @see https://tailwindcss.com/docs/place-self
         */
        "place-self": [{
          "place-self": ["auto", "start", "end", "center", "stretch"]
        }],
        // Spacing
        /**
         * Padding
         * @see https://tailwindcss.com/docs/padding
         */
        p: [{
          p: [padding]
        }],
        /**
         * Padding X
         * @see https://tailwindcss.com/docs/padding
         */
        px: [{
          px: [padding]
        }],
        /**
         * Padding Y
         * @see https://tailwindcss.com/docs/padding
         */
        py: [{
          py: [padding]
        }],
        /**
         * Padding Start
         * @see https://tailwindcss.com/docs/padding
         */
        ps: [{
          ps: [padding]
        }],
        /**
         * Padding End
         * @see https://tailwindcss.com/docs/padding
         */
        pe: [{
          pe: [padding]
        }],
        /**
         * Padding Top
         * @see https://tailwindcss.com/docs/padding
         */
        pt: [{
          pt: [padding]
        }],
        /**
         * Padding Right
         * @see https://tailwindcss.com/docs/padding
         */
        pr: [{
          pr: [padding]
        }],
        /**
         * Padding Bottom
         * @see https://tailwindcss.com/docs/padding
         */
        pb: [{
          pb: [padding]
        }],
        /**
         * Padding Left
         * @see https://tailwindcss.com/docs/padding
         */
        pl: [{
          pl: [padding]
        }],
        /**
         * Margin
         * @see https://tailwindcss.com/docs/margin
         */
        m: [{
          m: [margin]
        }],
        /**
         * Margin X
         * @see https://tailwindcss.com/docs/margin
         */
        mx: [{
          mx: [margin]
        }],
        /**
         * Margin Y
         * @see https://tailwindcss.com/docs/margin
         */
        my: [{
          my: [margin]
        }],
        /**
         * Margin Start
         * @see https://tailwindcss.com/docs/margin
         */
        ms: [{
          ms: [margin]
        }],
        /**
         * Margin End
         * @see https://tailwindcss.com/docs/margin
         */
        me: [{
          me: [margin]
        }],
        /**
         * Margin Top
         * @see https://tailwindcss.com/docs/margin
         */
        mt: [{
          mt: [margin]
        }],
        /**
         * Margin Right
         * @see https://tailwindcss.com/docs/margin
         */
        mr: [{
          mr: [margin]
        }],
        /**
         * Margin Bottom
         * @see https://tailwindcss.com/docs/margin
         */
        mb: [{
          mb: [margin]
        }],
        /**
         * Margin Left
         * @see https://tailwindcss.com/docs/margin
         */
        ml: [{
          ml: [margin]
        }],
        /**
         * Space Between X
         * @see https://tailwindcss.com/docs/space
         */
        "space-x": [{
          "space-x": [space]
        }],
        /**
         * Space Between X Reverse
         * @see https://tailwindcss.com/docs/space
         */
        "space-x-reverse": ["space-x-reverse"],
        /**
         * Space Between Y
         * @see https://tailwindcss.com/docs/space
         */
        "space-y": [{
          "space-y": [space]
        }],
        /**
         * Space Between Y Reverse
         * @see https://tailwindcss.com/docs/space
         */
        "space-y-reverse": ["space-y-reverse"],
        // Sizing
        /**
         * Width
         * @see https://tailwindcss.com/docs/width
         */
        w: [{
          w: ["auto", "min", "max", "fit", "svw", "lvw", "dvw", isArbitraryValue, spacing]
        }],
        /**
         * Min-Width
         * @see https://tailwindcss.com/docs/min-width
         */
        "min-w": [{
          "min-w": [isArbitraryValue, spacing, "min", "max", "fit"]
        }],
        /**
         * Max-Width
         * @see https://tailwindcss.com/docs/max-width
         */
        "max-w": [{
          "max-w": [isArbitraryValue, spacing, "none", "full", "min", "max", "fit", "prose", {
            screen: [isTshirtSize]
          }, isTshirtSize]
        }],
        /**
         * Height
         * @see https://tailwindcss.com/docs/height
         */
        h: [{
          h: [isArbitraryValue, spacing, "auto", "min", "max", "fit", "svh", "lvh", "dvh"]
        }],
        /**
         * Min-Height
         * @see https://tailwindcss.com/docs/min-height
         */
        "min-h": [{
          "min-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
        }],
        /**
         * Max-Height
         * @see https://tailwindcss.com/docs/max-height
         */
        "max-h": [{
          "max-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
        }],
        /**
         * Size
         * @see https://tailwindcss.com/docs/size
         */
        size: [{
          size: [isArbitraryValue, spacing, "auto", "min", "max", "fit"]
        }],
        // Typography
        /**
         * Font Size
         * @see https://tailwindcss.com/docs/font-size
         */
        "font-size": [{
          text: ["base", isTshirtSize, isArbitraryLength]
        }],
        /**
         * Font Smoothing
         * @see https://tailwindcss.com/docs/font-smoothing
         */
        "font-smoothing": ["antialiased", "subpixel-antialiased"],
        /**
         * Font Style
         * @see https://tailwindcss.com/docs/font-style
         */
        "font-style": ["italic", "not-italic"],
        /**
         * Font Weight
         * @see https://tailwindcss.com/docs/font-weight
         */
        "font-weight": [{
          font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryNumber]
        }],
        /**
         * Font Family
         * @see https://tailwindcss.com/docs/font-family
         */
        "font-family": [{
          font: [isAny]
        }],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-normal": ["normal-nums"],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-ordinal": ["ordinal"],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-slashed-zero": ["slashed-zero"],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-figure": ["lining-nums", "oldstyle-nums"],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-spacing": ["proportional-nums", "tabular-nums"],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-fraction": ["diagonal-fractions", "stacked-fractions"],
        /**
         * Letter Spacing
         * @see https://tailwindcss.com/docs/letter-spacing
         */
        tracking: [{
          tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryValue]
        }],
        /**
         * Line Clamp
         * @see https://tailwindcss.com/docs/line-clamp
         */
        "line-clamp": [{
          "line-clamp": ["none", isNumber, isArbitraryNumber]
        }],
        /**
         * Line Height
         * @see https://tailwindcss.com/docs/line-height
         */
        leading: [{
          leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isLength, isArbitraryValue]
        }],
        /**
         * List Style Image
         * @see https://tailwindcss.com/docs/list-style-image
         */
        "list-image": [{
          "list-image": ["none", isArbitraryValue]
        }],
        /**
         * List Style Type
         * @see https://tailwindcss.com/docs/list-style-type
         */
        "list-style-type": [{
          list: ["none", "disc", "decimal", isArbitraryValue]
        }],
        /**
         * List Style Position
         * @see https://tailwindcss.com/docs/list-style-position
         */
        "list-style-position": [{
          list: ["inside", "outside"]
        }],
        /**
         * Placeholder Color
         * @deprecated since Tailwind CSS v3.0.0
         * @see https://tailwindcss.com/docs/placeholder-color
         */
        "placeholder-color": [{
          placeholder: [colors]
        }],
        /**
         * Placeholder Opacity
         * @see https://tailwindcss.com/docs/placeholder-opacity
         */
        "placeholder-opacity": [{
          "placeholder-opacity": [opacity]
        }],
        /**
         * Text Alignment
         * @see https://tailwindcss.com/docs/text-align
         */
        "text-alignment": [{
          text: ["left", "center", "right", "justify", "start", "end"]
        }],
        /**
         * Text Color
         * @see https://tailwindcss.com/docs/text-color
         */
        "text-color": [{
          text: [colors]
        }],
        /**
         * Text Opacity
         * @see https://tailwindcss.com/docs/text-opacity
         */
        "text-opacity": [{
          "text-opacity": [opacity]
        }],
        /**
         * Text Decoration
         * @see https://tailwindcss.com/docs/text-decoration
         */
        "text-decoration": ["underline", "overline", "line-through", "no-underline"],
        /**
         * Text Decoration Style
         * @see https://tailwindcss.com/docs/text-decoration-style
         */
        "text-decoration-style": [{
          decoration: [...getLineStyles(), "wavy"]
        }],
        /**
         * Text Decoration Thickness
         * @see https://tailwindcss.com/docs/text-decoration-thickness
         */
        "text-decoration-thickness": [{
          decoration: ["auto", "from-font", isLength, isArbitraryLength]
        }],
        /**
         * Text Underline Offset
         * @see https://tailwindcss.com/docs/text-underline-offset
         */
        "underline-offset": [{
          "underline-offset": ["auto", isLength, isArbitraryValue]
        }],
        /**
         * Text Decoration Color
         * @see https://tailwindcss.com/docs/text-decoration-color
         */
        "text-decoration-color": [{
          decoration: [colors]
        }],
        /**
         * Text Transform
         * @see https://tailwindcss.com/docs/text-transform
         */
        "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
        /**
         * Text Overflow
         * @see https://tailwindcss.com/docs/text-overflow
         */
        "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
        /**
         * Text Wrap
         * @see https://tailwindcss.com/docs/text-wrap
         */
        "text-wrap": [{
          text: ["wrap", "nowrap", "balance", "pretty"]
        }],
        /**
         * Text Indent
         * @see https://tailwindcss.com/docs/text-indent
         */
        indent: [{
          indent: getSpacingWithArbitrary()
        }],
        /**
         * Vertical Alignment
         * @see https://tailwindcss.com/docs/vertical-align
         */
        "vertical-align": [{
          align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryValue]
        }],
        /**
         * Whitespace
         * @see https://tailwindcss.com/docs/whitespace
         */
        whitespace: [{
          whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
        }],
        /**
         * Word Break
         * @see https://tailwindcss.com/docs/word-break
         */
        break: [{
          break: ["normal", "words", "all", "keep"]
        }],
        /**
         * Hyphens
         * @see https://tailwindcss.com/docs/hyphens
         */
        hyphens: [{
          hyphens: ["none", "manual", "auto"]
        }],
        /**
         * Content
         * @see https://tailwindcss.com/docs/content
         */
        content: [{
          content: ["none", isArbitraryValue]
        }],
        // Backgrounds
        /**
         * Background Attachment
         * @see https://tailwindcss.com/docs/background-attachment
         */
        "bg-attachment": [{
          bg: ["fixed", "local", "scroll"]
        }],
        /**
         * Background Clip
         * @see https://tailwindcss.com/docs/background-clip
         */
        "bg-clip": [{
          "bg-clip": ["border", "padding", "content", "text"]
        }],
        /**
         * Background Opacity
         * @deprecated since Tailwind CSS v3.0.0
         * @see https://tailwindcss.com/docs/background-opacity
         */
        "bg-opacity": [{
          "bg-opacity": [opacity]
        }],
        /**
         * Background Origin
         * @see https://tailwindcss.com/docs/background-origin
         */
        "bg-origin": [{
          "bg-origin": ["border", "padding", "content"]
        }],
        /**
         * Background Position
         * @see https://tailwindcss.com/docs/background-position
         */
        "bg-position": [{
          bg: [...getPositions(), isArbitraryPosition]
        }],
        /**
         * Background Repeat
         * @see https://tailwindcss.com/docs/background-repeat
         */
        "bg-repeat": [{
          bg: ["no-repeat", {
            repeat: ["", "x", "y", "round", "space"]
          }]
        }],
        /**
         * Background Size
         * @see https://tailwindcss.com/docs/background-size
         */
        "bg-size": [{
          bg: ["auto", "cover", "contain", isArbitrarySize]
        }],
        /**
         * Background Image
         * @see https://tailwindcss.com/docs/background-image
         */
        "bg-image": [{
          bg: ["none", {
            "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
          }, isArbitraryImage]
        }],
        /**
         * Background Color
         * @see https://tailwindcss.com/docs/background-color
         */
        "bg-color": [{
          bg: [colors]
        }],
        /**
         * Gradient Color Stops From Position
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-from-pos": [{
          from: [gradientColorStopPositions]
        }],
        /**
         * Gradient Color Stops Via Position
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-via-pos": [{
          via: [gradientColorStopPositions]
        }],
        /**
         * Gradient Color Stops To Position
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-to-pos": [{
          to: [gradientColorStopPositions]
        }],
        /**
         * Gradient Color Stops From
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-from": [{
          from: [gradientColorStops]
        }],
        /**
         * Gradient Color Stops Via
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-via": [{
          via: [gradientColorStops]
        }],
        /**
         * Gradient Color Stops To
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-to": [{
          to: [gradientColorStops]
        }],
        // Borders
        /**
         * Border Radius
         * @see https://tailwindcss.com/docs/border-radius
         */
        rounded: [{
          rounded: [borderRadius]
        }],
        /**
         * Border Radius Start
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-s": [{
          "rounded-s": [borderRadius]
        }],
        /**
         * Border Radius End
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-e": [{
          "rounded-e": [borderRadius]
        }],
        /**
         * Border Radius Top
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-t": [{
          "rounded-t": [borderRadius]
        }],
        /**
         * Border Radius Right
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-r": [{
          "rounded-r": [borderRadius]
        }],
        /**
         * Border Radius Bottom
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-b": [{
          "rounded-b": [borderRadius]
        }],
        /**
         * Border Radius Left
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-l": [{
          "rounded-l": [borderRadius]
        }],
        /**
         * Border Radius Start Start
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-ss": [{
          "rounded-ss": [borderRadius]
        }],
        /**
         * Border Radius Start End
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-se": [{
          "rounded-se": [borderRadius]
        }],
        /**
         * Border Radius End End
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-ee": [{
          "rounded-ee": [borderRadius]
        }],
        /**
         * Border Radius End Start
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-es": [{
          "rounded-es": [borderRadius]
        }],
        /**
         * Border Radius Top Left
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-tl": [{
          "rounded-tl": [borderRadius]
        }],
        /**
         * Border Radius Top Right
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-tr": [{
          "rounded-tr": [borderRadius]
        }],
        /**
         * Border Radius Bottom Right
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-br": [{
          "rounded-br": [borderRadius]
        }],
        /**
         * Border Radius Bottom Left
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-bl": [{
          "rounded-bl": [borderRadius]
        }],
        /**
         * Border Width
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w": [{
          border: [borderWidth]
        }],
        /**
         * Border Width X
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-x": [{
          "border-x": [borderWidth]
        }],
        /**
         * Border Width Y
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-y": [{
          "border-y": [borderWidth]
        }],
        /**
         * Border Width Start
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-s": [{
          "border-s": [borderWidth]
        }],
        /**
         * Border Width End
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-e": [{
          "border-e": [borderWidth]
        }],
        /**
         * Border Width Top
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-t": [{
          "border-t": [borderWidth]
        }],
        /**
         * Border Width Right
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-r": [{
          "border-r": [borderWidth]
        }],
        /**
         * Border Width Bottom
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-b": [{
          "border-b": [borderWidth]
        }],
        /**
         * Border Width Left
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-l": [{
          "border-l": [borderWidth]
        }],
        /**
         * Border Opacity
         * @see https://tailwindcss.com/docs/border-opacity
         */
        "border-opacity": [{
          "border-opacity": [opacity]
        }],
        /**
         * Border Style
         * @see https://tailwindcss.com/docs/border-style
         */
        "border-style": [{
          border: [...getLineStyles(), "hidden"]
        }],
        /**
         * Divide Width X
         * @see https://tailwindcss.com/docs/divide-width
         */
        "divide-x": [{
          "divide-x": [borderWidth]
        }],
        /**
         * Divide Width X Reverse
         * @see https://tailwindcss.com/docs/divide-width
         */
        "divide-x-reverse": ["divide-x-reverse"],
        /**
         * Divide Width Y
         * @see https://tailwindcss.com/docs/divide-width
         */
        "divide-y": [{
          "divide-y": [borderWidth]
        }],
        /**
         * Divide Width Y Reverse
         * @see https://tailwindcss.com/docs/divide-width
         */
        "divide-y-reverse": ["divide-y-reverse"],
        /**
         * Divide Opacity
         * @see https://tailwindcss.com/docs/divide-opacity
         */
        "divide-opacity": [{
          "divide-opacity": [opacity]
        }],
        /**
         * Divide Style
         * @see https://tailwindcss.com/docs/divide-style
         */
        "divide-style": [{
          divide: getLineStyles()
        }],
        /**
         * Border Color
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color": [{
          border: [borderColor]
        }],
        /**
         * Border Color X
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-x": [{
          "border-x": [borderColor]
        }],
        /**
         * Border Color Y
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-y": [{
          "border-y": [borderColor]
        }],
        /**
         * Border Color S
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-s": [{
          "border-s": [borderColor]
        }],
        /**
         * Border Color E
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-e": [{
          "border-e": [borderColor]
        }],
        /**
         * Border Color Top
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-t": [{
          "border-t": [borderColor]
        }],
        /**
         * Border Color Right
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-r": [{
          "border-r": [borderColor]
        }],
        /**
         * Border Color Bottom
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-b": [{
          "border-b": [borderColor]
        }],
        /**
         * Border Color Left
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-l": [{
          "border-l": [borderColor]
        }],
        /**
         * Divide Color
         * @see https://tailwindcss.com/docs/divide-color
         */
        "divide-color": [{
          divide: [borderColor]
        }],
        /**
         * Outline Style
         * @see https://tailwindcss.com/docs/outline-style
         */
        "outline-style": [{
          outline: ["", ...getLineStyles()]
        }],
        /**
         * Outline Offset
         * @see https://tailwindcss.com/docs/outline-offset
         */
        "outline-offset": [{
          "outline-offset": [isLength, isArbitraryValue]
        }],
        /**
         * Outline Width
         * @see https://tailwindcss.com/docs/outline-width
         */
        "outline-w": [{
          outline: [isLength, isArbitraryLength]
        }],
        /**
         * Outline Color
         * @see https://tailwindcss.com/docs/outline-color
         */
        "outline-color": [{
          outline: [colors]
        }],
        /**
         * Ring Width
         * @see https://tailwindcss.com/docs/ring-width
         */
        "ring-w": [{
          ring: getLengthWithEmptyAndArbitrary()
        }],
        /**
         * Ring Width Inset
         * @see https://tailwindcss.com/docs/ring-width
         */
        "ring-w-inset": ["ring-inset"],
        /**
         * Ring Color
         * @see https://tailwindcss.com/docs/ring-color
         */
        "ring-color": [{
          ring: [colors]
        }],
        /**
         * Ring Opacity
         * @see https://tailwindcss.com/docs/ring-opacity
         */
        "ring-opacity": [{
          "ring-opacity": [opacity]
        }],
        /**
         * Ring Offset Width
         * @see https://tailwindcss.com/docs/ring-offset-width
         */
        "ring-offset-w": [{
          "ring-offset": [isLength, isArbitraryLength]
        }],
        /**
         * Ring Offset Color
         * @see https://tailwindcss.com/docs/ring-offset-color
         */
        "ring-offset-color": [{
          "ring-offset": [colors]
        }],
        // Effects
        /**
         * Box Shadow
         * @see https://tailwindcss.com/docs/box-shadow
         */
        shadow: [{
          shadow: ["", "inner", "none", isTshirtSize, isArbitraryShadow]
        }],
        /**
         * Box Shadow Color
         * @see https://tailwindcss.com/docs/box-shadow-color
         */
        "shadow-color": [{
          shadow: [isAny]
        }],
        /**
         * Opacity
         * @see https://tailwindcss.com/docs/opacity
         */
        opacity: [{
          opacity: [opacity]
        }],
        /**
         * Mix Blend Mode
         * @see https://tailwindcss.com/docs/mix-blend-mode
         */
        "mix-blend": [{
          "mix-blend": [...getBlendModes(), "plus-lighter", "plus-darker"]
        }],
        /**
         * Background Blend Mode
         * @see https://tailwindcss.com/docs/background-blend-mode
         */
        "bg-blend": [{
          "bg-blend": getBlendModes()
        }],
        // Filters
        /**
         * Filter
         * @deprecated since Tailwind CSS v3.0.0
         * @see https://tailwindcss.com/docs/filter
         */
        filter: [{
          filter: ["", "none"]
        }],
        /**
         * Blur
         * @see https://tailwindcss.com/docs/blur
         */
        blur: [{
          blur: [blur]
        }],
        /**
         * Brightness
         * @see https://tailwindcss.com/docs/brightness
         */
        brightness: [{
          brightness: [brightness]
        }],
        /**
         * Contrast
         * @see https://tailwindcss.com/docs/contrast
         */
        contrast: [{
          contrast: [contrast]
        }],
        /**
         * Drop Shadow
         * @see https://tailwindcss.com/docs/drop-shadow
         */
        "drop-shadow": [{
          "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue]
        }],
        /**
         * Grayscale
         * @see https://tailwindcss.com/docs/grayscale
         */
        grayscale: [{
          grayscale: [grayscale]
        }],
        /**
         * Hue Rotate
         * @see https://tailwindcss.com/docs/hue-rotate
         */
        "hue-rotate": [{
          "hue-rotate": [hueRotate]
        }],
        /**
         * Invert
         * @see https://tailwindcss.com/docs/invert
         */
        invert: [{
          invert: [invert]
        }],
        /**
         * Saturate
         * @see https://tailwindcss.com/docs/saturate
         */
        saturate: [{
          saturate: [saturate]
        }],
        /**
         * Sepia
         * @see https://tailwindcss.com/docs/sepia
         */
        sepia: [{
          sepia: [sepia]
        }],
        /**
         * Backdrop Filter
         * @deprecated since Tailwind CSS v3.0.0
         * @see https://tailwindcss.com/docs/backdrop-filter
         */
        "backdrop-filter": [{
          "backdrop-filter": ["", "none"]
        }],
        /**
         * Backdrop Blur
         * @see https://tailwindcss.com/docs/backdrop-blur
         */
        "backdrop-blur": [{
          "backdrop-blur": [blur]
        }],
        /**
         * Backdrop Brightness
         * @see https://tailwindcss.com/docs/backdrop-brightness
         */
        "backdrop-brightness": [{
          "backdrop-brightness": [brightness]
        }],
        /**
         * Backdrop Contrast
         * @see https://tailwindcss.com/docs/backdrop-contrast
         */
        "backdrop-contrast": [{
          "backdrop-contrast": [contrast]
        }],
        /**
         * Backdrop Grayscale
         * @see https://tailwindcss.com/docs/backdrop-grayscale
         */
        "backdrop-grayscale": [{
          "backdrop-grayscale": [grayscale]
        }],
        /**
         * Backdrop Hue Rotate
         * @see https://tailwindcss.com/docs/backdrop-hue-rotate
         */
        "backdrop-hue-rotate": [{
          "backdrop-hue-rotate": [hueRotate]
        }],
        /**
         * Backdrop Invert
         * @see https://tailwindcss.com/docs/backdrop-invert
         */
        "backdrop-invert": [{
          "backdrop-invert": [invert]
        }],
        /**
         * Backdrop Opacity
         * @see https://tailwindcss.com/docs/backdrop-opacity
         */
        "backdrop-opacity": [{
          "backdrop-opacity": [opacity]
        }],
        /**
         * Backdrop Saturate
         * @see https://tailwindcss.com/docs/backdrop-saturate
         */
        "backdrop-saturate": [{
          "backdrop-saturate": [saturate]
        }],
        /**
         * Backdrop Sepia
         * @see https://tailwindcss.com/docs/backdrop-sepia
         */
        "backdrop-sepia": [{
          "backdrop-sepia": [sepia]
        }],
        // Tables
        /**
         * Border Collapse
         * @see https://tailwindcss.com/docs/border-collapse
         */
        "border-collapse": [{
          border: ["collapse", "separate"]
        }],
        /**
         * Border Spacing
         * @see https://tailwindcss.com/docs/border-spacing
         */
        "border-spacing": [{
          "border-spacing": [borderSpacing]
        }],
        /**
         * Border Spacing X
         * @see https://tailwindcss.com/docs/border-spacing
         */
        "border-spacing-x": [{
          "border-spacing-x": [borderSpacing]
        }],
        /**
         * Border Spacing Y
         * @see https://tailwindcss.com/docs/border-spacing
         */
        "border-spacing-y": [{
          "border-spacing-y": [borderSpacing]
        }],
        /**
         * Table Layout
         * @see https://tailwindcss.com/docs/table-layout
         */
        "table-layout": [{
          table: ["auto", "fixed"]
        }],
        /**
         * Caption Side
         * @see https://tailwindcss.com/docs/caption-side
         */
        caption: [{
          caption: ["top", "bottom"]
        }],
        // Transitions and Animation
        /**
         * Tranisition Property
         * @see https://tailwindcss.com/docs/transition-property
         */
        transition: [{
          transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue]
        }],
        /**
         * Transition Duration
         * @see https://tailwindcss.com/docs/transition-duration
         */
        duration: [{
          duration: getNumberAndArbitrary()
        }],
        /**
         * Transition Timing Function
         * @see https://tailwindcss.com/docs/transition-timing-function
         */
        ease: [{
          ease: ["linear", "in", "out", "in-out", isArbitraryValue]
        }],
        /**
         * Transition Delay
         * @see https://tailwindcss.com/docs/transition-delay
         */
        delay: [{
          delay: getNumberAndArbitrary()
        }],
        /**
         * Animation
         * @see https://tailwindcss.com/docs/animation
         */
        animate: [{
          animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue]
        }],
        // Transforms
        /**
         * Transform
         * @see https://tailwindcss.com/docs/transform
         */
        transform: [{
          transform: ["", "gpu", "none"]
        }],
        /**
         * Scale
         * @see https://tailwindcss.com/docs/scale
         */
        scale: [{
          scale: [scale]
        }],
        /**
         * Scale X
         * @see https://tailwindcss.com/docs/scale
         */
        "scale-x": [{
          "scale-x": [scale]
        }],
        /**
         * Scale Y
         * @see https://tailwindcss.com/docs/scale
         */
        "scale-y": [{
          "scale-y": [scale]
        }],
        /**
         * Rotate
         * @see https://tailwindcss.com/docs/rotate
         */
        rotate: [{
          rotate: [isInteger, isArbitraryValue]
        }],
        /**
         * Translate X
         * @see https://tailwindcss.com/docs/translate
         */
        "translate-x": [{
          "translate-x": [translate]
        }],
        /**
         * Translate Y
         * @see https://tailwindcss.com/docs/translate
         */
        "translate-y": [{
          "translate-y": [translate]
        }],
        /**
         * Skew X
         * @see https://tailwindcss.com/docs/skew
         */
        "skew-x": [{
          "skew-x": [skew]
        }],
        /**
         * Skew Y
         * @see https://tailwindcss.com/docs/skew
         */
        "skew-y": [{
          "skew-y": [skew]
        }],
        /**
         * Transform Origin
         * @see https://tailwindcss.com/docs/transform-origin
         */
        "transform-origin": [{
          origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue]
        }],
        // Interactivity
        /**
         * Accent Color
         * @see https://tailwindcss.com/docs/accent-color
         */
        accent: [{
          accent: ["auto", colors]
        }],
        /**
         * Appearance
         * @see https://tailwindcss.com/docs/appearance
         */
        appearance: [{
          appearance: ["none", "auto"]
        }],
        /**
         * Cursor
         * @see https://tailwindcss.com/docs/cursor
         */
        cursor: [{
          cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue]
        }],
        /**
         * Caret Color
         * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
         */
        "caret-color": [{
          caret: [colors]
        }],
        /**
         * Pointer Events
         * @see https://tailwindcss.com/docs/pointer-events
         */
        "pointer-events": [{
          "pointer-events": ["none", "auto"]
        }],
        /**
         * Resize
         * @see https://tailwindcss.com/docs/resize
         */
        resize: [{
          resize: ["none", "y", "x", ""]
        }],
        /**
         * Scroll Behavior
         * @see https://tailwindcss.com/docs/scroll-behavior
         */
        "scroll-behavior": [{
          scroll: ["auto", "smooth"]
        }],
        /**
         * Scroll Margin
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-m": [{
          "scroll-m": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Margin X
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-mx": [{
          "scroll-mx": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Margin Y
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-my": [{
          "scroll-my": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Margin Start
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-ms": [{
          "scroll-ms": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Margin End
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-me": [{
          "scroll-me": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Margin Top
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-mt": [{
          "scroll-mt": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Margin Right
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-mr": [{
          "scroll-mr": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Margin Bottom
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-mb": [{
          "scroll-mb": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Margin Left
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-ml": [{
          "scroll-ml": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-p": [{
          "scroll-p": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding X
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-px": [{
          "scroll-px": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding Y
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-py": [{
          "scroll-py": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding Start
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-ps": [{
          "scroll-ps": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding End
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-pe": [{
          "scroll-pe": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding Top
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-pt": [{
          "scroll-pt": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding Right
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-pr": [{
          "scroll-pr": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding Bottom
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-pb": [{
          "scroll-pb": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding Left
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-pl": [{
          "scroll-pl": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Snap Align
         * @see https://tailwindcss.com/docs/scroll-snap-align
         */
        "snap-align": [{
          snap: ["start", "end", "center", "align-none"]
        }],
        /**
         * Scroll Snap Stop
         * @see https://tailwindcss.com/docs/scroll-snap-stop
         */
        "snap-stop": [{
          snap: ["normal", "always"]
        }],
        /**
         * Scroll Snap Type
         * @see https://tailwindcss.com/docs/scroll-snap-type
         */
        "snap-type": [{
          snap: ["none", "x", "y", "both"]
        }],
        /**
         * Scroll Snap Type Strictness
         * @see https://tailwindcss.com/docs/scroll-snap-type
         */
        "snap-strictness": [{
          snap: ["mandatory", "proximity"]
        }],
        /**
         * Touch Action
         * @see https://tailwindcss.com/docs/touch-action
         */
        touch: [{
          touch: ["auto", "none", "manipulation"]
        }],
        /**
         * Touch Action X
         * @see https://tailwindcss.com/docs/touch-action
         */
        "touch-x": [{
          "touch-pan": ["x", "left", "right"]
        }],
        /**
         * Touch Action Y
         * @see https://tailwindcss.com/docs/touch-action
         */
        "touch-y": [{
          "touch-pan": ["y", "up", "down"]
        }],
        /**
         * Touch Action Pinch Zoom
         * @see https://tailwindcss.com/docs/touch-action
         */
        "touch-pz": ["touch-pinch-zoom"],
        /**
         * User Select
         * @see https://tailwindcss.com/docs/user-select
         */
        select: [{
          select: ["none", "text", "all", "auto"]
        }],
        /**
         * Will Change
         * @see https://tailwindcss.com/docs/will-change
         */
        "will-change": [{
          "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue]
        }],
        // SVG
        /**
         * Fill
         * @see https://tailwindcss.com/docs/fill
         */
        fill: [{
          fill: [colors, "none"]
        }],
        /**
         * Stroke Width
         * @see https://tailwindcss.com/docs/stroke-width
         */
        "stroke-w": [{
          stroke: [isLength, isArbitraryLength, isArbitraryNumber]
        }],
        /**
         * Stroke
         * @see https://tailwindcss.com/docs/stroke
         */
        stroke: [{
          stroke: [colors, "none"]
        }],
        // Accessibility
        /**
         * Screen Readers
         * @see https://tailwindcss.com/docs/screen-readers
         */
        sr: ["sr-only", "not-sr-only"],
        /**
         * Forced Color Adjust
         * @see https://tailwindcss.com/docs/forced-color-adjust
         */
        "forced-color-adjust": [{
          "forced-color-adjust": ["auto", "none"]
        }]
      },
      conflictingClassGroups: {
        overflow: ["overflow-x", "overflow-y"],
        overscroll: ["overscroll-x", "overscroll-y"],
        inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
        "inset-x": ["right", "left"],
        "inset-y": ["top", "bottom"],
        flex: ["basis", "grow", "shrink"],
        gap: ["gap-x", "gap-y"],
        p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
        px: ["pr", "pl"],
        py: ["pt", "pb"],
        m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
        mx: ["mr", "ml"],
        my: ["mt", "mb"],
        size: ["w", "h"],
        "font-size": ["leading"],
        "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
        "fvn-ordinal": ["fvn-normal"],
        "fvn-slashed-zero": ["fvn-normal"],
        "fvn-figure": ["fvn-normal"],
        "fvn-spacing": ["fvn-normal"],
        "fvn-fraction": ["fvn-normal"],
        "line-clamp": ["display", "overflow"],
        rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
        "rounded-s": ["rounded-ss", "rounded-es"],
        "rounded-e": ["rounded-se", "rounded-ee"],
        "rounded-t": ["rounded-tl", "rounded-tr"],
        "rounded-r": ["rounded-tr", "rounded-br"],
        "rounded-b": ["rounded-br", "rounded-bl"],
        "rounded-l": ["rounded-tl", "rounded-bl"],
        "border-spacing": ["border-spacing-x", "border-spacing-y"],
        "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
        "border-w-x": ["border-w-r", "border-w-l"],
        "border-w-y": ["border-w-t", "border-w-b"],
        "border-color": ["border-color-s", "border-color-e", "border-color-t", "border-color-r", "border-color-b", "border-color-l"],
        "border-color-x": ["border-color-r", "border-color-l"],
        "border-color-y": ["border-color-t", "border-color-b"],
        "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
        "scroll-mx": ["scroll-mr", "scroll-ml"],
        "scroll-my": ["scroll-mt", "scroll-mb"],
        "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
        "scroll-px": ["scroll-pr", "scroll-pl"],
        "scroll-py": ["scroll-pt", "scroll-pb"],
        touch: ["touch-x", "touch-y", "touch-pz"],
        "touch-x": ["touch"],
        "touch-y": ["touch"],
        "touch-pz": ["touch"]
      },
      conflictingClassGroupModifiers: {
        "font-size": ["leading"]
      }
    };
  };
  const mergeConfigs = (baseConfig, {
    cacheSize,
    prefix,
    separator,
    experimentalParseClassName,
    extend = {},
    override = {}
  }) => {
    overrideProperty(baseConfig, "cacheSize", cacheSize);
    overrideProperty(baseConfig, "prefix", prefix);
    overrideProperty(baseConfig, "separator", separator);
    overrideProperty(baseConfig, "experimentalParseClassName", experimentalParseClassName);
    for (const configKey in override) {
      overrideConfigProperties(baseConfig[configKey], override[configKey]);
    }
    for (const key in extend) {
      mergeConfigProperties(baseConfig[key], extend[key]);
    }
    return baseConfig;
  };
  const overrideProperty = (baseObject, overrideKey, overrideValue) => {
    if (overrideValue !== void 0) {
      baseObject[overrideKey] = overrideValue;
    }
  };
  const overrideConfigProperties = (baseObject, overrideObject) => {
    if (overrideObject) {
      for (const key in overrideObject) {
        overrideProperty(baseObject, key, overrideObject[key]);
      }
    }
  };
  const mergeConfigProperties = (baseObject, mergeObject) => {
    if (mergeObject) {
      for (const key in mergeObject) {
        const mergeValue = mergeObject[key];
        if (mergeValue !== void 0) {
          baseObject[key] = (baseObject[key] || []).concat(mergeValue);
        }
      }
    }
  };
  const extendTailwindMerge = (configExtension, ...createConfig) => typeof configExtension === "function" ? createTailwindMerge(getDefaultConfig, configExtension, ...createConfig) : createTailwindMerge(() => mergeConfigs(getDefaultConfig(), configExtension), ...createConfig);
  const twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);
  var ie = { twMerge: true, twMergeConfig: {}, responsiveVariants: false }, x$1 = (s) => s || void 0, N$1 = (...s) => x$1(y$1(s).filter(Boolean).join(" ")), R$1 = null, v$1 = {}, q = false, M$1 = (...s) => (b$1) => b$1.twMerge ? ((!R$1 || q) && (q = false, R$1 = u(v$1) ? twMerge : extendTailwindMerge({ ...v$1, extend: { theme: v$1.theme, classGroups: v$1.classGroups, conflictingClassGroupModifiers: v$1.conflictingClassGroupModifiers, conflictingClassGroups: v$1.conflictingClassGroups, ...v$1.extend } })), x$1(R$1(N$1(s)))) : N$1(s), _ = (s, b2) => {
    for (let e in b2) s.hasOwnProperty(e) ? s[e] = N$1(s[e], b2[e]) : s[e] = b2[e];
    return s;
  }, ce = (s, b$1) => {
    let { extend: e = null, slots: O2 = {}, variants: U2 = {}, compoundVariants: W = [], compoundSlots: C2 = [], defaultVariants: z2 = {} } = s, m = { ...ie, ...b$1 }, k = e != null && e.base ? N$1(e.base, s == null ? void 0 : s.base) : s == null ? void 0 : s.base, g$1$1 = e != null && e.variants && !u(e.variants) ? p$1(U2, e.variants) : U2, w2 = e != null && e.defaultVariants && !u(e.defaultVariants) ? { ...e.defaultVariants, ...z2 } : z2;
    !u(m.twMergeConfig) && !x$2(m.twMergeConfig, v$1) && (q = true, v$1 = m.twMergeConfig);
    let S2 = u(e == null ? void 0 : e.slots), T2 = u(O2) ? {} : { base: N$1(s == null ? void 0 : s.base, S2 && (e == null ? void 0 : e.base)), ...O2 }, j2 = S2 ? T2 : _({ ...e == null ? void 0 : e.slots }, u(T2) ? { base: s == null ? void 0 : s.base } : T2), h$1 = u(e == null ? void 0 : e.compoundVariants) ? W : a(e == null ? void 0 : e.compoundVariants, W), V2 = (l2) => {
      if (u(g$1$1) && u(O2) && S2) return M$1(k, l2 == null ? void 0 : l2.class, l2 == null ? void 0 : l2.className)(m);
      if (h$1 && !Array.isArray(h$1)) throw new TypeError(`The "compoundVariants" prop must be an array. Received: ${typeof h$1}`);
      if (C2 && !Array.isArray(C2)) throw new TypeError(`The "compoundSlots" prop must be an array. Received: ${typeof C2}`);
      let P2 = (a2, n, t = [], i2) => {
        let r2 = t;
        if (typeof n == "string") r2 = r2.concat(g$1(n).split(" ").map((o2) => `${a2}:${o2}`));
        else if (Array.isArray(n)) r2 = r2.concat(n.reduce((o2, c2) => o2.concat(`${a2}:${c2}`), []));
        else if (typeof n == "object" && typeof i2 == "string") {
          for (let o2 in n) if (n.hasOwnProperty(o2) && o2 === i2) {
            let c2 = n[o2];
            if (c2 && typeof c2 == "string") {
              let u2 = g$1(c2);
              r2[i2] ? r2[i2] = r2[i2].concat(u2.split(" ").map((f2) => `${a2}:${f2}`)) : r2[i2] = u2.split(" ").map((f2) => `${a2}:${f2}`);
            } else Array.isArray(c2) && c2.length > 0 && (r2[i2] = c2.reduce((u2, f2) => u2.concat(`${a2}:${f2}`), []));
          }
        }
        return r2;
      }, D2 = (a$1, n = g$1$1, t = null, i2 = null) => {
        var L2;
        let r2 = n[a$1];
        if (!r2 || u(r2)) return null;
        let o2 = (L2 = i2 == null ? void 0 : i2[a$1]) != null ? L2 : l2 == null ? void 0 : l2[a$1];
        if (o2 === null) return null;
        let c2 = l$1(o2), u$1 = Array.isArray(m.responsiveVariants) && m.responsiveVariants.length > 0 || m.responsiveVariants === true, f2 = w2 == null ? void 0 : w2[a$1], d2 = [];
        if (typeof c2 == "object" && u$1) for (let [E2, Q] of Object.entries(c2)) {
          let ne = r2[Q];
          if (E2 === "initial") {
            f2 = Q;
            continue;
          }
          Array.isArray(m.responsiveVariants) && !m.responsiveVariants.includes(E2) || (d2 = P2(E2, ne, d2, t));
        }
        let $ = c2 != null && typeof c2 != "object" ? c2 : l$1(f2), A2 = r2[$ || "false"];
        return typeof d2 == "object" && typeof t == "string" && d2[t] ? _(d2, A2) : d2.length > 0 ? (d2.push(A2), t === "base" ? d2.join(" ") : d2) : A2;
      }, p2 = () => g$1$1 ? Object.keys(g$1$1).map((a2) => D2(a2, g$1$1)) : null, ee = (a2, n) => {
        if (!g$1$1 || typeof g$1$1 != "object") return null;
        let t = new Array();
        for (let i2 in g$1$1) {
          let r2 = D2(i2, g$1$1, a2, n), o2 = a2 === "base" && typeof r2 == "string" ? r2 : r2 && r2[a2];
          o2 && (t[t.length] = o2);
        }
        return t;
      }, H2 = {};
      for (let a2 in l2) l2[a2] !== void 0 && (H2[a2] = l2[a2]);
      let I2 = (a2, n) => {
        var i2;
        let t = typeof (l2 == null ? void 0 : l2[a2]) == "object" ? { [a2]: (i2 = l2[a2]) == null ? void 0 : i2.initial } : {};
        return { ...w2, ...H2, ...t, ...n };
      }, J2 = (a2 = [], n) => {
        let t = [];
        for (let { class: i2, className: r2, ...o2 } of a2) {
          let c2 = true;
          for (let [u2, f2] of Object.entries(o2)) {
            let d2 = I2(u2, n)[u2];
            if (Array.isArray(f2)) {
              if (!f2.includes(d2)) {
                c2 = false;
                break;
              }
            } else {
              let $ = (A2) => A2 == null || A2 === false;
              if ($(f2) && $(d2)) continue;
              if (d2 !== f2) {
                c2 = false;
                break;
              }
            }
          }
          c2 && (i2 && t.push(i2), r2 && t.push(r2));
        }
        return t;
      }, te = (a2) => {
        let n = J2(h$1, a2);
        if (!Array.isArray(n)) return n;
        let t = {};
        for (let i2 of n) if (typeof i2 == "string" && (t.base = M$1(t.base, i2)(m)), typeof i2 == "object") for (let [r2, o2] of Object.entries(i2)) t[r2] = M$1(t[r2], o2)(m);
        return t;
      }, ae = (a2) => {
        if (C2.length < 1) return null;
        let n = {};
        for (let { slots: t = [], class: i2, className: r2, ...o2 } of C2) {
          if (!u(o2)) {
            let c2 = true;
            for (let u2 of Object.keys(o2)) {
              let f2 = I2(u2, a2)[u2];
              if (f2 === void 0 || (Array.isArray(o2[u2]) ? !o2[u2].includes(f2) : o2[u2] !== f2)) {
                c2 = false;
                break;
              }
            }
            if (!c2) continue;
          }
          for (let c2 of t) n[c2] = n[c2] || [], n[c2].push([i2, r2]);
        }
        return n;
      };
      if (!u(O2) || !S2) {
        let a2 = {};
        if (typeof j2 == "object" && !u(j2)) for (let n of Object.keys(j2)) a2[n] = (t) => {
          var i2, r2;
          return M$1(j2[n], ee(n, t), ((i2 = te(t)) != null ? i2 : [])[n], ((r2 = ae(t)) != null ? r2 : [])[n], t == null ? void 0 : t.class, t == null ? void 0 : t.className)(m);
        };
        return a2;
      }
      return M$1(k, p2(), J2(h$1), l2 == null ? void 0 : l2.class, l2 == null ? void 0 : l2.className)(m);
    }, K = () => {
      if (!(!g$1$1 || typeof g$1$1 != "object")) return Object.keys(g$1$1);
    };
    return V2.variantKeys = K(), V2.extend = e, V2.base = k, V2.slots = j2, V2.variants = g$1$1, V2.defaultVariants = w2, V2.compoundSlots = C2, V2.compoundVariants = h$1, V2;
  };
  function cn(...inputs) {
    return twMerge(clsx$1(inputs));
  }
  studyTable;
  mark_module_start();
  Button[FILENAME] = "src/lib/components/shadcn-ui/button/button.svelte";
  const buttonVariants = ce({
    base: "ring-offset-background focus-visible:ring-ring inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border-input bg-background hover:bg-accent hover:text-accent-foreground border",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline"
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10"
      }
    },
    defaultVariants: { variant: "default", size: "default" }
  });
  var root_1$7 = add_locations(/* @__PURE__ */ template(`<a><!></a>`), Button[FILENAME], [[56, 1]]);
  var root_2$q = add_locations(/* @__PURE__ */ template(`<button><!></button>`), Button[FILENAME], [[60, 1]]);
  function Button($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Button);
    validate_prop_bindings($$props, ["ref"], [], Button);
    let variant = prop($$props, "variant", 3, "default"), size2 = prop($$props, "size", 3, "default"), ref = prop($$props, "ref", 15, null), href = prop($$props, "href", 3, void 0), type = prop($$props, "type", 3, "button"), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "class",
        "variant",
        "size",
        "ref",
        "href",
        "type",
        "children"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var a2 = root_1$7();
        let attributes;
        var node_1 = child(a2);
        snippet(node_1, () => $$props.children ?? noop$1);
        bind_this(a2, ($$value) => ref($$value), () => ref());
        template_effect(() => attributes = set_attributes(a2, attributes, {
          class: cn(buttonVariants({
            variant: variant(),
            size: size2(),
            className: $$props.class
          })),
          href: href(),
          ...restProps
        }));
        append($$anchor2, a2);
      };
      var alternate = ($$anchor2) => {
        var button = root_2$q();
        let attributes_1;
        var node_2 = child(button);
        snippet(node_2, () => $$props.children ?? noop$1);
        bind_this(button, ($$value) => ref($$value), () => ref());
        template_effect(() => attributes_1 = set_attributes(button, attributes_1, {
          class: cn(buttonVariants({
            variant: variant(),
            size: size2(),
            className: $$props.class
          })),
          type: type(),
          ...restProps
        }));
        append($$anchor2, button);
      };
      if_block(node, ($$render) => {
        if (href()) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Button);
  studyTable;
  function isFunction$1(value) {
    return typeof value === "function";
  }
  function isObject(value) {
    return value !== null && typeof value === "object";
  }
  const BoxSymbol = Symbol("box");
  const isWritableSymbol = Symbol("is-writable");
  function isBox(value) {
    return isObject(value) && BoxSymbol in value;
  }
  function isWritableBox(value) {
    return box.isBox(value) && isWritableSymbol in value;
  }
  function box(initialValue) {
    let current = state(proxy(initialValue));
    return {
      [BoxSymbol]: true,
      [isWritableSymbol]: true,
      get current() {
        return get$2(current);
      },
      set current(v2) {
        set(current, proxy(v2, null, current));
      }
    };
  }
  function boxWith(getter, setter) {
    const derived$1 = /* @__PURE__ */ derived(getter);
    if (setter) {
      return {
        [BoxSymbol]: true,
        [isWritableSymbol]: true,
        get current() {
          return get$2(derived$1);
        },
        set current(v2) {
          setter(v2);
        }
      };
    }
    return {
      [BoxSymbol]: true,
      get current() {
        return getter();
      }
    };
  }
  function boxFrom(value) {
    if (box.isBox(value)) return value;
    if (isFunction$1(value)) return box.with(value);
    return box(value);
  }
  function boxFlatten(boxes) {
    return Object.entries(boxes).reduce(
      (acc, [key, b2]) => {
        if (!box.isBox(b2)) {
          return Object.assign(acc, { [key]: b2 });
        }
        if (box.isWritableBox(b2)) {
          Object.defineProperty(acc, key, {
            get() {
              return b2.current;
            },
            set(v2) {
              b2.current = v2;
            }
          });
        } else {
          Object.defineProperty(acc, key, {
            get() {
              return b2.current;
            }
          });
        }
        return acc;
      },
      {}
    );
  }
  function toReadonlyBox(b2) {
    if (!box.isWritableBox(b2)) return b2;
    return {
      [BoxSymbol]: true,
      get current() {
        return b2.current;
      }
    };
  }
  box.from = boxFrom;
  box.with = boxWith;
  box.flatten = boxFlatten;
  box.readonly = toReadonlyBox;
  box.isBox = isBox;
  box.isWritableBox = isWritableBox;
  function composeHandlers(...handlers) {
    return function(e) {
      var _a2;
      for (const handler of handlers) {
        if (!handler)
          continue;
        if (e.defaultPrevented)
          return;
        if (typeof handler === "function") {
          handler.call(this, e);
        } else {
          (_a2 = handler.current) == null ? void 0 : _a2.call(this, e);
        }
      }
    };
  }
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function getDefaultExportFromCjs(x2) {
    return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
  }
  function getAugmentedNamespace(n) {
    if (n.__esModule) return n;
    var f2 = n.default;
    if (typeof f2 == "function") {
      var a2 = function a3() {
        if (this instanceof a3) {
          return Reflect.construct(f2, arguments, this.constructor);
        }
        return f2.apply(this, arguments);
      };
      a2.prototype = f2.prototype;
    } else a2 = {};
    Object.defineProperty(a2, "__esModule", { value: true });
    Object.keys(n).forEach(function(k) {
      var d2 = Object.getOwnPropertyDescriptor(n, k);
      Object.defineProperty(a2, k, d2.get ? d2 : {
        enumerable: true,
        get: function() {
          return n[k];
        }
      });
    });
    return a2;
  }
  var cjs = {};
  var inlineStyleParser;
  var hasRequiredInlineStyleParser;
  function requireInlineStyleParser() {
    if (hasRequiredInlineStyleParser) return inlineStyleParser;
    hasRequiredInlineStyleParser = 1;
    var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
    var NEWLINE_REGEX = /\n/g;
    var WHITESPACE_REGEX = /^\s*/;
    var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
    var COLON_REGEX = /^:\s*/;
    var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
    var SEMICOLON_REGEX = /^[;\s]*/;
    var TRIM_REGEX = /^\s+|\s+$/g;
    var NEWLINE = "\n";
    var FORWARD_SLASH = "/";
    var ASTERISK = "*";
    var EMPTY_STRING = "";
    var TYPE_COMMENT = "comment";
    var TYPE_DECLARATION = "declaration";
    inlineStyleParser = function(style, options) {
      if (typeof style !== "string") {
        throw new TypeError("First argument must be a string");
      }
      if (!style) return [];
      options = options || {};
      var lineno = 1;
      var column = 1;
      function updatePosition(str) {
        var lines = str.match(NEWLINE_REGEX);
        if (lines) lineno += lines.length;
        var i2 = str.lastIndexOf(NEWLINE);
        column = ~i2 ? str.length - i2 : column + str.length;
      }
      function position() {
        var start = { line: lineno, column };
        return function(node) {
          node.position = new Position(start);
          whitespace();
          return node;
        };
      }
      function Position(start) {
        this.start = start;
        this.end = { line: lineno, column };
        this.source = options.source;
      }
      Position.prototype.content = style;
      function error(msg) {
        var err = new Error(
          options.source + ":" + lineno + ":" + column + ": " + msg
        );
        err.reason = msg;
        err.filename = options.source;
        err.line = lineno;
        err.column = column;
        err.source = style;
        if (options.silent) ;
        else {
          throw err;
        }
      }
      function match(re) {
        var m = re.exec(style);
        if (!m) return;
        var str = m[0];
        updatePosition(str);
        style = style.slice(str.length);
        return m;
      }
      function whitespace() {
        match(WHITESPACE_REGEX);
      }
      function comments(rules) {
        var c2;
        rules = rules || [];
        while (c2 = comment2()) {
          if (c2 !== false) {
            rules.push(c2);
          }
        }
        return rules;
      }
      function comment2() {
        var pos = position();
        if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;
        var i2 = 2;
        while (EMPTY_STRING != style.charAt(i2) && (ASTERISK != style.charAt(i2) || FORWARD_SLASH != style.charAt(i2 + 1))) {
          ++i2;
        }
        i2 += 2;
        if (EMPTY_STRING === style.charAt(i2 - 1)) {
          return error("End of comment missing");
        }
        var str = style.slice(2, i2 - 2);
        column += 2;
        updatePosition(str);
        style = style.slice(i2);
        column += 2;
        return pos({
          type: TYPE_COMMENT,
          comment: str
        });
      }
      function declaration() {
        var pos = position();
        var prop2 = match(PROPERTY_REGEX);
        if (!prop2) return;
        comment2();
        if (!match(COLON_REGEX)) return error("property missing ':'");
        var val = match(VALUE_REGEX);
        var ret = pos({
          type: TYPE_DECLARATION,
          property: trim(prop2[0].replace(COMMENT_REGEX, EMPTY_STRING)),
          value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING
        });
        match(SEMICOLON_REGEX);
        return ret;
      }
      function declarations() {
        var decls = [];
        comments(decls);
        var decl;
        while (decl = declaration()) {
          if (decl !== false) {
            decls.push(decl);
            comments(decls);
          }
        }
        return decls;
      }
      whitespace();
      return declarations();
    };
    function trim(str) {
      return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
    }
    return inlineStyleParser;
  }
  var hasRequiredCjs;
  function requireCjs() {
    if (hasRequiredCjs) return cjs;
    hasRequiredCjs = 1;
    var __importDefault = cjs.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(cjs, "__esModule", { value: true });
    cjs.default = StyleToObject2;
    var inline_style_parser_1 = __importDefault(requireInlineStyleParser());
    function StyleToObject2(style, iterator) {
      var styleObject = null;
      if (!style || typeof style !== "string") {
        return styleObject;
      }
      var declarations = (0, inline_style_parser_1.default)(style);
      var hasIterator = typeof iterator === "function";
      declarations.forEach(function(declaration) {
        if (declaration.type !== "declaration") {
          return;
        }
        var property = declaration.property, value = declaration.value;
        if (hasIterator) {
          iterator(property, value, declaration);
        } else if (value) {
          styleObject = styleObject || {};
          styleObject[property] = value;
        }
      });
      return styleObject;
    }
    return cjs;
  }
  var cjsExports = requireCjs();
  const StyleToObject = /* @__PURE__ */ getDefaultExportFromCjs(cjsExports);
  const parse = StyleToObject.default || StyleToObject;
  const NUMBER_CHAR_RE = /\d/;
  const STR_SPLITTERS = ["-", "_", "/", "."];
  function isUppercase(char = "") {
    if (NUMBER_CHAR_RE.test(char))
      return void 0;
    return char !== char.toLowerCase();
  }
  function splitByCase(str) {
    const parts = [];
    let buff = "";
    let previousUpper;
    let previousSplitter;
    for (const char of str) {
      const isSplitter = STR_SPLITTERS.includes(char);
      if (isSplitter === true) {
        parts.push(buff);
        buff = "";
        previousUpper = void 0;
        continue;
      }
      const isUpper = isUppercase(char);
      if (previousSplitter === false) {
        if (previousUpper === false && isUpper === true) {
          parts.push(buff);
          buff = char;
          previousUpper = isUpper;
          continue;
        }
        if (previousUpper === true && isUpper === false && buff.length > 1) {
          const lastChar = buff.at(-1);
          parts.push(buff.slice(0, Math.max(0, buff.length - 1)));
          buff = lastChar + char;
          previousUpper = isUpper;
          continue;
        }
      }
      buff += char;
      previousUpper = isUpper;
      previousSplitter = isSplitter;
    }
    parts.push(buff);
    return parts;
  }
  function pascalCase(str) {
    if (!str)
      return "";
    return splitByCase(str).map((p2) => upperFirst(p2)).join("");
  }
  function camelCase(str) {
    return lowerFirst(pascalCase(str || ""));
  }
  function upperFirst(str) {
    return str ? str[0].toUpperCase() + str.slice(1) : "";
  }
  function lowerFirst(str) {
    return str ? str[0].toLowerCase() + str.slice(1) : "";
  }
  function cssToStyleObj(css) {
    if (!css)
      return {};
    const styleObj = {};
    function iterator(name, value) {
      if (name.startsWith("-moz-") || name.startsWith("-webkit-") || name.startsWith("-ms-") || name.startsWith("-o-")) {
        styleObj[pascalCase(name)] = value;
        return;
      }
      if (name.startsWith("--")) {
        styleObj[name] = value;
        return;
      }
      styleObj[camelCase(name)] = value;
    }
    parse(css, iterator);
    return styleObj;
  }
  function executeCallbacks(...callbacks) {
    return (...args) => {
      for (const callback of callbacks) {
        if (typeof callback === "function") {
          callback(...args);
        }
      }
    };
  }
  function createParser(matcher, replacer) {
    const regex = RegExp(matcher, "g");
    return (str) => {
      if (typeof str !== "string") {
        throw new TypeError(`expected an argument of type string, but got ${typeof str}`);
      }
      if (!str.match(regex))
        return str;
      return str.replace(regex, replacer);
    };
  }
  const camelToKebab = createParser(/[A-Z]/, (match) => `-${match.toLowerCase()}`);
  function styleToCSS(styleObj) {
    if (!styleObj || typeof styleObj !== "object" || Array.isArray(styleObj)) {
      throw new TypeError(`expected an argument of type object, but got ${typeof styleObj}`);
    }
    return Object.keys(styleObj).map((property) => `${camelToKebab(property)}: ${styleObj[property]};`).join("\n");
  }
  function styleToString(style = {}) {
    return styleToCSS(style).replace("\n", " ");
  }
  const srOnlyStyles = {
    position: "absolute",
    width: "1px",
    height: "1px",
    padding: "0",
    margin: "-1px",
    overflow: "hidden",
    clip: "rect(0, 0, 0, 0)",
    whiteSpace: "nowrap",
    borderWidth: "0",
    transform: "translateX(-100%)"
  };
  const srOnlyStylesString = styleToString(srOnlyStyles);
  function isEventHandler(key) {
    var _a2;
    return key.length > 2 && key.startsWith("on") && key[2] === ((_a2 = key[2]) == null ? void 0 : _a2.toLowerCase());
  }
  function mergeProps(...args) {
    const result2 = { ...args[0] };
    for (let i2 = 1; i2 < args.length; i2++) {
      const props = args[i2];
      for (const key in props) {
        const a2 = result2[key];
        const b2 = props[key];
        const aIsFunction = typeof a2 === "function";
        const bIsFunction = typeof b2 === "function";
        if (aIsFunction && typeof bIsFunction && isEventHandler(key)) {
          const aHandler = a2;
          const bHandler = b2;
          result2[key] = composeHandlers(aHandler, bHandler);
        } else if (aIsFunction && bIsFunction) {
          result2[key] = executeCallbacks(a2, b2);
        } else if (key === "class" && typeof a2 === "string" && typeof b2 === "string") {
          result2[key] = clsx$1(a2, b2);
        } else if (key === "style") {
          const aIsObject = typeof a2 === "object";
          const bIsObject = typeof b2 === "object";
          const aIsString = typeof a2 === "string";
          const bIsString = typeof b2 === "string";
          if (aIsObject && bIsObject) {
            result2[key] = { ...a2, ...b2 };
          } else if (aIsObject && bIsString) {
            const parsedStyle = cssToStyleObj(b2);
            result2[key] = { ...a2, ...parsedStyle };
          } else if (aIsString && bIsObject) {
            const parsedStyle = cssToStyleObj(a2);
            result2[key] = { ...parsedStyle, ...b2 };
          } else if (aIsString && bIsString) {
            const parsedStyleA = cssToStyleObj(a2);
            const parsedStyleB = cssToStyleObj(b2);
            result2[key] = { ...parsedStyleA, ...parsedStyleB };
          } else if (aIsObject) {
            result2[key] = a2;
          } else if (bIsObject) {
            result2[key] = b2;
          }
        } else {
          result2[key] = b2 !== void 0 ? b2 : a2;
        }
      }
    }
    if (typeof result2.style === "object") {
      result2.style = styleToString(result2.style).replaceAll("\n", " ");
    }
    if (result2.hidden !== true) {
      result2.hidden = void 0;
    }
    if (result2.disabled !== true) {
      result2.disabled = void 0;
    }
    return result2;
  }
  function useRefById({
    id,
    ref,
    deps = () => true,
    onRefChange = () => {
    },
    getRootNode = () => strict_equals(typeof document, "undefined", false) ? document : void 0
  }) {
    const dependencies = /* @__PURE__ */ derived(() => deps());
    const rootNode = /* @__PURE__ */ derived(() => getRootNode());
    user_effect(() => {
      id.current;
      get$2(dependencies);
      get$2(rootNode);
      return untrack(() => {
        var _a2;
        const node = (_a2 = get$2(rootNode)) == null ? void 0 : _a2.getElementById(id.current);
        if (node) {
          ref.current = node;
        } else {
          ref.current = null;
        }
        onRefChange(ref.current);
      });
    });
    user_effect(() => {
      return () => {
        ref.current = null;
        onRefChange(null);
      };
    });
  }
  function onDestroyEffect(fn) {
    user_effect(() => {
      return () => {
        fn();
      };
    });
  }
  function afterSleep(ms, cb) {
    setTimeout(cb, ms);
  }
  function afterTick(fn) {
    tick().then(fn);
  }
  class Readable {
    constructor(initialValue, start) {
      __privateAdd(this, _Readable_instances);
      __privateAdd(this, _current, state());
      __privateAdd(this, _start);
      __privateAdd(this, _subscribers, 0);
      __privateAdd(this, _stop, null);
      __privateGet(this, _current).v = proxy(initialValue, null, __privateGet(this, _current));
      __privateSet(this, _start, start);
    }
    get current() {
      if (effect_tracking()) {
        user_effect(() => {
          __privateWrapper(this, _subscribers)._++;
          if (strict_equals(__privateGet(this, _subscribers), 1)) {
            __privateMethod(this, _Readable_instances, subscribe_fn).call(this, true);
          }
          return () => {
            tick().then(() => {
              __privateWrapper(this, _subscribers)._--;
              if (strict_equals(__privateGet(this, _subscribers), 0)) {
                __privateMethod(this, _Readable_instances, unsubscribe_fn).call(this);
              }
            });
          };
        });
      } else if (strict_equals(__privateGet(this, _subscribers), 0)) {
        __privateMethod(this, _Readable_instances, subscribe_fn).call(this, false);
        __privateMethod(this, _Readable_instances, unsubscribe_fn).call(this);
      }
      return get$2(__privateGet(this, _current));
    }
  }
  _current = new WeakMap();
  _start = new WeakMap();
  _subscribers = new WeakMap();
  _stop = new WeakMap();
  _Readable_instances = new WeakSet();
  subscribe_fn = function(inEffect) {
    __privateSet(this, _stop, __privateGet(this, _start).call(this, (value) => {
      set(__privateGet(this, _current), proxy(value, null, __privateGet(this, _current)));
    }, inEffect) ?? null);
  };
  unsubscribe_fn = function() {
    if (strict_equals(__privateGet(this, _stop), null)) return;
    __privateGet(this, _stop).call(this);
    __privateSet(this, _stop, null);
  };
  new Readable(null, (set2, insideEffect) => {
    function update2() {
      set2(document.activeElement);
    }
    update2();
    if (!insideEffect) return;
    document.addEventListener("focusin", update2);
    document.addEventListener("focusout", update2);
    return () => {
      document.removeEventListener("focusin", update2);
      document.removeEventListener("focusout", update2);
    };
  });
  function isFunction(value) {
    return typeof value === "function";
  }
  function get$1(value) {
    if (isFunction(value)) {
      return value();
    }
    return value;
  }
  class ElementSize {
    constructor(node, options = { box: "border-box" }) {
      __privateAdd(this, _size, state(proxy({ width: 0, height: 0 })));
      var _a2, _b2;
      __privateGet(this, _size).v = proxy(
        {
          width: ((_a2 = options.initialSize) == null ? void 0 : _a2.width) ?? 0,
          height: ((_b2 = options.initialSize) == null ? void 0 : _b2.height) ?? 0
        },
        null,
        __privateGet(this, _size)
      );
      user_effect(() => {
        const node$ = get$1(node);
        if (!node$) return;
        const observer = new ResizeObserver((entries) => {
          for (const entry of entries) {
            const boxSize = strict_equals(options.box, "content-box") ? entry.contentBoxSize : entry.borderBoxSize;
            const boxSizeArr = Array.isArray(boxSize) ? boxSize : [boxSize];
            get$2(__privateGet(this, _size)).width = boxSizeArr.reduce((acc, size2) => Math.max(acc, size2.inlineSize), 0);
            get$2(__privateGet(this, _size)).height = boxSizeArr.reduce((acc, size2) => Math.max(acc, size2.blockSize), 0);
          }
        });
        observer.observe(node$);
        return () => {
          observer.disconnect();
        };
      });
    }
    get width() {
      return get$2(__privateGet(this, _size)).width;
    }
    get height() {
      return get$2(__privateGet(this, _size)).height;
    }
  }
  _size = new WeakMap();
  function runEffect(flush, effect2) {
    switch (flush) {
      case "post":
        user_effect(effect2);
        break;
      case "pre":
        user_pre_effect(effect2);
        break;
    }
  }
  function runWatcher(sources, flush, effect2, options = {}) {
    const { lazy = false } = options;
    let active = !lazy;
    let previousValues = Array.isArray(sources) ? [] : void 0;
    runEffect(flush, () => {
      const values = Array.isArray(sources) ? sources.map((source2) => source2()) : sources();
      if (!active) {
        active = true;
        previousValues = values;
        return;
      }
      const cleanup = untrack(() => effect2(values, previousValues));
      previousValues = values;
      return cleanup;
    });
  }
  function watch(sources, effect2, options) {
    runWatcher(sources, "post", effect2, options);
  }
  function watchPre(sources, effect2, options) {
    runWatcher(sources, "pre", effect2, options);
  }
  watch.pre = watchPre;
  class Previous {
    constructor(getter) {
      __privateAdd(this, _previous, state());
      __privateAdd(this, _curr);
      user_effect(() => {
        set(__privateGet(this, _previous), proxy(__privateGet(this, _curr), null, __privateGet(this, _previous)));
        __privateSet(this, _curr, getter());
      });
    }
    get current() {
      return get$2(__privateGet(this, _previous));
    }
  }
  _previous = new WeakMap();
  _curr = new WeakMap();
  function increment(source2) {
    set(source2, source2.v + 1);
  }
  function getDataOpenClosed(condition) {
    return condition ? "open" : "closed";
  }
  function getDataChecked(condition) {
    return condition ? "checked" : "unchecked";
  }
  function getAriaDisabled(condition) {
    return condition ? "true" : "false";
  }
  function getAriaReadonly(condition) {
    return condition ? "true" : "false";
  }
  function getAriaExpanded(condition) {
    return condition ? "true" : "false";
  }
  function getDataDisabled(condition) {
    return condition ? "" : void 0;
  }
  function getAriaRequired(condition) {
    return condition ? "true" : "false";
  }
  function getAriaSelected(condition) {
    return condition ? "true" : "false";
  }
  function getAriaChecked(checked, indeterminate) {
    return checked ? "true" : "false";
  }
  function getAriaHidden(condition) {
    return condition ? "true" : void 0;
  }
  function getDataOrientation(orientation) {
    return orientation;
  }
  function getDataInvalid(condition) {
    return condition ? "" : void 0;
  }
  function getDataRequired(condition) {
    return condition ? "" : void 0;
  }
  function getDataReadonly(condition) {
    return condition ? "" : void 0;
  }
  function getDataSelected(condition) {
    return condition ? "" : void 0;
  }
  function getDataUnavailable(condition) {
    return condition ? "" : void 0;
  }
  function getDisabled(condition) {
    return condition ? true : void 0;
  }
  const ARROW_DOWN = "ArrowDown";
  const ARROW_LEFT = "ArrowLeft";
  const ARROW_RIGHT = "ArrowRight";
  const ARROW_UP = "ArrowUp";
  const ENTER = "Enter";
  const ESCAPE = "Escape";
  const SPACE = " ";
  const TAB = "Tab";
  const isBrowser = typeof document !== "undefined";
  const isIOS = getIsIOS();
  function getIsIOS() {
    var _a2, _b2;
    return isBrowser && ((_a2 = window == null ? void 0 : window.navigator) == null ? void 0 : _a2.userAgent) && // eslint-disable-next-line regexp/no-unused-capturing-group
    (/iP(ad|hone|od)/.test(window.navigator.userAgent) || // The new iPad Pro Gen3 does not identify itself as iPad, but as Macintosh.
    ((_b2 = window == null ? void 0 : window.navigator) == null ? void 0 : _b2.maxTouchPoints) > 2 && /iPad|Macintosh/.test(window == null ? void 0 : window.navigator.userAgent));
  }
  function isHTMLElement$1(element2) {
    return element2 instanceof HTMLElement;
  }
  function isElement$1(element2) {
    return element2 instanceof Element;
  }
  function isNotNull(value) {
    return value !== null;
  }
  function isSelectableInput(element2) {
    return element2 instanceof HTMLInputElement && "select" in element2;
  }
  function isElementHidden(node, stopAt) {
    if (getComputedStyle(node).visibility === "hidden")
      return true;
    while (node) {
      if (stopAt !== void 0 && node === stopAt)
        return false;
      if (getComputedStyle(node).display === "none")
        return true;
      node = node.parentElement;
    }
    return false;
  }
  function setContext(key, value) {
    return setContext$1(key, value);
  }
  function getContext(key, fallback) {
    const trueKey = typeof key === "symbol" ? key : key;
    const description = typeof key === "symbol" ? key.description : key;
    if (!hasContext(trueKey)) {
      if (fallback === void 0) {
        throw new Error(`Missing context dependency: ${description} and no fallback was provided.`);
      }
      return fallback;
    }
    return getContext$1(key);
  }
  function getSymbolDescription(providerComponentName, contextName) {
    if (contextName !== void 0)
      return contextName;
    if (typeof providerComponentName === "string" && contextName === void 0) {
      return `${providerComponentName}Context`;
    } else if (Array.isArray(providerComponentName) && contextName === void 0) {
      return `${providerComponentName[0]}Context`;
    } else {
      if (contextName !== void 0)
        return contextName;
      return `${providerComponentName}Context`;
    }
  }
  function createContext(providerComponentName, contextName, useSymbol = true) {
    const symbolDescription = getSymbolDescription(providerComponentName, contextName);
    const symbol = Symbol.for(`bits-ui.${symbolDescription}`);
    const key = symbolDescription;
    function getCtx(fallback) {
      const context = getContext(useSymbol ? symbol : key, fallback);
      if (context === void 0) {
        throw new Error(`Context \`${symbolDescription}\` not found. Component must be used within ${Array.isArray(providerComponentName) ? `one of the following components: ${providerComponentName.join(", ")}` : `\`${providerComponentName}\``}`);
      }
      if (context === null)
        return context;
      return context;
    }
    function setCtx(value) {
      if (useSymbol) {
        return setContext(symbol, value);
      } else {
        return setContext(key, value);
      }
    }
    return [setCtx, getCtx];
  }
  const ACCORDION_TRIGGER_ATTR = "data-accordion-trigger";
  const ACCORDION_CONTENT_ATTR = "data-accordion-content";
  const ACCORDION_ITEM_ATTR = "data-accordion-item";
  const ACCORDION_HEADER_ATTR = "data-accordion-header";
  class AccordionItemState {
    constructor(props) {
      __privateAdd(this, _id);
      __privateAdd(this, _ref);
      __publicField(this, "value");
      __publicField(this, "disabled");
      __publicField(this, "root");
      __privateAdd(this, _isActive, /* @__PURE__ */ derived(() => this.root.includesItem(this.value.current)));
      __privateAdd(this, _isDisabled, /* @__PURE__ */ derived(() => this.disabled.current || this.root.disabled.current));
      __privateAdd(this, _props, /* @__PURE__ */ derived(() => ({
        id: __privateGet(this, _id).current,
        "data-state": getDataOpenClosed(this.isActive),
        "data-disabled": getDataDisabled(this.isDisabled),
        "data-orientation": getDataOrientation(this.root.orientation.current),
        [ACCORDION_ITEM_ATTR]: ""
      })));
      this.value = props.value;
      this.disabled = props.disabled;
      this.root = props.rootState;
      __privateSet(this, _id, props.id);
      __privateSet(this, _ref, props.ref);
      this.updateValue = this.updateValue.bind(this);
      useRefById({
        id: __privateGet(this, _id),
        ref: __privateGet(this, _ref),
        deps: () => this.isActive
      });
    }
    get isActive() {
      return get$2(__privateGet(this, _isActive));
    }
    set isActive(_2) {
      throw new Error("Cannot update a derived property ('isActive')");
    }
    get isDisabled() {
      return get$2(__privateGet(this, _isDisabled));
    }
    set isDisabled(_2) {
      throw new Error("Cannot update a derived property ('isDisabled')");
    }
    updateValue() {
      this.root.toggleItem(this.value.current);
    }
    get props() {
      return get$2(__privateGet(this, _props));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _id = new WeakMap();
  _ref = new WeakMap();
  _isActive = new WeakMap();
  _isDisabled = new WeakMap();
  _props = new WeakMap();
  class AccordionTriggerState {
    constructor(props, itemState) {
      __privateAdd(this, _ref2);
      __privateAdd(this, _disabled);
      __privateAdd(this, _id2);
      __privateAdd(this, _root);
      __privateAdd(this, _itemState);
      __privateAdd(this, _isDisabled2, /* @__PURE__ */ derived(() => __privateGet(this, _disabled).current || __privateGet(this, _itemState).disabled.current || __privateGet(this, _root).disabled.current));
      __privateAdd(this, _props2, /* @__PURE__ */ derived(() => ({
        id: __privateGet(this, _id2).current,
        disabled: get$2(__privateGet(this, _isDisabled2)),
        "aria-expanded": getAriaExpanded(__privateGet(this, _itemState).isActive),
        "aria-disabled": getAriaDisabled(get$2(__privateGet(this, _isDisabled2))),
        "data-disabled": getDataDisabled(get$2(__privateGet(this, _isDisabled2))),
        "data-state": getDataOpenClosed(__privateGet(this, _itemState).isActive),
        "data-orientation": getDataOrientation(__privateGet(this, _root).orientation.current),
        [ACCORDION_TRIGGER_ATTR]: "",
        tabindex: 0,
        //
        onclick: this.onclick,
        onkeydown: this.onkeydown
      })));
      __privateSet(this, _disabled, props.disabled);
      __privateSet(this, _itemState, itemState);
      __privateSet(this, _root, itemState.root);
      __privateSet(this, _id2, props.id);
      __privateSet(this, _ref2, props.ref);
      this.onkeydown = this.onkeydown.bind(this);
      this.onclick = this.onclick.bind(this);
      useRefById({ id: props.id, ref: __privateGet(this, _ref2) });
    }
    onclick(e) {
      if (get$2(__privateGet(this, _isDisabled2))) return;
      if (strict_equals(e.button, 0, false)) return e.preventDefault();
      __privateGet(this, _itemState).updateValue();
    }
    onkeydown(e) {
      if (get$2(__privateGet(this, _isDisabled2))) return;
      if (strict_equals(e.key, SPACE) || strict_equals(e.key, ENTER)) {
        e.preventDefault();
        __privateGet(this, _itemState).updateValue();
        return;
      }
      __privateGet(this, _root).rovingFocusGroup.handleKeydown(__privateGet(this, _ref2).current, e);
    }
    get props() {
      return get$2(__privateGet(this, _props2));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _ref2 = new WeakMap();
  _disabled = new WeakMap();
  _id2 = new WeakMap();
  _root = new WeakMap();
  _itemState = new WeakMap();
  _isDisabled2 = new WeakMap();
  _props2 = new WeakMap();
  class AccordionContentState {
    constructor(props, item) {
      __publicField(this, "item");
      __privateAdd(this, _ref3);
      __privateAdd(this, _id3);
      __privateAdd(this, _originalStyles);
      __privateAdd(this, _isMountAnimationPrevented, false);
      __privateAdd(this, _width, state(0));
      __privateAdd(this, _height, state(0));
      __privateAdd(this, _forceMount);
      __privateAdd(this, _present, /* @__PURE__ */ derived(() => __privateGet(this, _forceMount).current || this.item.isActive));
      __privateAdd(this, _snippetProps, /* @__PURE__ */ derived(() => ({ open: this.item.isActive })));
      __privateAdd(this, _props3, /* @__PURE__ */ derived(() => ({
        id: __privateGet(this, _id3).current,
        "data-state": getDataOpenClosed(this.item.isActive),
        "data-disabled": getDataDisabled(this.item.isDisabled),
        "data-orientation": getDataOrientation(this.item.root.orientation.current),
        [ACCORDION_CONTENT_ATTR]: "",
        style: {
          "--bits-accordion-content-height": `${get$2(__privateGet(this, _height))}px`,
          "--bits-accordion-content-width": `${get$2(__privateGet(this, _width))}px`
        }
      })));
      this.item = item;
      __privateSet(this, _forceMount, props.forceMount);
      __privateSet(this, _isMountAnimationPrevented, this.item.isActive);
      __privateSet(this, _id3, props.id);
      __privateSet(this, _ref3, props.ref);
      useRefById({ id: __privateGet(this, _id3), ref: __privateGet(this, _ref3) });
      user_pre_effect(() => {
        const rAF = requestAnimationFrame(() => {
          __privateSet(this, _isMountAnimationPrevented, false);
        });
        return () => {
          cancelAnimationFrame(rAF);
        };
      });
      watch([() => this.present, () => __privateGet(this, _ref3).current], ([_2, node]) => {
        if (!node) return;
        afterTick(() => {
          if (!__privateGet(this, _ref3).current) return;
          __privateSet(this, _originalStyles, __privateGet(this, _originalStyles) || {
            transitionDuration: node.style.transitionDuration,
            animationName: node.style.animationName
          });
          node.style.transitionDuration = "0s";
          node.style.animationName = "none";
          const rect = node.getBoundingClientRect();
          set(__privateGet(this, _height), proxy(rect.height, null, __privateGet(this, _height)));
          set(__privateGet(this, _width), proxy(rect.width, null, __privateGet(this, _width)));
          if (!__privateGet(this, _isMountAnimationPrevented)) {
            const { animationName, transitionDuration } = __privateGet(this, _originalStyles);
            node.style.transitionDuration = transitionDuration;
            node.style.animationName = animationName;
          }
        });
      });
    }
    get present() {
      return get$2(__privateGet(this, _present));
    }
    set present(_2) {
      throw new Error("Cannot update a derived property ('present')");
    }
    get snippetProps() {
      return get$2(__privateGet(this, _snippetProps));
    }
    set snippetProps(_2) {
      throw new Error("Cannot update a derived property ('snippetProps')");
    }
    get props() {
      return get$2(__privateGet(this, _props3));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _ref3 = new WeakMap();
  _id3 = new WeakMap();
  _originalStyles = new WeakMap();
  _isMountAnimationPrevented = new WeakMap();
  _width = new WeakMap();
  _height = new WeakMap();
  _forceMount = new WeakMap();
  _present = new WeakMap();
  _snippetProps = new WeakMap();
  _props3 = new WeakMap();
  class AccordionHeaderState {
    constructor(props, item) {
      __privateAdd(this, _id4);
      __privateAdd(this, _ref4);
      __privateAdd(this, _level);
      __privateAdd(this, _item);
      __privateAdd(this, _props4, /* @__PURE__ */ derived(() => ({
        id: __privateGet(this, _id4).current,
        role: "heading",
        "aria-level": __privateGet(this, _level).current,
        "data-heading-level": __privateGet(this, _level).current,
        "data-state": getDataOpenClosed(__privateGet(this, _item).isActive),
        "data-orientation": getDataOrientation(__privateGet(this, _item).root.orientation.current),
        [ACCORDION_HEADER_ATTR]: ""
      })));
      __privateSet(this, _level, props.level);
      __privateSet(this, _id4, props.id);
      __privateSet(this, _ref4, props.ref);
      useRefById({ id: __privateGet(this, _id4), ref: __privateGet(this, _ref4) });
      __privateSet(this, _item, item);
    }
    get props() {
      return get$2(__privateGet(this, _props4));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _id4 = new WeakMap();
  _ref4 = new WeakMap();
  _level = new WeakMap();
  _item = new WeakMap();
  _props4 = new WeakMap();
  const [
    setAccordionRootContext,
    getAccordionRootContext
  ] = createContext("Accordion.Root");
  const [
    setAccordionItemContext,
    getAccordionItemContext
  ] = createContext("Accordion.Item");
  function useAccordionItem(props) {
    const rootState = getAccordionRootContext();
    return setAccordionItemContext(new AccordionItemState({ ...props, rootState }));
  }
  function useAccordionTrigger(props) {
    const item = getAccordionItemContext();
    return new AccordionTriggerState(props, item);
  }
  function useAccordionContent(props) {
    const item = getAccordionItemContext();
    return new AccordionContentState(props, item);
  }
  function useAccordionHeader(props) {
    const item = getAccordionItemContext();
    return new AccordionHeaderState(props, item);
  }
  globalThis.bitsIdCounter ?? (globalThis.bitsIdCounter = { current: 0 });
  function useId(prefix = "bits") {
    globalThis.bitsIdCounter.current++;
    return `${prefix}-${globalThis.bitsIdCounter.current}`;
  }
  function noop() {
  }
  mark_module_start();
  Accordion_item$1[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/accordion/components/accordion-item.svelte";
  var root_2$p = add_locations(/* @__PURE__ */ template(`<div><!></div>`), Accordion_item$1[FILENAME], [[33, 1]]);
  function Accordion_item$1($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Accordion_item$1);
    validate_prop_bindings($$props, ["ref"], [], Accordion_item$1);
    let id = prop($$props, "id", 19, useId), disabled = prop($$props, "disabled", 3, false), value = prop($$props, "value", 19, useId), ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "id",
        "disabled",
        "value",
        "children",
        "child",
        "ref"
      ],
      "restProps"
    );
    const itemState = useAccordionItem({
      value: box.with(() => value()),
      disabled: box.with(() => disabled()),
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, itemState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({ props: get$2(mergedProps) }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var div = root_2$p();
        let attributes;
        var node_2 = child(div);
        snippet(node_2, () => $$props.children ?? noop$1);
        template_effect(() => attributes = set_attributes(div, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, div);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Accordion_item$1);
  mark_module_start();
  Accordion_header[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/accordion/components/accordion-header.svelte";
  var root_2$o = add_locations(/* @__PURE__ */ template(`<div><!></div>`), Accordion_header[FILENAME], [[31, 1]]);
  function Accordion_header($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Accordion_header);
    validate_prop_bindings($$props, ["ref"], [], Accordion_header);
    let id = prop($$props, "id", 19, useId), level = prop($$props, "level", 3, 2), ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "id",
        "level",
        "children",
        "child",
        "ref"
      ],
      "restProps"
    );
    const headerState = useAccordionHeader({
      id: box.with(() => id()),
      level: box.with(() => level()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, headerState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({ props: get$2(mergedProps) }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var div = root_2$o();
        let attributes;
        var node_2 = child(div);
        snippet(node_2, () => $$props.children ?? noop$1);
        template_effect(() => attributes = set_attributes(div, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, div);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Accordion_header);
  mark_module_start();
  Accordion_trigger$1[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/accordion/components/accordion-trigger.svelte";
  var root_2$n = add_locations(/* @__PURE__ */ template(`<button><!></button>`), Accordion_trigger$1[FILENAME], [[31, 1]]);
  function Accordion_trigger$1($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Accordion_trigger$1);
    validate_prop_bindings($$props, ["ref"], [], Accordion_trigger$1);
    let disabled = prop($$props, "disabled", 3, false), ref = prop($$props, "ref", 15, null), id = prop($$props, "id", 19, useId), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "disabled",
        "ref",
        "id",
        "children",
        "child"
      ],
      "restProps"
    );
    const triggerState = useAccordionTrigger({
      disabled: box.with(() => disabled()),
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, triggerState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({ props: get$2(mergedProps) }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var button = root_2$n();
        let attributes;
        var node_2 = child(button);
        snippet(node_2, () => $$props.children ?? noop$1);
        template_effect(() => attributes = set_attributes(button, attributes, { type: "button", ...get$2(mergedProps) }));
        append($$anchor2, button);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Accordion_trigger$1);
  function useStateMachine(initialState, machine) {
    const state2 = box(initialState);
    function reducer(event2) {
      const nextState = machine[state2.current][event2];
      return nextState ?? state2.current;
    }
    const dispatch = (event2) => {
      state2.current = reducer(event2);
    };
    return { state: state2, dispatch };
  }
  function usePresence(present, id) {
    let styles = state(proxy({}));
    let prevAnimationNameState = state("none");
    const initialState = present.current ? "mounted" : "unmounted";
    let node = state(null);
    const prevPresent = new Previous(() => present.current);
    user_effect(() => {
      if (!id.current) return;
      if (!present.current) return;
      afterTick(() => {
        set(node, proxy(document.getElementById(id.current), null, node));
      });
    });
    const { state: state$1, dispatch } = useStateMachine(initialState, {
      mounted: {
        UNMOUNT: "unmounted",
        ANIMATION_OUT: "unmountSuspended"
      },
      unmountSuspended: { MOUNT: "mounted", ANIMATION_END: "unmounted" },
      unmounted: { MOUNT: "mounted" }
    });
    user_effect(() => {
      const currPresent = present.current;
      untrack(() => {
        if (!get$2(node)) {
          set(node, proxy(document.getElementById(id.current), null, node));
        }
        if (!get$2(node)) return;
        const hasPresentChanged = strict_equals(currPresent, prevPresent.current, false);
        if (!hasPresentChanged) return;
        const prevAnimationName = get$2(prevAnimationNameState);
        const currAnimationName = getAnimationName(get$2(node));
        if (currPresent) {
          dispatch("MOUNT");
        } else if (strict_equals(currAnimationName, "none") || strict_equals(get$2(styles).display, "none")) {
          dispatch("UNMOUNT");
        } else {
          const isAnimating = strict_equals(prevAnimationName, currAnimationName, false);
          if (prevPresent && isAnimating) {
            dispatch("ANIMATION_OUT");
          } else {
            dispatch("UNMOUNT");
          }
        }
      });
    });
    function handleAnimationEnd(event2) {
      if (!get$2(node)) {
        set(node, proxy(document.getElementById(id.current), null, node));
      }
      if (!get$2(node)) return;
      const currAnimationName = getAnimationName(get$2(node));
      const isCurrentAnimation = currAnimationName.includes(event2.animationName) || strict_equals(currAnimationName, "none");
      if (strict_equals(event2.target, get$2(node)) && isCurrentAnimation) {
        dispatch("ANIMATION_END");
      }
    }
    function handleAnimationStart(event2) {
      if (!get$2(node)) {
        set(node, proxy(document.getElementById(id.current), null, node));
      }
      if (!get$2(node)) return;
      if (strict_equals(event2.target, get$2(node))) {
        set(prevAnimationNameState, proxy(getAnimationName(get$2(node)), null, prevAnimationNameState));
      }
    }
    user_effect(() => {
      state$1.current;
      untrack(() => {
        if (!get$2(node)) {
          set(node, proxy(document.getElementById(id.current), null, node));
        }
        if (!get$2(node)) return;
        const currAnimationName = getAnimationName(get$2(node));
        set(prevAnimationNameState, proxy(strict_equals(state$1.current, "mounted") ? currAnimationName : "none", null, prevAnimationNameState));
      });
    });
    user_effect(() => {
      if (!get$2(node)) return;
      set(styles, proxy(getComputedStyle(get$2(node)), null, styles));
      get$2(node).addEventListener("animationstart", handleAnimationStart);
      get$2(node).addEventListener("animationcancel", handleAnimationEnd);
      get$2(node).addEventListener("animationend", handleAnimationEnd);
      return () => {
        var _a2, _b2, _c;
        (_a2 = get$2(node)) == null ? void 0 : _a2.removeEventListener("animationstart", handleAnimationStart);
        (_b2 = get$2(node)) == null ? void 0 : _b2.removeEventListener("animationcancel", handleAnimationEnd);
        (_c = get$2(node)) == null ? void 0 : _c.removeEventListener("animationend", handleAnimationEnd);
      };
    });
    const isPresentDerived = /* @__PURE__ */ derived(() => ["mounted", "unmountSuspended"].includes(state$1.current));
    return {
      get current() {
        return get$2(isPresentDerived);
      }
    };
  }
  function getAnimationName(node) {
    return node ? getComputedStyle(node).animationName || "none" : "none";
  }
  mark_module_start();
  Presence_layer[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/utilities/presence-layer/presence-layer.svelte";
  function Presence_layer($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Presence_layer);
    validate_prop_bindings($$props, [], [], Presence_layer);
    const isPresent = usePresence(box.with(() => $$props.present), box.with(() => $$props.id));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.presence ?? noop$1, () => ({ present: isPresent }));
        append($$anchor2, fragment_1);
      };
      if_block(node, ($$render) => {
        if ($$props.forceMount || $$props.present || isPresent.current) $$render(consequent);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Presence_layer);
  mark_module_start();
  Accordion_content$1[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/accordion/components/accordion-content.svelte";
  var root_3$4 = add_locations(/* @__PURE__ */ template(`<div><!></div>`), Accordion_content$1[FILENAME], [[38, 3]]);
  function Accordion_content$1($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Accordion_content$1);
    validate_prop_bindings($$props, ["ref"], [], Accordion_content$1);
    let ref = prop($$props, "ref", 15, null), id = prop($$props, "id", 19, useId), forceMount = prop($$props, "forceMount", 3, false), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "child",
        "ref",
        "id",
        "forceMount",
        "children"
      ],
      "restProps"
    );
    const contentState = useAccordionContent({
      forceMount: box.with(() => forceMount()),
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    {
      const presence = wrap_snippet(Accordion_content$1, ($$anchor2, $$arg0) => {
        let present = () => $$arg0 == null ? void 0 : $$arg0().present;
        present();
        var fragment_1 = comment();
        const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, contentState.props, {
          hidden: forceMount() ? void 0 : !present().current
        }));
        get$2(mergedProps);
        var node = first_child(fragment_1);
        {
          var consequent = ($$anchor3) => {
            var fragment_2 = comment();
            var node_1 = first_child(fragment_2);
            snippet(node_1, () => $$props.child, () => ({
              props: get$2(mergedProps),
              ...contentState.snippetProps
            }));
            append($$anchor3, fragment_2);
          };
          var alternate = ($$anchor3) => {
            var div = root_3$4();
            let attributes;
            var node_2 = child(div);
            snippet(node_2, () => $$props.children ?? noop$1);
            reset(div);
            template_effect(() => attributes = set_attributes(div, attributes, { ...get$2(mergedProps) }));
            append($$anchor3, div);
          };
          if_block(node, ($$render) => {
            if ($$props.child) $$render(consequent);
            else $$render(alternate, false);
          });
        }
        append($$anchor2, fragment_1);
      });
      Presence_layer($$anchor, {
        forceMount: true,
        get present() {
          return contentState.present;
        },
        get id() {
          return id();
        },
        presence,
        $$slots: { presence: true }
      });
    }
    return pop({ ...legacy_api() });
  }
  mark_module_end(Accordion_content$1);
  function createAttrs(variant) {
    return {
      content: `data-${variant}-content`,
      trigger: `data-${variant}-trigger`,
      overlay: `data-${variant}-overlay`,
      title: `data-${variant}-title`,
      description: `data-${variant}-description`,
      close: `data-${variant}-close`,
      cancel: `data-${variant}-cancel`,
      action: `data-${variant}-action`
    };
  }
  class DialogRootState {
    constructor(props) {
      __publicField(this, "open");
      __publicField(this, "variant");
      __privateAdd(this, _triggerNode, state(null));
      __privateAdd(this, _titleNode, state(null));
      __privateAdd(this, _contentNode, state(null));
      __privateAdd(this, _descriptionNode, state(null));
      __privateAdd(this, _contentId, state(void 0));
      __privateAdd(this, _titleId, state(void 0));
      __privateAdd(this, _triggerId, state(void 0));
      __privateAdd(this, _descriptionId, state(void 0));
      __privateAdd(this, _cancelNode, state(null));
      __privateAdd(this, _attrs, /* @__PURE__ */ derived(() => createAttrs(this.variant.current)));
      __privateAdd(this, _sharedProps, /* @__PURE__ */ derived(() => ({
        "data-state": getDataOpenClosed(this.open.current)
      })));
      this.open = props.open;
      this.variant = props.variant;
      this.handleOpen = this.handleOpen.bind(this);
      this.handleClose = this.handleClose.bind(this);
    }
    get triggerNode() {
      return get$2(__privateGet(this, _triggerNode));
    }
    set triggerNode(value) {
      set(__privateGet(this, _triggerNode), proxy(value, null, __privateGet(this, _triggerNode)));
    }
    get titleNode() {
      return get$2(__privateGet(this, _titleNode));
    }
    set titleNode(value) {
      set(__privateGet(this, _titleNode), proxy(value, null, __privateGet(this, _titleNode)));
    }
    get contentNode() {
      return get$2(__privateGet(this, _contentNode));
    }
    set contentNode(value) {
      set(__privateGet(this, _contentNode), proxy(value, null, __privateGet(this, _contentNode)));
    }
    get descriptionNode() {
      return get$2(__privateGet(this, _descriptionNode));
    }
    set descriptionNode(value) {
      set(__privateGet(this, _descriptionNode), proxy(value, null, __privateGet(this, _descriptionNode)));
    }
    get contentId() {
      return get$2(__privateGet(this, _contentId));
    }
    set contentId(value) {
      set(__privateGet(this, _contentId), proxy(value, null, __privateGet(this, _contentId)));
    }
    get titleId() {
      return get$2(__privateGet(this, _titleId));
    }
    set titleId(value) {
      set(__privateGet(this, _titleId), proxy(value, null, __privateGet(this, _titleId)));
    }
    get triggerId() {
      return get$2(__privateGet(this, _triggerId));
    }
    set triggerId(value) {
      set(__privateGet(this, _triggerId), proxy(value, null, __privateGet(this, _triggerId)));
    }
    get descriptionId() {
      return get$2(__privateGet(this, _descriptionId));
    }
    set descriptionId(value) {
      set(__privateGet(this, _descriptionId), proxy(value, null, __privateGet(this, _descriptionId)));
    }
    get cancelNode() {
      return get$2(__privateGet(this, _cancelNode));
    }
    set cancelNode(value) {
      set(__privateGet(this, _cancelNode), proxy(value, null, __privateGet(this, _cancelNode)));
    }
    get attrs() {
      return get$2(__privateGet(this, _attrs));
    }
    set attrs(_2) {
      throw new Error("Cannot update a derived property ('attrs')");
    }
    handleOpen() {
      if (this.open.current) return;
      this.open.current = true;
    }
    handleClose() {
      if (!this.open.current) return;
      this.open.current = false;
    }
    get sharedProps() {
      return get$2(__privateGet(this, _sharedProps));
    }
    set sharedProps(_2) {
      throw new Error("Cannot update a derived property ('sharedProps')");
    }
    [ADD_OWNER](owner) {
      add_owner(get$2(__privateGet(this, _triggerNode)), owner, false);
      add_owner(get$2(__privateGet(this, _titleNode)), owner, false);
      add_owner(get$2(__privateGet(this, _contentNode)), owner, false);
      add_owner(get$2(__privateGet(this, _descriptionNode)), owner, false);
      add_owner(get$2(__privateGet(this, _contentId)), owner, false);
      add_owner(get$2(__privateGet(this, _titleId)), owner, false);
      add_owner(get$2(__privateGet(this, _triggerId)), owner, false);
      add_owner(get$2(__privateGet(this, _descriptionId)), owner, false);
      add_owner(get$2(__privateGet(this, _cancelNode)), owner, false);
    }
  }
  _triggerNode = new WeakMap();
  _titleNode = new WeakMap();
  _contentNode = new WeakMap();
  _descriptionNode = new WeakMap();
  _contentId = new WeakMap();
  _titleId = new WeakMap();
  _triggerId = new WeakMap();
  _descriptionId = new WeakMap();
  _cancelNode = new WeakMap();
  _attrs = new WeakMap();
  _sharedProps = new WeakMap();
  class DialogTriggerState {
    constructor(props, root2) {
      __privateAdd(this, _id5);
      __privateAdd(this, _ref5);
      __privateAdd(this, _root2);
      __privateAdd(this, _disabled2);
      __publicField(this, "onclick", (e) => {
        if (__privateGet(this, _disabled2).current) return;
        if (e.button > 0) return;
        __privateGet(this, _root2).handleOpen();
      });
      __publicField(this, "onpointerdown", (e) => {
        if (__privateGet(this, _disabled2).current) return;
        if (e.button > 0) return;
        e.preventDefault();
      });
      __publicField(this, "onkeydown", (e) => {
        if (__privateGet(this, _disabled2).current) return;
        if (strict_equals(e.key, SPACE) || strict_equals(e.key, ENTER)) {
          e.preventDefault();
          __privateGet(this, _root2).handleOpen();
        }
      });
      __privateAdd(this, _props5, /* @__PURE__ */ derived(() => ({
        id: __privateGet(this, _id5).current,
        "aria-haspopup": "dialog",
        "aria-expanded": getAriaExpanded(__privateGet(this, _root2).open.current),
        "aria-controls": __privateGet(this, _root2).contentId,
        [__privateGet(this, _root2).attrs.trigger]: "",
        onpointerdown: this.onpointerdown,
        onkeydown: this.onkeydown,
        onclick: this.onclick,
        ...__privateGet(this, _root2).sharedProps
      })));
      __privateSet(this, _id5, props.id);
      __privateSet(this, _root2, root2);
      __privateSet(this, _ref5, props.ref);
      __privateSet(this, _disabled2, props.disabled);
      this.onclick = this.onclick.bind(this);
      this.onpointerdown = this.onpointerdown.bind(this);
      this.onkeydown = this.onkeydown.bind(this);
      useRefById({
        id: __privateGet(this, _id5),
        ref: __privateGet(this, _ref5),
        onRefChange: (node) => {
          __privateGet(this, _root2).triggerNode = node;
          __privateGet(this, _root2).triggerId = node == null ? void 0 : node.id;
        }
      });
    }
    get props() {
      return get$2(__privateGet(this, _props5));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _id5 = new WeakMap();
  _ref5 = new WeakMap();
  _root2 = new WeakMap();
  _disabled2 = new WeakMap();
  _props5 = new WeakMap();
  class DialogCloseState {
    constructor(props, root2) {
      __privateAdd(this, _id6);
      __privateAdd(this, _ref6);
      __privateAdd(this, _root3);
      __privateAdd(this, _variant);
      __privateAdd(this, _disabled3);
      __privateAdd(this, _attr, /* @__PURE__ */ derived(() => __privateGet(this, _root3).attrs[__privateGet(this, _variant).current]));
      __privateAdd(this, _props6, /* @__PURE__ */ derived(() => ({
        id: __privateGet(this, _id6).current,
        [get$2(__privateGet(this, _attr))]: "",
        onpointerdown: this.onpointerdown,
        onclick: this.onclick,
        onkeydown: this.onkeydown,
        ...__privateGet(this, _root3).sharedProps
      })));
      __privateSet(this, _root3, root2);
      __privateSet(this, _ref6, props.ref);
      __privateSet(this, _id6, props.id);
      __privateSet(this, _variant, props.variant);
      __privateSet(this, _disabled3, props.disabled);
      this.onclick = this.onclick.bind(this);
      this.onpointerdown = this.onpointerdown.bind(this);
      this.onkeydown = this.onkeydown.bind(this);
      useRefById({
        id: __privateGet(this, _id6),
        ref: __privateGet(this, _ref6),
        deps: () => __privateGet(this, _root3).open.current
      });
    }
    onclick(e) {
      if (__privateGet(this, _disabled3).current) return;
      if (e.button > 0) return;
      __privateGet(this, _root3).handleClose();
    }
    onpointerdown(e) {
      if (__privateGet(this, _disabled3).current) return;
      if (e.button > 0) return;
      e.preventDefault();
      __privateGet(this, _root3).handleClose();
    }
    onkeydown(e) {
      if (__privateGet(this, _disabled3).current) return;
      if (strict_equals(e.key, SPACE) || strict_equals(e.key, ENTER)) {
        e.preventDefault();
        __privateGet(this, _root3).handleClose();
      }
    }
    get props() {
      return get$2(__privateGet(this, _props6));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _id6 = new WeakMap();
  _ref6 = new WeakMap();
  _root3 = new WeakMap();
  _variant = new WeakMap();
  _disabled3 = new WeakMap();
  _attr = new WeakMap();
  _props6 = new WeakMap();
  class DialogTitleState {
    constructor(props, root2) {
      __privateAdd(this, _id7);
      __privateAdd(this, _ref7);
      __privateAdd(this, _root4);
      __privateAdd(this, _level2);
      __privateAdd(this, _props7, /* @__PURE__ */ derived(() => ({
        id: __privateGet(this, _id7).current,
        role: "heading",
        "aria-level": __privateGet(this, _level2).current,
        [__privateGet(this, _root4).attrs.title]: "",
        ...__privateGet(this, _root4).sharedProps
      })));
      __privateSet(this, _id7, props.id);
      __privateSet(this, _root4, root2);
      __privateSet(this, _ref7, props.ref);
      __privateSet(this, _level2, props.level);
      useRefById({
        id: __privateGet(this, _id7),
        ref: __privateGet(this, _ref7),
        onRefChange: (node) => {
          __privateGet(this, _root4).titleNode = node;
          __privateGet(this, _root4).titleId = node == null ? void 0 : node.id;
        },
        deps: () => __privateGet(this, _root4).open.current
      });
    }
    get props() {
      return get$2(__privateGet(this, _props7));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _id7 = new WeakMap();
  _ref7 = new WeakMap();
  _root4 = new WeakMap();
  _level2 = new WeakMap();
  _props7 = new WeakMap();
  class DialogDescriptionState {
    constructor(props, root2) {
      __privateAdd(this, _id8);
      __privateAdd(this, _ref8);
      __privateAdd(this, _root5);
      __privateAdd(this, _props8, /* @__PURE__ */ derived(() => ({
        id: __privateGet(this, _id8).current,
        [__privateGet(this, _root5).attrs.description]: "",
        ...__privateGet(this, _root5).sharedProps
      })));
      __privateSet(this, _id8, props.id);
      __privateSet(this, _root5, root2);
      __privateSet(this, _ref8, props.ref);
      useRefById({
        id: __privateGet(this, _id8),
        ref: __privateGet(this, _ref8),
        deps: () => __privateGet(this, _root5).open.current,
        onRefChange: (node) => {
          __privateGet(this, _root5).descriptionNode = node;
          __privateGet(this, _root5).descriptionId = node == null ? void 0 : node.id;
        }
      });
    }
    get props() {
      return get$2(__privateGet(this, _props8));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _id8 = new WeakMap();
  _ref8 = new WeakMap();
  _root5 = new WeakMap();
  _props8 = new WeakMap();
  class DialogContentState {
    constructor(props, root2) {
      __privateAdd(this, _id9);
      __privateAdd(this, _ref9);
      __publicField(this, "root");
      __privateAdd(this, _snippetProps2, /* @__PURE__ */ derived(() => ({ open: this.root.open.current })));
      __privateAdd(this, _props9, /* @__PURE__ */ derived(() => ({
        id: __privateGet(this, _id9).current,
        role: strict_equals(this.root.variant.current, "alert-dialog") ? "alertdialog" : "dialog",
        "aria-describedby": this.root.descriptionId,
        "aria-labelledby": this.root.titleId,
        [this.root.attrs.content]: "",
        style: { pointerEvents: "auto" },
        ...this.root.sharedProps
      })));
      __privateSet(this, _id9, props.id);
      this.root = root2;
      __privateSet(this, _ref9, props.ref);
      useRefById({
        id: __privateGet(this, _id9),
        ref: __privateGet(this, _ref9),
        deps: () => this.root.open.current,
        onRefChange: (node) => {
          this.root.contentNode = node;
          this.root.contentId = node == null ? void 0 : node.id;
        }
      });
    }
    get snippetProps() {
      return get$2(__privateGet(this, _snippetProps2));
    }
    set snippetProps(_2) {
      throw new Error("Cannot update a derived property ('snippetProps')");
    }
    get props() {
      return get$2(__privateGet(this, _props9));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _id9 = new WeakMap();
  _ref9 = new WeakMap();
  _snippetProps2 = new WeakMap();
  _props9 = new WeakMap();
  class DialogOverlayState {
    constructor(props, root2) {
      __privateAdd(this, _id10);
      __privateAdd(this, _ref10);
      __publicField(this, "root");
      __privateAdd(this, _snippetProps3, /* @__PURE__ */ derived(() => ({ open: this.root.open.current })));
      __privateAdd(this, _props10, /* @__PURE__ */ derived(() => ({
        id: __privateGet(this, _id10).current,
        [this.root.attrs.overlay]: "",
        style: { pointerEvents: "auto" },
        ...this.root.sharedProps
      })));
      __privateSet(this, _id10, props.id);
      __privateSet(this, _ref10, props.ref);
      this.root = root2;
      useRefById({
        id: __privateGet(this, _id10),
        ref: __privateGet(this, _ref10),
        deps: () => this.root.open.current
      });
    }
    get snippetProps() {
      return get$2(__privateGet(this, _snippetProps3));
    }
    set snippetProps(_2) {
      throw new Error("Cannot update a derived property ('snippetProps')");
    }
    get props() {
      return get$2(__privateGet(this, _props10));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _id10 = new WeakMap();
  _ref10 = new WeakMap();
  _snippetProps3 = new WeakMap();
  _props10 = new WeakMap();
  const [setDialogRootContext, getDialogRootContext] = createContext("Dialog.Root");
  function useDialogRoot(props) {
    return setDialogRootContext(new DialogRootState(props));
  }
  function useDialogTrigger(props) {
    const root2 = getDialogRootContext();
    return new DialogTriggerState(props, root2);
  }
  function useDialogTitle(props) {
    return new DialogTitleState(props, getDialogRootContext());
  }
  function useDialogContent(props) {
    return new DialogContentState(props, getDialogRootContext());
  }
  function useDialogOverlay(props) {
    return new DialogOverlayState(props, getDialogRootContext());
  }
  function useDialogDescription(props) {
    return new DialogDescriptionState(props, getDialogRootContext());
  }
  function useDialogClose(props) {
    return new DialogCloseState(props, getDialogRootContext());
  }
  mark_module_start();
  Dialog_title$1[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/dialog/components/dialog-title.svelte";
  var root_2$m = add_locations(/* @__PURE__ */ template(`<div><!></div>`), Dialog_title$1[FILENAME], [[31, 1]]);
  function Dialog_title$1($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Dialog_title$1);
    validate_prop_bindings($$props, ["ref"], [], Dialog_title$1);
    let id = prop($$props, "id", 19, useId), ref = prop($$props, "ref", 15, null), level = prop($$props, "level", 3, 2), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "id",
        "ref",
        "child",
        "children",
        "level"
      ],
      "restProps"
    );
    const titleState = useDialogTitle({
      id: box.with(() => id()),
      level: box.with(() => level()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, titleState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({ props: get$2(mergedProps) }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var div = root_2$m();
        let attributes;
        var node_2 = child(div);
        snippet(node_2, () => $$props.children ?? noop$1);
        template_effect(() => attributes = set_attributes(div, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, div);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Dialog_title$1);
  mark_module_start();
  Portal_consumer[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/utilities/portal/portal-consumer.svelte";
  function Portal_consumer($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Portal_consumer);
    validate_prop_bindings($$props, [], [], Portal_consumer);
    var fragment = comment();
    var node = first_child(fragment);
    key_block(node, () => $$props.children, ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      snippet(node_1, () => $$props.children ?? noop$1);
      append($$anchor2, fragment_1);
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Portal_consumer);
  mark_module_start();
  Portal$1[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/utilities/portal/portal.svelte";
  function Portal$1($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Portal$1);
    validate_prop_bindings($$props, [], [], Portal$1);
    let to = prop($$props, "to", 3, "body");
    const context = getAllContexts();
    let target = /* @__PURE__ */ derived(getTarget);
    function getTarget() {
      if (!isBrowser || $$props.disabled) return null;
      let localTarget = null;
      if (strict_equals(typeof to(), "string")) {
        localTarget = document.querySelector(to());
        if (strict_equals(localTarget, null)) {
          {
            throw new Error(`Target element "${to()}" not found.`);
          }
        }
      } else if (to() instanceof HTMLElement || to() instanceof DocumentFragment) {
        localTarget = to();
      } else {
        {
          throw new TypeError(`Unknown portal target type: ${strict_equals(to(), null) ? "null" : typeof to()}. Allowed types: string (query selector), HTMLElement, or DocumentFragment.`);
        }
      }
      return localTarget;
    }
    let instance;
    user_effect(() => {
      if (!get$2(target) || $$props.disabled) {
        if (instance) {
          unmount(instance);
          instance = null;
        }
        return;
      }
      untrack(() => instance = mount(Portal_consumer, {
        target: get$2(target),
        props: { children: $$props.children },
        context
      }));
      return () => {
        if (instance) {
          unmount(instance);
          instance = null;
        }
      };
    });
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.children ?? noop$1);
        append($$anchor2, fragment_1);
      };
      if_block(node, ($$render) => {
        if ($$props.disabled) $$render(consequent);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Portal$1);
  function addEventListener$1(target, event2, handler, options) {
    const events = Array.isArray(event2) ? event2 : [event2];
    events.forEach((_event) => target.addEventListener(_event, handler, options));
    return () => {
      events.forEach((_event) => target.removeEventListener(_event, handler, options));
    };
  }
  function debounce(fn, wait = 500) {
    let timeout = null;
    const debounced = (...args) => {
      if (timeout !== null) {
        clearTimeout(timeout);
      }
      timeout = setTimeout(() => {
        fn(...args);
      }, wait);
    };
    debounced.destroy = () => {
      if (timeout !== null) {
        clearTimeout(timeout);
        timeout = null;
      }
    };
    return debounced;
  }
  function isOrContainsTarget(node, target) {
    return node === target || node.contains(target);
  }
  function getOwnerDocument(el) {
    return (el == null ? void 0 : el.ownerDocument) ?? document;
  }
  globalThis.bitsDismissableLayers ?? (globalThis.bitsDismissableLayers = /* @__PURE__ */ new Map());
  class DismissibleLayerState {
    constructor(props) {
      __privateAdd(this, _DismissibleLayerState_instances);
      __privateAdd(this, _interactOutsideProp);
      __privateAdd(this, _behaviorType);
      __privateAdd(this, _interceptedEvents, { pointerdown: false });
      __privateAdd(this, _isResponsibleLayer, false);
      __publicField(this, "node", box(null));
      __privateAdd(this, _documentObj);
      __privateAdd(this, _enabled);
      __privateAdd(this, _isFocusInsideDOMTree, state(false));
      __privateAdd(this, _onFocusOutside);
      __privateAdd(this, _currNode, state(null));
      __privateAdd(this, _isValidEventProp);
      __privateAdd(this, _unsubClickListener, noop);
      __privateAdd(this, _handleFocus, (event2) => {
        if (event2.defaultPrevented) return;
        if (!this.currNode) return;
        afterTick(() => {
          var _a2, _b2;
          if (!this.currNode || __privateGet(this, _isTargetWithinLayer).call(this, event2.target)) return;
          if (event2.target && !get$2(__privateGet(this, _isFocusInsideDOMTree))) {
            (_b2 = (_a2 = __privateGet(this, _onFocusOutside)).current) == null ? void 0 : _b2.call(_a2, event2);
          }
        });
      });
      __privateAdd(this, _handleDismiss, (e) => {
        let event2 = e;
        if (event2.defaultPrevented) {
          event2 = createWrappedEvent(e);
        }
        __privateGet(this, _interactOutsideProp).current(e);
      });
      __privateAdd(this, _handleInteractOutside, debounce(
        (e) => {
          if (!this.currNode) {
            __privateGet(this, _unsubClickListener).call(this);
            return;
          }
          const isEventValid = __privateGet(this, _isValidEventProp).current(e, this.currNode) || isValidEvent(e, this.currNode);
          if (!__privateGet(this, _isResponsibleLayer) || __privateMethod(this, _DismissibleLayerState_instances, isAnyEventIntercepted_fn).call(this) || !isEventValid) {
            __privateGet(this, _unsubClickListener).call(this);
            return;
          }
          let event2 = e;
          if (event2.defaultPrevented) {
            event2 = createWrappedEvent(event2);
          }
          if (strict_equals(__privateGet(this, _behaviorType).current, "close", false) && strict_equals(__privateGet(this, _behaviorType).current, "defer-otherwise-close", false)) {
            __privateGet(this, _unsubClickListener).call(this);
            return;
          }
          if (strict_equals(e.pointerType, "touch")) {
            __privateGet(this, _unsubClickListener).call(this);
            __privateSet(this, _unsubClickListener, addEventListener$1(__privateGet(this, _documentObj), "click", __privateGet(this, _handleDismiss), { once: true }));
          } else {
            __privateGet(this, _interactOutsideProp).current(event2);
          }
        },
        10
      ));
      __privateAdd(this, _markInterceptedEvent, (e) => {
        __privateGet(this, _interceptedEvents)[e.type] = true;
      });
      __privateAdd(this, _markNonInterceptedEvent, (e) => {
        __privateGet(this, _interceptedEvents)[e.type] = false;
      });
      __privateAdd(this, _markResponsibleLayer, () => {
        if (!this.node.current) return;
        __privateSet(this, _isResponsibleLayer, isResponsibleLayer(this.node.current));
      });
      __privateAdd(this, _isTargetWithinLayer, (target) => {
        if (!this.node.current) return false;
        return isOrContainsTarget(this.node.current, target);
      });
      __privateAdd(this, _resetState, debounce(
        () => {
          for (const eventType in __privateGet(this, _interceptedEvents)) {
            __privateGet(this, _interceptedEvents)[eventType] = false;
          }
          __privateSet(this, _isResponsibleLayer, false);
        },
        20
      ));
      __privateAdd(this, _onfocuscapture, () => {
        set(__privateGet(this, _isFocusInsideDOMTree), true);
      });
      __privateAdd(this, _onblurcapture, () => {
        set(__privateGet(this, _isFocusInsideDOMTree), false);
      });
      __publicField(this, "props", {
        onfocuscapture: __privateGet(this, _onfocuscapture),
        onblurcapture: __privateGet(this, _onblurcapture)
      });
      __privateSet(this, _enabled, props.enabled);
      __privateSet(this, _isValidEventProp, props.isValidEvent);
      useRefById({
        id: props.id,
        ref: this.node,
        deps: () => __privateGet(this, _enabled).current,
        onRefChange: (node) => {
          this.currNode = node;
        }
      });
      __privateSet(this, _behaviorType, props.interactOutsideBehavior);
      __privateSet(this, _interactOutsideProp, props.onInteractOutside);
      __privateSet(this, _onFocusOutside, props.onFocusOutside);
      user_effect(() => {
        __privateSet(this, _documentObj, getOwnerDocument(this.currNode));
      });
      let unsubEvents = noop;
      const cleanup = () => {
        __privateGet(this, _resetState).call(this);
        globalThis.bitsDismissableLayers.delete(this);
        __privateGet(this, _handleInteractOutside).destroy();
        unsubEvents();
      };
      user_effect(() => {
        if (__privateGet(this, _enabled).current && this.currNode) {
          afterSleep(1, () => {
            if (!this.currNode) return;
            globalThis.bitsDismissableLayers.set(this, untrack(() => __privateGet(this, _behaviorType)));
            unsubEvents();
            unsubEvents = __privateMethod(this, _DismissibleLayerState_instances, addEventListeners_fn).call(this);
          });
        }
        return () => {
          cleanup();
        };
      });
      onDestroyEffect(() => {
        __privateGet(this, _resetState).destroy();
        globalThis.bitsDismissableLayers.delete(this);
        __privateGet(this, _handleInteractOutside).destroy();
        __privateGet(this, _unsubClickListener).call(this);
        unsubEvents();
      });
    }
    get currNode() {
      return get$2(__privateGet(this, _currNode));
    }
    set currNode(value) {
      set(__privateGet(this, _currNode), proxy(value, null, __privateGet(this, _currNode)));
    }
    [ADD_OWNER](owner) {
      add_owner(get$2(__privateGet(this, _currNode)), owner, false);
    }
  }
  _interactOutsideProp = new WeakMap();
  _behaviorType = new WeakMap();
  _interceptedEvents = new WeakMap();
  _isResponsibleLayer = new WeakMap();
  _documentObj = new WeakMap();
  _enabled = new WeakMap();
  _isFocusInsideDOMTree = new WeakMap();
  _onFocusOutside = new WeakMap();
  _currNode = new WeakMap();
  _isValidEventProp = new WeakMap();
  _unsubClickListener = new WeakMap();
  _handleFocus = new WeakMap();
  _DismissibleLayerState_instances = new WeakSet();
  addEventListeners_fn = function() {
    return executeCallbacks(
      /**
      * CAPTURE INTERACTION START
      * mark interaction-start event as intercepted.
      * mark responsible layer during interaction start
      * to avoid checking if is responsible layer during interaction end
      * when a new floating element may have been opened.
      */
      addEventListener$1(__privateGet(this, _documentObj), "pointerdown", executeCallbacks(__privateGet(this, _markInterceptedEvent), __privateGet(this, _markResponsibleLayer)), true),
      /**
      * BUBBLE INTERACTION START
      * Mark interaction-start event as non-intercepted. Debounce `onInteractOutsideStart`
      * to avoid prematurely checking if other events were intercepted.
      */
      addEventListener$1(__privateGet(this, _documentObj), "pointerdown", executeCallbacks(__privateGet(this, _markNonInterceptedEvent), __privateGet(this, _handleInteractOutside))),
      /**
      * HANDLE FOCUS OUTSIDE
      */
      addEventListener$1(__privateGet(this, _documentObj), "focusin", __privateGet(this, _handleFocus))
    );
  };
  _handleDismiss = new WeakMap();
  _handleInteractOutside = new WeakMap();
  _markInterceptedEvent = new WeakMap();
  _markNonInterceptedEvent = new WeakMap();
  _markResponsibleLayer = new WeakMap();
  _isTargetWithinLayer = new WeakMap();
  _resetState = new WeakMap();
  isAnyEventIntercepted_fn = function() {
    const i2 = Object.values(__privateGet(this, _interceptedEvents)).some(Boolean);
    return i2;
  };
  _onfocuscapture = new WeakMap();
  _onblurcapture = new WeakMap();
  function useDismissibleLayer(props) {
    return new DismissibleLayerState(props);
  }
  function getTopMostLayer(layersArr) {
    return layersArr.findLast(([_2, { current: behaviorType }]) => strict_equals(behaviorType, "close") || strict_equals(behaviorType, "ignore"));
  }
  function isResponsibleLayer(node) {
    const layersArr = [...globalThis.bitsDismissableLayers];
    const topMostLayer = getTopMostLayer(layersArr);
    if (topMostLayer) return strict_equals(topMostLayer[0].node.current, node);
    const [firstLayerNode] = layersArr[0];
    return strict_equals(firstLayerNode.node.current, node);
  }
  function isValidEvent(e, node) {
    if ("button" in e && e.button > 0) return false;
    const target = e.target;
    if (!isElement$1(target)) return false;
    const ownerDocument = getOwnerDocument(target);
    const isValid = ownerDocument.documentElement.contains(target) && !isOrContainsTarget(node, target);
    return isValid;
  }
  function createWrappedEvent(e) {
    const capturedCurrentTarget = e.currentTarget;
    const capturedTarget = e.target;
    let newEvent;
    if (e instanceof PointerEvent) {
      newEvent = new PointerEvent(e.type, e);
    } else {
      newEvent = new PointerEvent("pointerdown", e);
    }
    let isPrevented = false;
    const wrappedEvent = new Proxy(newEvent, {
      get: (target, prop2) => {
        if (strict_equals(prop2, "currentTarget")) {
          return capturedCurrentTarget;
        }
        if (strict_equals(prop2, "target")) {
          return capturedTarget;
        }
        if (strict_equals(prop2, "preventDefault")) {
          return () => {
            isPrevented = true;
            if (strict_equals(typeof target.preventDefault, "function")) {
              target.preventDefault();
            }
          };
        }
        if (strict_equals(prop2, "defaultPrevented")) {
          return isPrevented;
        }
        if (prop2 in target) {
          return target[prop2];
        }
        return e[prop2];
      }
    });
    return wrappedEvent;
  }
  mark_module_start();
  Dismissible_layer[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/utilities/dismissible-layer/dismissible-layer.svelte";
  function Dismissible_layer($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Dismissible_layer);
    validate_prop_bindings($$props, [], [], Dismissible_layer);
    let interactOutsideBehavior = prop($$props, "interactOutsideBehavior", 3, "close"), onInteractOutside = prop($$props, "onInteractOutside", 3, noop), onFocusOutside = prop($$props, "onFocusOutside", 3, noop), isValidEvent2 = prop($$props, "isValidEvent", 3, () => false);
    const dismissibleLayerState = useDismissibleLayer({
      id: box.with(() => $$props.id),
      interactOutsideBehavior: box.with(() => interactOutsideBehavior()),
      onInteractOutside: box.with(() => onInteractOutside()),
      enabled: box.with(() => $$props.enabled),
      onFocusOutside: box.with(() => onFocusOutside()),
      isValidEvent: box.with(() => isValidEvent2())
    });
    var fragment = comment();
    var node = first_child(fragment);
    snippet(node, () => $$props.children ?? noop$1, () => ({ props: dismissibleLayerState.props }));
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Dismissible_layer);
  globalThis.bitsEscapeLayers ?? (globalThis.bitsEscapeLayers = /* @__PURE__ */ new Map());
  class EscapeLayerState {
    constructor(props) {
      __privateAdd(this, _onEscapeProp);
      __privateAdd(this, _behaviorType2);
      __privateAdd(this, _enabled2);
      __privateAdd(this, _addEventListener, () => {
        return addEventListener$1(document, "keydown", __privateGet(this, _onkeydown), { passive: false });
      });
      __privateAdd(this, _onkeydown, (e) => {
        if (strict_equals(e.key, ESCAPE, false) || !isResponsibleEscapeLayer(this)) return;
        const clonedEvent = new KeyboardEvent(e.type, e);
        e.preventDefault();
        const behaviorType = __privateGet(this, _behaviorType2).current;
        if (strict_equals(behaviorType, "close", false) && strict_equals(behaviorType, "defer-otherwise-close", false)) return;
        __privateGet(this, _onEscapeProp).current(clonedEvent);
      });
      __privateSet(this, _behaviorType2, props.escapeKeydownBehavior);
      __privateSet(this, _onEscapeProp, props.onEscapeKeydown);
      __privateSet(this, _enabled2, props.enabled);
      let unsubEvents = noop;
      user_effect(() => {
        if (__privateGet(this, _enabled2).current) {
          globalThis.bitsEscapeLayers.set(this, untrack(() => __privateGet(this, _behaviorType2)));
          unsubEvents = __privateGet(this, _addEventListener).call(this);
        }
        return () => {
          unsubEvents();
          globalThis.bitsEscapeLayers.delete(this);
        };
      });
    }
  }
  _onEscapeProp = new WeakMap();
  _behaviorType2 = new WeakMap();
  _enabled2 = new WeakMap();
  _addEventListener = new WeakMap();
  _onkeydown = new WeakMap();
  function useEscapeLayer(props) {
    return new EscapeLayerState(props);
  }
  function isResponsibleEscapeLayer(instance) {
    const layersArr = [...globalThis.bitsEscapeLayers];
    const topMostLayer = layersArr.findLast(([_2, { current: behaviorType }]) => strict_equals(behaviorType, "close") || strict_equals(behaviorType, "ignore"));
    if (topMostLayer) return strict_equals(topMostLayer[0], instance);
    const [firstLayerNode] = layersArr[0];
    return strict_equals(firstLayerNode, instance);
  }
  mark_module_start();
  Escape_layer[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/utilities/escape-layer/escape-layer.svelte";
  function Escape_layer($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Escape_layer);
    validate_prop_bindings($$props, [], [], Escape_layer);
    let escapeKeydownBehavior = prop($$props, "escapeKeydownBehavior", 3, "close"), onEscapeKeydown = prop($$props, "onEscapeKeydown", 3, noop);
    useEscapeLayer({
      escapeKeydownBehavior: box.with(() => escapeKeydownBehavior()),
      onEscapeKeydown: box.with(() => onEscapeKeydown()),
      enabled: box.with(() => $$props.enabled)
    });
    var fragment = comment();
    var node = first_child(fragment);
    snippet(node, () => $$props.children ?? noop$1);
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Escape_layer);
  const focusStack = box([]);
  function createFocusScopeStack() {
    const stack2 = focusStack;
    return {
      add(focusScope) {
        const activeFocusScope = stack2.current[0];
        if (strict_equals(focusScope.id, activeFocusScope == null ? void 0 : activeFocusScope.id, false)) {
          activeFocusScope == null ? void 0 : activeFocusScope.pause();
        }
        stack2.current = removeFromFocusScopeArray(stack2.current, focusScope);
        stack2.current.unshift(focusScope);
      },
      remove(focusScope) {
        var _a2;
        stack2.current = removeFromFocusScopeArray(stack2.current, focusScope);
        (_a2 = stack2.current[0]) == null ? void 0 : _a2.resume();
      }
    };
  }
  function createFocusScopeAPI() {
    let paused = state(false);
    return {
      id: useId(),
      get paused() {
        return get$2(paused);
      },
      pause() {
        set(paused, true);
      },
      resume() {
        set(paused, false);
      }
    };
  }
  function removeFromFocusScopeArray(arr, item) {
    return [...arr].filter((i2) => strict_equals(i2.id, item.id, false));
  }
  function removeLinks(items) {
    return items.filter((item) => strict_equals(item.tagName, "A", false));
  }
  function focus(element2, { select = false } = {}) {
    if (!(element2 && element2.focus))
      return;
    const previouslyFocusedElement = document.activeElement;
    element2.focus({ preventScroll: true });
    if (element2 !== previouslyFocusedElement && isSelectableInput(element2) && select) {
      element2.select();
    }
  }
  function focusFirst(candidates, { select = false } = {}) {
    const previouslyFocusedElement = document.activeElement;
    for (const candidate of candidates) {
      focus(candidate, { select });
      if (document.activeElement !== previouslyFocusedElement) {
        return true;
      }
    }
  }
  function findVisible(elements, container) {
    for (const element2 of elements) {
      if (!isElementHidden(element2, container))
        return element2;
    }
  }
  function getTabbableCandidates(container) {
    const nodes = [];
    const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
      // eslint-disable-next-line ts/no-explicit-any
      acceptNode: (node) => {
        const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
        if (node.disabled || node.hidden || isHiddenInput)
          return NodeFilter.FILTER_SKIP;
        return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
      }
    });
    while (walker.nextNode())
      nodes.push(walker.currentNode);
    return nodes;
  }
  function getTabbableEdges(container) {
    const candidates = getTabbableCandidates(container);
    const first = findVisible(candidates, container);
    const last = findVisible(candidates.reverse(), container);
    return [first, last];
  }
  const AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount";
  const AUTOFOCUS_ON_DESTROY = "focusScope.autoFocusOnDestroy";
  const EVENT_OPTIONS = { bubbles: false, cancelable: true };
  function useFocusScope({
    id,
    loop,
    enabled,
    onOpenAutoFocus,
    onCloseAutoFocus,
    forceMount
  }) {
    const focusScopeStack = createFocusScopeStack();
    const focusScope = createFocusScopeAPI();
    const ref = box(null);
    useRefById({ id, ref, deps: () => enabled.current });
    let lastFocusedElement = state(null);
    user_effect(() => {
      const container = ref.current;
      if (!container) return;
      if (!enabled.current) return;
      function handleFocusIn(event2) {
        if (focusScope.paused || !container) return;
        const target = event2.target;
        if (!isHTMLElement$1(target)) return;
        if (container.contains(target)) {
          set(lastFocusedElement, proxy(target, null, lastFocusedElement));
        } else {
          focus(get$2(lastFocusedElement), { select: true });
        }
      }
      function handleFocusOut(event2) {
        if (focusScope.paused || !container) return;
        const relatedTarget = event2.relatedTarget;
        if (!isHTMLElement$1(relatedTarget)) return;
        if (strict_equals(relatedTarget, null)) return;
        if (!container.contains(relatedTarget)) focus(get$2(lastFocusedElement), { select: true });
      }
      function handleMutations(_2) {
        const lastFocusedElementExists = container == null ? void 0 : container.contains(get$2(lastFocusedElement));
        if (!lastFocusedElementExists) {
          focus(container);
        }
      }
      return untrack(() => {
        const unsubEvents = executeCallbacks(addEventListener$1(document, "focusin", handleFocusIn), addEventListener$1(document, "focusout", handleFocusOut));
        const mutationObserver = new MutationObserver(handleMutations);
        mutationObserver.observe(container, { childList: true, subtree: true });
        return () => {
          unsubEvents();
          mutationObserver.disconnect();
        };
      });
    });
    user_effect(() => {
      if (forceMount.current) return;
      let container = ref.current;
      const previouslyFocusedElement = document.activeElement;
      untrack(() => {
        handleMount(container, previouslyFocusedElement);
      });
      return () => {
        if (!container) return;
        handleDestroy(previouslyFocusedElement);
      };
    });
    user_effect(() => {
      if (!forceMount.current) return;
      enabled.current;
      const container = ref.current;
      const previouslyFocusedElement = document.activeElement;
      untrack(() => {
        handleMount(container, previouslyFocusedElement);
      });
      return () => {
        if (!container) return;
        handleDestroy(previouslyFocusedElement);
      };
    });
    function handleMount(container, prevFocusedElement) {
      if (!container) container = document.getElementById(id.current);
      if (!container) return;
      focusScopeStack.add(focusScope);
      const hasFocusedCandidate = container.contains(prevFocusedElement);
      if (!hasFocusedCandidate) {
        const mountEvent = new CustomEvent(AUTOFOCUS_ON_MOUNT, EVENT_OPTIONS);
        onOpenAutoFocus.current(mountEvent);
        if (!mountEvent.defaultPrevented) {
          afterTick(() => {
            if (!container) return;
            focusFirst(removeLinks(getTabbableCandidates(container)), { select: true });
            if (strict_equals(document.activeElement, prevFocusedElement)) {
              focus(container);
            }
          });
        }
      }
    }
    function handleDestroy(prevFocusedElement) {
      const destroyEvent = new CustomEvent(AUTOFOCUS_ON_DESTROY, EVENT_OPTIONS);
      onCloseAutoFocus.current(destroyEvent);
      setTimeout(
        () => {
          if (!destroyEvent.defaultPrevented && prevFocusedElement) {
            focus(prevFocusedElement ?? document.body, { select: true });
          }
          focusScopeStack.remove(focusScope);
        },
        0
      );
    }
    function handleKeydown(e) {
      if (!enabled.current) return;
      if (!loop.current && !enabled.current) return;
      if (focusScope.paused) return;
      const isTabKey = strict_equals(e.key, TAB) && !e.ctrlKey && !e.altKey && !e.metaKey;
      const focusedElement = document.activeElement;
      if (!(isTabKey && focusedElement)) return;
      const container = ref.current;
      if (!container) return;
      const [first, last] = getTabbableEdges(container);
      const hasTabbableElementsInside = first && last;
      if (!hasTabbableElementsInside) {
        if (strict_equals(focusedElement, container)) {
          e.preventDefault();
        }
      } else {
        if (!e.shiftKey && strict_equals(focusedElement, last)) {
          e.preventDefault();
          if (loop.current) focus(first, { select: true });
        } else if (e.shiftKey && strict_equals(focusedElement, first)) {
          e.preventDefault();
          if (loop.current) focus(last, { select: true });
        }
      }
    }
    const props = /* @__PURE__ */ derived(() => ({
      id: id.current,
      tabindex: -1,
      onkeydown: handleKeydown
    }));
    return {
      get props() {
        return get$2(props);
      }
    };
  }
  mark_module_start();
  Focus_scope[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/utilities/focus-scope/focus-scope.svelte";
  function Focus_scope($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Focus_scope);
    validate_prop_bindings($$props, [], [], Focus_scope);
    let trapFocus = prop($$props, "trapFocus", 3, false), loop = prop($$props, "loop", 3, false), onCloseAutoFocus = prop($$props, "onCloseAutoFocus", 3, noop), onOpenAutoFocus = prop($$props, "onOpenAutoFocus", 3, noop), forceMount = prop($$props, "forceMount", 3, false);
    const focusScopeState = useFocusScope({
      enabled: box.with(() => trapFocus()),
      loop: box.with(() => loop()),
      onCloseAutoFocus: box.with(() => onCloseAutoFocus()),
      onOpenAutoFocus: box.with(() => onOpenAutoFocus()),
      id: box.with(() => $$props.id),
      forceMount: box.with(() => forceMount())
    });
    var fragment = comment();
    var node = first_child(fragment);
    snippet(node, () => $$props.focusScope ?? noop$1, () => ({ props: focusScopeState.props }));
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Focus_scope);
  globalThis.bitsTextSelectionLayers ?? (globalThis.bitsTextSelectionLayers = /* @__PURE__ */ new Map());
  class TextSelectionLayerState {
    constructor(props) {
      __privateAdd(this, _TextSelectionLayerState_instances);
      __privateAdd(this, _id11);
      __privateAdd(this, _onPointerDownProp);
      __privateAdd(this, _onPointerUpProp);
      __privateAdd(this, _enabled3);
      __privateAdd(this, _unsubSelectionLock, noop);
      __privateAdd(this, _ref11, box(null));
      __privateAdd(this, _pointerdown, (e) => {
        const node = __privateGet(this, _ref11).current;
        const target = e.target;
        if (!isHTMLElement$1(node) || !isHTMLElement$1(target) || !__privateGet(this, _enabled3).current) return;
        if (!isHighestLayer(this) || !isOrContainsTarget(node, target)) return;
        __privateGet(this, _onPointerDownProp).current(e);
        if (e.defaultPrevented) return;
        __privateSet(this, _unsubSelectionLock, preventTextSelectionOverflow(node));
      });
      __privateAdd(this, _resetSelectionLock, () => {
        __privateGet(this, _unsubSelectionLock).call(this);
        __privateSet(this, _unsubSelectionLock, noop);
      });
      __privateSet(this, _id11, props.id);
      __privateSet(this, _enabled3, props.preventOverflowTextSelection);
      __privateSet(this, _onPointerDownProp, props.onPointerDown);
      __privateSet(this, _onPointerUpProp, props.onPointerUp);
      useRefById({
        id: __privateGet(this, _id11),
        ref: __privateGet(this, _ref11),
        deps: () => __privateGet(this, _enabled3).current
      });
      let unsubEvents = noop;
      user_effect(() => {
        if (__privateGet(this, _enabled3).current) {
          globalThis.bitsTextSelectionLayers.set(this, untrack(() => __privateGet(this, _enabled3)));
          unsubEvents = __privateMethod(this, _TextSelectionLayerState_instances, addEventListeners_fn2).call(this);
        }
        return () => {
          unsubEvents();
          __privateGet(this, _resetSelectionLock).call(this);
          globalThis.bitsTextSelectionLayers.delete(this);
        };
      });
    }
  }
  _id11 = new WeakMap();
  _onPointerDownProp = new WeakMap();
  _onPointerUpProp = new WeakMap();
  _enabled3 = new WeakMap();
  _unsubSelectionLock = new WeakMap();
  _ref11 = new WeakMap();
  _TextSelectionLayerState_instances = new WeakSet();
  addEventListeners_fn2 = function() {
    return executeCallbacks(addEventListener$1(document, "pointerdown", __privateGet(this, _pointerdown)), addEventListener$1(document, "pointerup", composeHandlers(__privateGet(this, _resetSelectionLock), __privateGet(this, _onPointerUpProp))));
  };
  _pointerdown = new WeakMap();
  _resetSelectionLock = new WeakMap();
  function useTextSelectionLayer(props) {
    return new TextSelectionLayerState(props);
  }
  const getUserSelect = (node) => node.style.userSelect || node.style.webkitUserSelect;
  function preventTextSelectionOverflow(node) {
    const body = document.body;
    const originalBodyUserSelect = getUserSelect(body);
    const originalNodeUserSelect = getUserSelect(node);
    setUserSelect(body, "none");
    setUserSelect(node, "text");
    return () => {
      setUserSelect(body, originalBodyUserSelect);
      setUserSelect(node, originalNodeUserSelect);
    };
  }
  function setUserSelect(node, value) {
    node.style.userSelect = value;
    node.style.webkitUserSelect = value;
  }
  function isHighestLayer(instance) {
    const layersArr = [...globalThis.bitsTextSelectionLayers];
    if (!layersArr.length) return false;
    const highestLayer = layersArr.at(-1);
    if (!highestLayer) return false;
    return strict_equals(highestLayer[0], instance);
  }
  mark_module_start();
  Text_selection_layer[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/utilities/text-selection-layer/text-selection-layer.svelte";
  function Text_selection_layer($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Text_selection_layer);
    validate_prop_bindings($$props, [], [], Text_selection_layer);
    let preventOverflowTextSelection = prop($$props, "preventOverflowTextSelection", 3, true), onPointerDown = prop($$props, "onPointerDown", 3, noop), onPointerUp = prop($$props, "onPointerUp", 3, noop);
    useTextSelectionLayer({
      id: box.with(() => $$props.id),
      preventOverflowTextSelection: box.with(() => preventOverflowTextSelection()),
      onPointerDown: box.with(() => onPointerDown()),
      onPointerUp: box.with(() => onPointerUp()),
      enabled: box.with(() => $$props.enabled)
    });
    var fragment = comment();
    var node = first_child(fragment);
    snippet(node, () => $$props.children ?? noop$1);
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Text_selection_layer);
  const _SvelteMap = class _SvelteMap extends Map {
    /**
     * @param {Iterable<readonly [K, V]> | null | undefined} [value]
     */
    constructor(value) {
      super();
      __privateAdd(this, _SvelteMap_instances);
      /** @type {Map<K, Source<number>>} */
      __privateAdd(this, _sources, /* @__PURE__ */ new Map());
      __privateAdd(this, _version, source(0));
      __privateAdd(this, _size2, source(0));
      value = new Map(value);
      if (value) {
        for (var [key, v2] of value) {
          super.set(key, v2);
        }
        __privateGet(this, _size2).v = super.size;
      }
    }
    /** @param {K} key */
    has(key) {
      var sources = __privateGet(this, _sources);
      var s = sources.get(key);
      if (s === void 0) {
        var ret = super.get(key);
        if (ret !== void 0) {
          s = source(0);
          sources.set(key, s);
        } else {
          get$2(__privateGet(this, _version));
          return false;
        }
      }
      get$2(s);
      return true;
    }
    /**
     * @param {(value: V, key: K, map: Map<K, V>) => void} callbackfn
     * @param {any} [this_arg]
     */
    forEach(callbackfn, this_arg) {
      __privateMethod(this, _SvelteMap_instances, read_all_fn).call(this);
      super.forEach(callbackfn, this_arg);
    }
    /** @param {K} key */
    get(key) {
      var sources = __privateGet(this, _sources);
      var s = sources.get(key);
      if (s === void 0) {
        var ret = super.get(key);
        if (ret !== void 0) {
          s = source(0);
          sources.set(key, s);
        } else {
          get$2(__privateGet(this, _version));
          return void 0;
        }
      }
      get$2(s);
      return super.get(key);
    }
    /**
     * @param {K} key
     * @param {V} value
     * */
    set(key, value) {
      var _a2;
      var sources = __privateGet(this, _sources);
      var s = sources.get(key);
      var prev_res = super.get(key);
      var res = super.set(key, value);
      var version = __privateGet(this, _version);
      if (s === void 0) {
        sources.set(key, source(0));
        set(__privateGet(this, _size2), super.size);
        increment(version);
      } else if (prev_res !== value) {
        increment(s);
        var v_reactions = version.reactions === null ? null : new Set(version.reactions);
        var needs_version_increase = v_reactions === null || !((_a2 = s.reactions) == null ? void 0 : _a2.every(
          (r2) => (
            /** @type {NonNullable<typeof v_reactions>} */
            v_reactions.has(r2)
          )
        ));
        if (needs_version_increase) {
          increment(version);
        }
      }
      return res;
    }
    /** @param {K} key */
    delete(key) {
      var sources = __privateGet(this, _sources);
      var s = sources.get(key);
      var res = super.delete(key);
      if (s !== void 0) {
        sources.delete(key);
        set(__privateGet(this, _size2), super.size);
        set(s, -1);
        increment(__privateGet(this, _version));
      }
      return res;
    }
    clear() {
      if (super.size === 0) {
        return;
      }
      super.clear();
      var sources = __privateGet(this, _sources);
      set(__privateGet(this, _size2), 0);
      for (var s of sources.values()) {
        set(s, -1);
      }
      increment(__privateGet(this, _version));
      sources.clear();
    }
    keys() {
      get$2(__privateGet(this, _version));
      return super.keys();
    }
    values() {
      __privateMethod(this, _SvelteMap_instances, read_all_fn).call(this);
      return super.values();
    }
    entries() {
      __privateMethod(this, _SvelteMap_instances, read_all_fn).call(this);
      return super.entries();
    }
    [Symbol.iterator]() {
      return this.entries();
    }
    get size() {
      get$2(__privateGet(this, _size2));
      return super.size;
    }
  };
  _sources = new WeakMap();
  _version = new WeakMap();
  _size2 = new WeakMap();
  _SvelteMap_instances = new WeakSet();
  read_all_fn = function() {
    get$2(__privateGet(this, _version));
    var sources = __privateGet(this, _sources);
    if (__privateGet(this, _size2).v !== sources.size) {
      for (var key of __superGet(_SvelteMap.prototype, this, "keys").call(this)) {
        if (!sources.has(key)) {
          sources.set(key, source(0));
        }
      }
    }
    for (var [, s] of __privateGet(this, _sources)) {
      get$2(s);
    }
  };
  let SvelteMap = _SvelteMap;
  function createSharedHook(factory) {
    let subscribers = 0;
    let state$1 = state(void 0);
    let scope;
    function dispose() {
      subscribers -= 1;
      if (scope && subscribers <= 0) {
        scope();
        set(state$1, void 0);
        scope = void 0;
      }
    }
    return (...args) => {
      subscribers += 1;
      if (strict_equals(get$2(state$1), void 0)) {
        scope = effect_root(() => {
          set(state$1, proxy(factory(...args), null, state$1));
        });
      }
      user_effect(() => {
        return () => {
          dispose();
        };
      });
      return get$2(state$1);
    };
  }
  const useBodyLockStackCount = createSharedHook(() => {
    const map = new SvelteMap();
    const locked = /* @__PURE__ */ derived(() => {
      for (const value of map.values()) {
        if (value) {
          return true;
        }
      }
      return false;
    });
    let initialBodyStyle = proxy({});
    let stopTouchMoveListener = null;
    function resetBodyStyle() {
      if (!isBrowser) return;
      document.body.style.paddingRight = initialBodyStyle.paddingRight ?? "";
      document.body.style.marginRight = initialBodyStyle.marginRight ?? "";
      document.body.style.pointerEvents = initialBodyStyle.pointerEvents ?? "";
      document.body.style.removeProperty("--scrollbar-width");
      document.body.style.overflow = initialBodyStyle.overflow ?? "";
      isIOS && (stopTouchMoveListener == null ? void 0 : stopTouchMoveListener());
    }
    user_effect(() => {
      const curr = get$2(locked);
      return untrack(() => {
        if (!curr) {
          return;
        }
        const bodyStyle = getComputedStyle(document.body);
        initialBodyStyle.overflow = bodyStyle.overflow;
        initialBodyStyle.paddingRight = bodyStyle.paddingRight;
        initialBodyStyle.marginRight = bodyStyle.marginRight;
        initialBodyStyle.pointerEvents = bodyStyle.pointerEvents;
        const verticalScrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
        const paddingRight = Number.parseInt(initialBodyStyle.paddingRight ?? "0", 10);
        const config = {
          padding: paddingRight + verticalScrollbarWidth,
          margin: Number.parseInt(initialBodyStyle.marginRight ?? "0", 10)
        };
        if (verticalScrollbarWidth > 0) {
          document.body.style.paddingRight = `${config.padding}px`;
          document.body.style.marginRight = `${config.margin}px`;
          document.body.style.setProperty("--scrollbar-width", `${verticalScrollbarWidth}px`);
          document.body.style.overflow = "hidden";
        }
        if (isIOS) {
          stopTouchMoveListener = addEventListener$1(
            document,
            "touchmove",
            (e) => {
              if (strict_equals(e.target, document.documentElement, false)) return;
              if (e.touches.length > 1) return;
              e.preventDefault();
            },
            { passive: false }
          );
        }
        afterTick(() => {
          document.body.style.pointerEvents = "none";
          document.body.style.overflow = "hidden";
        });
      });
    });
    user_effect(() => {
      return () => {
        stopTouchMoveListener == null ? void 0 : stopTouchMoveListener();
      };
    });
    return {
      get map() {
        return map;
      },
      resetBodyStyle
    };
  });
  function useBodyScrollLock(initialState, restoreScrollDelay = () => null) {
    const id = useId();
    const countState = useBodyLockStackCount();
    const _restoreScrollDelay = /* @__PURE__ */ derived(restoreScrollDelay);
    countState.map.set(id, initialState ?? false);
    const locked = box.with(() => countState.map.get(id) ?? false, (v2) => countState.map.set(id, v2));
    user_effect(() => {
      return () => {
        countState.map.delete(id);
        if (isAnyLocked(countState.map)) return;
        if (strict_equals(get$2(_restoreScrollDelay), null)) {
          requestAnimationFrame(() => countState.resetBodyStyle());
        } else {
          afterSleep(get$2(_restoreScrollDelay), () => countState.resetBodyStyle());
        }
      };
    });
    return locked;
  }
  function isAnyLocked(map) {
    for (const [_2, value] of map) {
      if (value) return true;
    }
    return false;
  }
  mark_module_start();
  Scroll_lock[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/utilities/scroll-lock/scroll-lock.svelte";
  function Scroll_lock($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Scroll_lock);
    validate_prop_bindings($$props, [], [], Scroll_lock);
    let preventScroll = prop($$props, "preventScroll", 3, true), restoreScrollDelay = prop($$props, "restoreScrollDelay", 3, null);
    useBodyScrollLock(preventScroll(), () => restoreScrollDelay());
    return pop({ ...legacy_api() });
  }
  mark_module_end(Scroll_lock);
  function shouldTrapFocus({ forceMount, present, trapFocus, open: open2 }) {
    if (forceMount) {
      return open2 && trapFocus;
    }
    return present && trapFocus && open2;
  }
  mark_module_start();
  Dialog_overlay$1[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/dialog/components/dialog-overlay.svelte";
  var root_3$3 = add_locations(/* @__PURE__ */ template(`<div><!></div>`), Dialog_overlay$1[FILENAME], [[33, 3]]);
  function Dialog_overlay$1($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Dialog_overlay$1);
    validate_prop_bindings($$props, ["ref"], [], Dialog_overlay$1);
    let id = prop($$props, "id", 19, useId), forceMount = prop($$props, "forceMount", 3, false), ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "id",
        "forceMount",
        "child",
        "children",
        "ref"
      ],
      "restProps"
    );
    const overlayState = useDialogOverlay({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, overlayState.props));
    var present = /* @__PURE__ */ derived(() => overlayState.root.open.current || forceMount());
    {
      const presence = wrap_snippet(Dialog_overlay$1, ($$anchor2) => {
        var fragment_1 = comment();
        var node = first_child(fragment_1);
        {
          var consequent = ($$anchor3) => {
            var fragment_2 = comment();
            var node_1 = first_child(fragment_2);
            var render_arg = /* @__PURE__ */ derived_safe_equal(() => ({
              props: mergeProps(get$2(mergedProps)),
              ...overlayState.snippetProps
            }));
            snippet(node_1, () => $$props.child, () => get$2(render_arg));
            append($$anchor3, fragment_2);
          };
          var alternate = ($$anchor3) => {
            var div = root_3$3();
            const spread_with_call = /* @__PURE__ */ derived(() => mergeProps(get$2(mergedProps)));
            let attributes;
            var node_2 = child(div);
            snippet(node_2, () => $$props.children ?? noop$1, () => overlayState.snippetProps);
            reset(div);
            template_effect(() => attributes = set_attributes(div, attributes, { ...get$2(spread_with_call) }));
            append($$anchor3, div);
          };
          if_block(node, ($$render) => {
            if ($$props.child) $$render(consequent);
            else $$render(alternate, false);
          });
        }
        append($$anchor2, fragment_1);
      });
      Presence_layer($$anchor, {
        get id() {
          return id();
        },
        get present() {
          return get$2(present);
        },
        presence,
        $$slots: { presence: true }
      });
    }
    return pop({ ...legacy_api() });
  }
  mark_module_end(Dialog_overlay$1);
  mark_module_start();
  Dialog_trigger[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/dialog/components/dialog-trigger.svelte";
  var root_2$l = add_locations(/* @__PURE__ */ template(`<button><!></button>`), Dialog_trigger[FILENAME], [[31, 1]]);
  function Dialog_trigger($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Dialog_trigger);
    validate_prop_bindings($$props, ["ref"], [], Dialog_trigger);
    let id = prop($$props, "id", 19, useId), ref = prop($$props, "ref", 15, null), disabled = prop($$props, "disabled", 3, false), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "id",
        "ref",
        "children",
        "child",
        "disabled"
      ],
      "restProps"
    );
    const triggerState = useDialogTrigger({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2)),
      disabled: box.with(() => Boolean(disabled()))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, triggerState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({ props: get$2(mergedProps) }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var button = root_2$l();
        let attributes;
        var node_2 = child(button);
        snippet(node_2, () => $$props.children ?? noop$1);
        template_effect(() => attributes = set_attributes(button, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, button);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Dialog_trigger);
  mark_module_start();
  Dialog_description$1[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/dialog/components/dialog-description.svelte";
  var root_2$k = add_locations(/* @__PURE__ */ template(`<div><!></div>`), Dialog_description$1[FILENAME], [[29, 1]]);
  function Dialog_description$1($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Dialog_description$1);
    validate_prop_bindings($$props, ["ref"], [], Dialog_description$1);
    let id = prop($$props, "id", 19, useId), ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "id",
        "children",
        "child",
        "ref"
      ],
      "restProps"
    );
    const descriptionState = useDialogDescription({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, descriptionState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({ props: get$2(mergedProps) }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var div = root_2$k();
        let attributes;
        var node_2 = child(div);
        snippet(node_2, () => $$props.children ?? noop$1);
        template_effect(() => attributes = set_attributes(div, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, div);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Dialog_description$1);
  function initAnnouncer() {
    if (!isBrowser)
      return null;
    let el = document.querySelector("[data-bits-announcer]");
    if (!isHTMLElement$1(el)) {
      const div = document.createElement("div");
      div.style.cssText = srOnlyStylesString;
      div.setAttribute("data-bits-announcer", "");
      div.appendChild(createLog("assertive"));
      div.appendChild(createLog("polite"));
      el = div;
      document.body.insertBefore(el, document.body.firstChild);
    }
    function createLog(kind) {
      const log = document.createElement("div");
      log.role = "log";
      log.ariaLive = kind;
      log.setAttribute("aria-relevant", "additions");
      return log;
    }
    function getLog(kind) {
      if (!isHTMLElement$1(el))
        return null;
      const log = el.querySelector(`[aria-live="${kind}"]`);
      if (!isHTMLElement$1(log))
        return null;
      return log;
    }
    return {
      getLog
    };
  }
  function getAnnouncer() {
    const announcer = initAnnouncer();
    function announce(value, kind = "assertive", timeout = 7500) {
      if (!announcer || !isBrowser)
        return;
      const log = announcer.getLog(kind);
      const content = document.createElement("div");
      if (typeof value === "number") {
        value = value.toString();
      } else if (value === null) {
        value = "Empty";
      } else {
        value = value.trim();
      }
      content.innerText = value;
      if (kind === "assertive") {
        log == null ? void 0 : log.replaceChildren(content);
      } else {
        log == null ? void 0 : log.appendChild(content);
      }
      return setTimeout(() => {
        content.remove();
      }, timeout);
    }
    return {
      announce
    };
  }
  const defaultDateDefaults = {
    defaultValue: void 0,
    defaultPlaceholder: void 0,
    granularity: "day"
  };
  function getDefaultDate(props) {
    const withDefaults = { ...defaultDateDefaults, ...props };
    const { defaultValue, defaultPlaceholder, granularity } = withDefaults;
    if (Array.isArray(defaultValue) && defaultValue.length) {
      return defaultValue[defaultValue.length - 1];
    }
    if (defaultValue && !Array.isArray(defaultValue)) {
      return defaultValue;
    } else if (defaultPlaceholder) {
      return defaultPlaceholder;
    } else {
      const date = /* @__PURE__ */ new Date();
      const year = date.getFullYear();
      const month = date.getMonth() + 1;
      const day = date.getDate();
      const calendarDateTimeGranularities = ["hour", "minute", "second"];
      if (calendarDateTimeGranularities.includes(granularity ?? "day")) {
        return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(year, month, day, 0, 0, 0);
      }
      return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(year, month, day);
    }
  }
  function parseStringToDateValue(dateStr, referenceVal) {
    let dateValue;
    if (referenceVal instanceof $35ea8db9cb2ccb90$export$d3b7288e7994edea) {
      dateValue = $fae977aafc393c5c$export$fd7893f06e92a6a4(dateStr);
    } else if (referenceVal instanceof $35ea8db9cb2ccb90$export$ca871e8dbb80966f) {
      dateValue = $fae977aafc393c5c$export$588937bcd60ade55(dateStr);
    } else {
      dateValue = $fae977aafc393c5c$export$6b862160d295c8e(dateStr);
    }
    return dateValue.calendar !== referenceVal.calendar ? $11d87f3f76e88657$export$b4a036af3fc0b032(dateValue, referenceVal.calendar) : dateValue;
  }
  function toDate(dateValue, tz = $14e0f24ef4ac5c92$export$aa8b41735afcabd2()) {
    if (dateValue instanceof $35ea8db9cb2ccb90$export$d3b7288e7994edea) {
      return dateValue.toDate();
    } else {
      return dateValue.toDate(tz);
    }
  }
  function isCalendarDateTime(dateValue) {
    return dateValue instanceof $35ea8db9cb2ccb90$export$ca871e8dbb80966f;
  }
  function isZonedDateTime(dateValue) {
    return dateValue instanceof $35ea8db9cb2ccb90$export$d3b7288e7994edea;
  }
  function hasTime(dateValue) {
    return isCalendarDateTime(dateValue) || isZonedDateTime(dateValue);
  }
  function getDaysInMonth(date) {
    if (date instanceof Date) {
      const year = date.getFullYear();
      const month = date.getMonth() + 1;
      return new Date(year, month, 0).getDate();
    } else {
      return date.set({ day: 100 }).day;
    }
  }
  function isBefore(dateToCompare, referenceDate) {
    return dateToCompare.compare(referenceDate) < 0;
  }
  function isAfter(dateToCompare, referenceDate) {
    return dateToCompare.compare(referenceDate) > 0;
  }
  function isBeforeOrSame(dateToCompare, referenceDate) {
    return dateToCompare.compare(referenceDate) <= 0;
  }
  function isAfterOrSame(dateToCompare, referenceDate) {
    return dateToCompare.compare(referenceDate) >= 0;
  }
  function isBetweenInclusive(date, start, end) {
    return isAfterOrSame(date, start) && isBeforeOrSame(date, end);
  }
  function getLastFirstDayOfWeek(date, firstDayOfWeek, locale) {
    const day = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);
    if (firstDayOfWeek > day) {
      return date.subtract({ days: day + 7 - firstDayOfWeek });
    }
    if (firstDayOfWeek === day) {
      return date;
    }
    return date.subtract({ days: day - firstDayOfWeek });
  }
  function getNextLastDayOfWeek(date, firstDayOfWeek, locale) {
    const day = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);
    const lastDayOfWeek = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;
    if (day === lastDayOfWeek) {
      return date;
    }
    if (day > lastDayOfWeek) {
      return date.add({ days: 7 - day + lastDayOfWeek });
    }
    return date.add({ days: lastDayOfWeek - day });
  }
  function areAllDaysBetweenValid(start, end, isUnavailable, isDisabled) {
    if (isUnavailable === void 0 && isDisabled === void 0) {
      return true;
    }
    let dCurrent = start.add({ days: 1 });
    if ((isDisabled == null ? void 0 : isDisabled(dCurrent)) || (isUnavailable == null ? void 0 : isUnavailable(dCurrent))) {
      return false;
    }
    const dEnd = end;
    while (dCurrent.compare(dEnd) < 0) {
      dCurrent = dCurrent.add({ days: 1 });
      if ((isDisabled == null ? void 0 : isDisabled(dCurrent)) || (isUnavailable == null ? void 0 : isUnavailable(dCurrent))) {
        return false;
      }
    }
    return true;
  }
  const defaultPartOptions = {
    year: "numeric",
    month: "numeric",
    day: "numeric",
    hour: "numeric",
    minute: "numeric",
    second: "numeric"
  };
  function createFormatter(initialLocale) {
    let locale = initialLocale;
    function setLocale(newLocale) {
      locale = newLocale;
    }
    function getLocale() {
      return locale;
    }
    function custom(date, options) {
      return new $fb18d541ea1ad717$export$ad991b66133851cf(locale, options).format(date);
    }
    function selectedDate(date, includeTime = true) {
      if (hasTime(date) && includeTime) {
        return custom(toDate(date), {
          dateStyle: "long",
          timeStyle: "long"
        });
      } else {
        return custom(toDate(date), {
          dateStyle: "long"
        });
      }
    }
    function fullMonthAndYear(date) {
      return new $fb18d541ea1ad717$export$ad991b66133851cf(locale, { month: "long", year: "numeric" }).format(date);
    }
    function fullMonth(date) {
      return new $fb18d541ea1ad717$export$ad991b66133851cf(locale, { month: "long" }).format(date);
    }
    function fullYear(date) {
      return new $fb18d541ea1ad717$export$ad991b66133851cf(locale, { year: "numeric" }).format(date);
    }
    function toParts(date, options) {
      if (isZonedDateTime(date)) {
        return new $fb18d541ea1ad717$export$ad991b66133851cf(locale, {
          ...options,
          timeZone: date.timeZone
        }).formatToParts(toDate(date));
      } else {
        return new $fb18d541ea1ad717$export$ad991b66133851cf(locale, options).formatToParts(toDate(date));
      }
    }
    function dayOfWeek(date, length = "narrow") {
      return new $fb18d541ea1ad717$export$ad991b66133851cf(locale, { weekday: length }).format(date);
    }
    function dayPeriod(date, hourCycle = void 0) {
      var _a2;
      const parts = new $fb18d541ea1ad717$export$ad991b66133851cf(locale, {
        hour: "numeric",
        minute: "numeric",
        hourCycle: hourCycle === 24 ? "h23" : void 0
      }).formatToParts(date);
      const value = (_a2 = parts.find((p2) => p2.type === "dayPeriod")) == null ? void 0 : _a2.value;
      if (value === "PM") {
        return "PM";
      }
      return "AM";
    }
    function part(dateObj, type, options = {}) {
      const opts = { ...defaultPartOptions, ...options };
      const parts = toParts(dateObj, opts);
      const part2 = parts.find((p2) => p2.type === type);
      return part2 ? part2.value : "";
    }
    return {
      setLocale,
      getLocale,
      fullMonth,
      fullYear,
      fullMonthAndYear,
      toParts,
      custom,
      part,
      dayPeriod,
      selectedDate,
      dayOfWeek
    };
  }
  function chunk(arr, size2) {
    const result2 = [];
    for (let i2 = 0; i2 < arr.length; i2 += size2) {
      result2.push(arr.slice(i2, i2 + size2));
    }
    return result2;
  }
  function isValidIndex(index2, arr) {
    return index2 >= 0 && index2 < arr.length;
  }
  function isCalendarDayNode(node) {
    if (!isHTMLElement$1(node)) return false;
    if (!node.hasAttribute("data-bits-day")) return false;
    return true;
  }
  function getDaysBetween(start, end) {
    const days = [];
    let dCurrent = start.add({ days: 1 });
    const dEnd = end;
    while (dCurrent.compare(dEnd) < 0) {
      days.push(dCurrent);
      dCurrent = dCurrent.add({ days: 1 });
    }
    return days;
  }
  function createMonth(props) {
    const { dateObj, weekStartsOn, fixedWeeks, locale } = props;
    const daysInMonth = getDaysInMonth(dateObj);
    const datesArray = Array.from({ length: daysInMonth }, (_2, i2) => dateObj.set({ day: i2 + 1 }));
    const firstDayOfMonth = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(dateObj);
    const lastDayOfMonth = $14e0f24ef4ac5c92$export$a2258d9c4118825c(dateObj);
    const lastSunday = getLastFirstDayOfWeek(firstDayOfMonth, weekStartsOn, locale);
    const nextSaturday = getNextLastDayOfWeek(lastDayOfMonth, weekStartsOn, locale);
    const lastMonthDays = getDaysBetween(lastSunday.subtract({ days: 1 }), firstDayOfMonth);
    const nextMonthDays = getDaysBetween(lastDayOfMonth, nextSaturday.add({ days: 1 }));
    const totalDays = lastMonthDays.length + datesArray.length + nextMonthDays.length;
    if (fixedWeeks && totalDays < 42) {
      const extraDays = 42 - totalDays;
      let startFrom = nextMonthDays[nextMonthDays.length - 1];
      if (!startFrom) {
        startFrom = dateObj.add({ months: 1 }).set({ day: 1 });
      }
      let length = extraDays;
      if (strict_equals(nextMonthDays.length, 0)) {
        length = extraDays - 1;
        nextMonthDays.push(startFrom);
      }
      const extraDaysArray = Array.from({ length }, (_2, i2) => {
        const incr = i2 + 1;
        return startFrom.add({ days: incr });
      });
      nextMonthDays.push(...extraDaysArray);
    }
    const allDays = lastMonthDays.concat(datesArray, nextMonthDays);
    const weeks = chunk(allDays, 7);
    return { value: dateObj, dates: allDays, weeks };
  }
  function createMonths(props) {
    const { numberOfMonths, dateObj, ...monthProps } = props;
    const months = [];
    if (!numberOfMonths || strict_equals(numberOfMonths, 1)) {
      months.push(createMonth({ ...monthProps, dateObj }));
      return months;
    }
    months.push(createMonth({ ...monthProps, dateObj }));
    for (let i2 = 1; i2 < numberOfMonths; i2++) {
      const nextMonth = dateObj.add({ months: i2 });
      months.push(createMonth({ ...monthProps, dateObj: nextMonth }));
    }
    return months;
  }
  function getSelectableCells(calendarNode) {
    if (!calendarNode) return [];
    const selectableSelector = `[data-bits-day]:not([data-disabled]):not([data-outside-visible-months])`;
    return Array.from(calendarNode.querySelectorAll(selectableSelector)).filter((el) => isHTMLElement$1(el));
  }
  function setPlaceholderToNodeValue(node, placeholder) {
    const cellValue = node.getAttribute("data-value");
    if (!cellValue) return;
    placeholder.current = parseStringToDateValue(cellValue, placeholder.current);
  }
  function shiftCalendarFocus({
    node,
    add,
    placeholder,
    calendarNode,
    isPrevButtonDisabled,
    isNextButtonDisabled,
    months,
    numberOfMonths
  }) {
    var _a2, _b2;
    const candidateCells = getSelectableCells(calendarNode);
    if (!candidateCells.length) return;
    const index2 = candidateCells.indexOf(node);
    const nextIndex = index2 + add;
    if (isValidIndex(nextIndex, candidateCells)) {
      const nextCell = candidateCells[nextIndex];
      setPlaceholderToNodeValue(nextCell, placeholder);
      return nextCell.focus();
    }
    if (nextIndex < 0) {
      if (isPrevButtonDisabled) return;
      const firstMonth = (_a2 = months[0]) == null ? void 0 : _a2.value;
      if (!firstMonth) return;
      placeholder.current = firstMonth.subtract({ months: numberOfMonths });
      afterTick(() => {
        const newCandidateCells = getSelectableCells(calendarNode);
        if (!newCandidateCells.length) return;
        const newIndex = newCandidateCells.length - Math.abs(nextIndex);
        if (isValidIndex(newIndex, newCandidateCells)) {
          const newCell = newCandidateCells[newIndex];
          setPlaceholderToNodeValue(newCell, placeholder);
          return newCell.focus();
        }
      });
    }
    if (nextIndex >= candidateCells.length) {
      if (isNextButtonDisabled) return;
      const firstMonth = (_b2 = months[0]) == null ? void 0 : _b2.value;
      if (!firstMonth) return;
      placeholder.current = firstMonth.add({ months: numberOfMonths });
      afterTick(() => {
        const newCandidateCells = getSelectableCells(calendarNode);
        if (!newCandidateCells.length) return;
        const newIndex = nextIndex - candidateCells.length;
        if (isValidIndex(newIndex, newCandidateCells)) {
          const nextCell = newCandidateCells[newIndex];
          return nextCell.focus();
        }
      });
    }
  }
  const ARROW_KEYS = [
    ARROW_DOWN,
    ARROW_UP,
    ARROW_LEFT,
    ARROW_RIGHT
  ];
  const SELECT_KEYS = [ENTER, SPACE];
  function handleCalendarKeydown({
    event: event2,
    handleCellClick,
    shiftFocus,
    placeholderValue
  }) {
    const currentCell = event2.target;
    if (!isCalendarDayNode(currentCell)) return;
    if (!ARROW_KEYS.includes(event2.key) && !SELECT_KEYS.includes(event2.key)) return;
    event2.preventDefault();
    const kbdFocusMap = {
      [ARROW_DOWN]: 7,
      [ARROW_UP]: -7,
      [ARROW_LEFT]: -1,
      [ARROW_RIGHT]: 1
    };
    if (ARROW_KEYS.includes(event2.key)) {
      const add = kbdFocusMap[event2.key];
      if (strict_equals(add, void 0, false)) {
        shiftFocus(currentCell, add);
      }
    }
    if (SELECT_KEYS.includes(event2.key)) {
      const cellValue = currentCell.getAttribute("data-value");
      if (!cellValue) return;
      handleCellClick(event2, parseStringToDateValue(cellValue, placeholderValue));
    }
  }
  function handleCalendarNextPage({
    months,
    setMonths,
    numberOfMonths,
    pagedNavigation,
    weekStartsOn,
    locale,
    fixedWeeks,
    setPlaceholder
  }) {
    var _a2;
    const firstMonth = (_a2 = months[0]) == null ? void 0 : _a2.value;
    if (!firstMonth) return;
    if (pagedNavigation) {
      setPlaceholder(firstMonth.add({ months: numberOfMonths }));
    } else {
      const newMonths = createMonths({
        dateObj: firstMonth.add({ months: 1 }),
        weekStartsOn,
        locale,
        fixedWeeks,
        numberOfMonths
      });
      setMonths(newMonths);
      const firstNewMonth = newMonths[0];
      if (!firstNewMonth) return;
      setPlaceholder(firstNewMonth.value.set({ day: 1 }));
    }
  }
  function handleCalendarPrevPage({
    months,
    setMonths,
    numberOfMonths,
    pagedNavigation,
    weekStartsOn,
    locale,
    fixedWeeks,
    setPlaceholder
  }) {
    var _a2;
    const firstMonth = (_a2 = months[0]) == null ? void 0 : _a2.value;
    if (!firstMonth) return;
    if (pagedNavigation) {
      setPlaceholder(firstMonth.subtract({ months: numberOfMonths }));
    } else {
      const newMonths = createMonths({
        dateObj: firstMonth.subtract({ months: 1 }),
        weekStartsOn,
        locale,
        fixedWeeks,
        numberOfMonths
      });
      setMonths(newMonths);
      const firstNewMonth = newMonths[0];
      if (!firstNewMonth) return;
      setPlaceholder(firstNewMonth.value.set({ day: 1 }));
    }
  }
  function getWeekdays({ months, formatter, weekdayFormat }) {
    if (!months.length) return [];
    const firstMonth = months[0];
    const firstWeek = firstMonth.weeks[0];
    if (!firstWeek) return [];
    return firstWeek.map((date) => formatter.dayOfWeek(toDate(date), weekdayFormat));
  }
  function useMonthViewOptionsSync(props) {
    const weekStartsOn = props.weekStartsOn.current;
    const locale = props.locale.current;
    const fixedWeeks = props.fixedWeeks.current;
    const numberOfMonths = props.numberOfMonths.current;
    untrack(() => {
      const placeholder = props.placeholder.current;
      if (!placeholder) return;
      const defaultMonthProps = {
        weekStartsOn,
        locale,
        fixedWeeks,
        numberOfMonths
      };
      props.setMonths(createMonths({ ...defaultMonthProps, dateObj: placeholder }));
    });
  }
  function useMonthViewPlaceholderSync({
    placeholder,
    getVisibleMonths,
    weekStartsOn,
    locale,
    fixedWeeks,
    numberOfMonths,
    setMonths
  }) {
    user_effect(() => {
      placeholder.current;
      untrack(() => {
        if (getVisibleMonths().some((month) => $14e0f24ef4ac5c92$export$a18c89cbd24170ff(month, placeholder.current))) {
          return;
        }
        const defaultMonthProps = {
          weekStartsOn: weekStartsOn.current,
          locale: locale.current,
          fixedWeeks: fixedWeeks.current,
          numberOfMonths: numberOfMonths.current
        };
        setMonths(createMonths({
          ...defaultMonthProps,
          dateObj: placeholder.current
        }));
      });
    });
  }
  function getIsNextButtonDisabled({ maxValue, months, disabled }) {
    var _a2;
    if (!maxValue || !months.length) return false;
    if (disabled) return true;
    const lastMonthInView = (_a2 = months[months.length - 1]) == null ? void 0 : _a2.value;
    if (!lastMonthInView) return false;
    const firstMonthOfNextPage = lastMonthInView.add({ months: 1 }).set({ day: 1 });
    return isAfter(firstMonthOfNextPage, maxValue);
  }
  function getIsPrevButtonDisabled({ minValue, months, disabled }) {
    var _a2;
    if (!minValue || !months.length) return false;
    if (disabled) return true;
    const firstMonthInView = (_a2 = months[0]) == null ? void 0 : _a2.value;
    if (!firstMonthInView) return false;
    const lastMonthOfPrevPage = firstMonthInView.subtract({ months: 1 }).set({ day: 35 });
    return isBefore(lastMonthOfPrevPage, minValue);
  }
  function getCalendarHeadingValue({ months, locale, formatter }) {
    if (!months.length) return "";
    if (strict_equals(locale, formatter.getLocale(), false)) {
      formatter.setLocale(locale);
    }
    if (strict_equals(months.length, 1)) {
      const month = toDate(months[0].value);
      return `${formatter.fullMonthAndYear(month)}`;
    }
    const startMonth = toDate(months[0].value);
    const endMonth = toDate(months[months.length - 1].value);
    const startMonthName = formatter.fullMonth(startMonth);
    const endMonthName = formatter.fullMonth(endMonth);
    const startMonthYear = formatter.fullYear(startMonth);
    const endMonthYear = formatter.fullYear(endMonth);
    const content = strict_equals(startMonthYear, endMonthYear) ? `${startMonthName} - ${endMonthName} ${endMonthYear}` : `${startMonthName} ${startMonthYear} - ${endMonthName} ${endMonthYear}`;
    return content;
  }
  function getCalendarElementProps({
    fullCalendarLabel,
    id,
    isInvalid,
    disabled,
    readonly
  }) {
    return {
      id,
      role: "application",
      "aria-label": fullCalendarLabel,
      "data-invalid": getDataInvalid(isInvalid),
      "data-disabled": getDataDisabled(disabled),
      "data-readonly": getDataReadonly(readonly)
    };
  }
  class CalendarHeadingState {
    constructor(props, root2) {
      __publicField(this, "root");
      __publicField(this, "id");
      __publicField(this, "ref");
      __privateAdd(this, _headingValue, /* @__PURE__ */ derived(() => this.root.headingValue));
      __privateAdd(this, _props11, /* @__PURE__ */ derived(() => ({
        id: this.id.current,
        "aria-hidden": getAriaHidden(true),
        "data-disabled": getDataDisabled(this.root.disabled.current),
        "data-readonly": getDataReadonly(this.root.readonly.current),
        [this.root.getBitsAttr("heading")]: ""
      })));
      this.root = root2;
      this.id = props.id;
      this.ref = props.ref;
      useRefById({ id: this.id, ref: this.ref });
    }
    get headingValue() {
      return get$2(__privateGet(this, _headingValue));
    }
    set headingValue(_2) {
      throw new Error("Cannot update a derived property ('headingValue')");
    }
    get props() {
      return get$2(__privateGet(this, _props11));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _headingValue = new WeakMap();
  _props11 = new WeakMap();
  class CalendarNextButtonState {
    constructor(props, root2) {
      __publicField(this, "root");
      __publicField(this, "id");
      __publicField(this, "ref");
      __privateAdd(this, _isDisabled3, /* @__PURE__ */ derived(() => this.root.isNextButtonDisabled));
      __privateAdd(this, _props12, /* @__PURE__ */ derived(() => ({
        id: this.id.current,
        role: "button",
        type: "button",
        "aria-label": "Next",
        "aria-disabled": getAriaDisabled(this.isDisabled),
        "data-disabled": getDataDisabled(this.isDisabled),
        disabled: this.isDisabled,
        [this.root.getBitsAttr("next-button")]: "",
        //
        onclick: this.onclick
      })));
      this.root = root2;
      this.id = props.id;
      this.ref = props.ref;
      this.onclick = this.onclick.bind(this);
      useRefById({ id: this.id, ref: this.ref });
    }
    get isDisabled() {
      return get$2(__privateGet(this, _isDisabled3));
    }
    set isDisabled(_2) {
      throw new Error("Cannot update a derived property ('isDisabled')");
    }
    onclick(_2) {
      if (this.isDisabled) return;
      this.root.nextPage();
    }
    get props() {
      return get$2(__privateGet(this, _props12));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _isDisabled3 = new WeakMap();
  _props12 = new WeakMap();
  class CalendarPrevButtonState {
    constructor(props, root2) {
      __publicField(this, "root");
      __publicField(this, "id");
      __publicField(this, "ref");
      __privateAdd(this, _isDisabled4, /* @__PURE__ */ derived(() => this.root.isPrevButtonDisabled));
      __privateAdd(this, _props13, /* @__PURE__ */ derived(() => ({
        id: this.id.current,
        role: "button",
        type: "button",
        "aria-label": "Previous",
        "aria-disabled": getAriaDisabled(this.isDisabled),
        "data-disabled": getDataDisabled(this.isDisabled),
        disabled: this.isDisabled,
        [this.root.getBitsAttr("prev-button")]: "",
        //
        onclick: this.onclick
      })));
      this.root = root2;
      this.id = props.id;
      this.ref = props.ref;
      this.onclick = this.onclick.bind(this);
      useRefById({ id: this.id, ref: this.ref });
    }
    get isDisabled() {
      return get$2(__privateGet(this, _isDisabled4));
    }
    set isDisabled(_2) {
      throw new Error("Cannot update a derived property ('isDisabled')");
    }
    onclick(_2) {
      if (this.isDisabled) return;
      this.root.prevPage();
    }
    get props() {
      return get$2(__privateGet(this, _props13));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _isDisabled4 = new WeakMap();
  _props13 = new WeakMap();
  class CalendarGridState {
    constructor(props, root2) {
      __publicField(this, "root");
      __publicField(this, "id");
      __publicField(this, "ref");
      __privateAdd(this, _props14, /* @__PURE__ */ derived(() => ({
        id: this.id.current,
        tabindex: -1,
        role: "grid",
        "aria-readonly": getAriaReadonly(this.root.readonly.current),
        "aria-disabled": getAriaDisabled(this.root.disabled.current),
        "data-readonly": getDataReadonly(this.root.readonly.current),
        "data-disabled": getDataDisabled(this.root.disabled.current),
        [this.root.getBitsAttr("grid")]: ""
      })));
      this.root = root2;
      this.id = props.id;
      this.ref = props.ref;
      useRefById({ id: this.id, ref: this.ref });
    }
    get props() {
      return get$2(__privateGet(this, _props14));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _props14 = new WeakMap();
  class CalendarGridBodyState {
    constructor(props, root2) {
      __publicField(this, "root");
      __publicField(this, "id");
      __publicField(this, "ref");
      __privateAdd(this, _props15, /* @__PURE__ */ derived(() => ({
        id: this.id.current,
        "data-disabled": getDataDisabled(this.root.disabled.current),
        "data-readonly": getDataReadonly(this.root.readonly.current),
        [this.root.getBitsAttr("grid-body")]: ""
      })));
      this.root = root2;
      this.id = props.id;
      this.ref = props.ref;
      useRefById({ id: this.id, ref: this.ref });
    }
    get props() {
      return get$2(__privateGet(this, _props15));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _props15 = new WeakMap();
  class CalendarGridHeadState {
    constructor(props, root2) {
      __publicField(this, "root");
      __publicField(this, "id");
      __publicField(this, "ref");
      __privateAdd(this, _props16, /* @__PURE__ */ derived(() => ({
        id: this.id.current,
        "data-disabled": getDataDisabled(this.root.disabled.current),
        "data-readonly": getDataReadonly(this.root.readonly.current),
        [this.root.getBitsAttr("grid-head")]: ""
      })));
      this.root = root2;
      this.id = props.id;
      this.ref = props.ref;
      useRefById({ id: this.id, ref: this.ref });
    }
    get props() {
      return get$2(__privateGet(this, _props16));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _props16 = new WeakMap();
  class CalendarGridRowState {
    constructor(props, root2) {
      __publicField(this, "root");
      __publicField(this, "id");
      __publicField(this, "ref");
      __privateAdd(this, _props17, /* @__PURE__ */ derived(() => ({
        id: this.id.current,
        "data-disabled": getDataDisabled(this.root.disabled.current),
        "data-readonly": getDataReadonly(this.root.readonly.current),
        [this.root.getBitsAttr("grid-row")]: ""
      })));
      this.root = root2;
      this.id = props.id;
      this.ref = props.ref;
      useRefById({ id: this.id, ref: this.ref });
    }
    get props() {
      return get$2(__privateGet(this, _props17));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _props17 = new WeakMap();
  class CalendarHeadCellState {
    constructor(props, root2) {
      __publicField(this, "root");
      __publicField(this, "id");
      __publicField(this, "ref");
      __privateAdd(this, _props18, /* @__PURE__ */ derived(() => ({
        id: this.id.current,
        "data-disabled": getDataDisabled(this.root.disabled.current),
        "data-readonly": getDataReadonly(this.root.readonly.current),
        [this.root.getBitsAttr("head-cell")]: ""
      })));
      this.root = root2;
      this.id = props.id;
      this.ref = props.ref;
      useRefById({ id: this.id, ref: this.ref });
    }
    get props() {
      return get$2(__privateGet(this, _props18));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _props18 = new WeakMap();
  class CalendarHeaderState {
    constructor(props, root2) {
      __publicField(this, "root");
      __publicField(this, "id");
      __publicField(this, "ref");
      __privateAdd(this, _props19, /* @__PURE__ */ derived(() => ({
        id: this.id.current,
        "data-disabled": getDataDisabled(this.root.disabled.current),
        "data-readonly": getDataReadonly(this.root.readonly.current),
        [this.root.getBitsAttr("header")]: ""
      })));
      this.root = root2;
      this.id = props.id;
      this.ref = props.ref;
      useRefById({ id: this.id, ref: this.ref });
    }
    get props() {
      return get$2(__privateGet(this, _props19));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _props19 = new WeakMap();
  const [
    setCalendarRootContext,
    getCalendarRootContext
  ] = createContext(["Calendar.Root", "RangeCalendar.Root"], "Calendar.Root", false);
  createContext("Calendar.Cell");
  function useCalendarGrid(props) {
    const root2 = getCalendarRootContext();
    return new CalendarGridState(props, root2);
  }
  function useCalendarNextButton(props) {
    const root2 = getCalendarRootContext();
    return new CalendarNextButtonState(props, root2);
  }
  function useCalendarPrevButton(props) {
    const root2 = getCalendarRootContext();
    return new CalendarPrevButtonState(props, root2);
  }
  function useCalendarGridBody(props) {
    const root2 = getCalendarRootContext();
    return new CalendarGridBodyState(props, root2);
  }
  function useCalendarGridHead(props) {
    const root2 = getCalendarRootContext();
    return new CalendarGridHeadState(props, root2);
  }
  function useCalendarGridRow(props) {
    const root2 = getCalendarRootContext();
    return new CalendarGridRowState(props, root2);
  }
  function useCalendarHeadCell(props) {
    const root2 = getCalendarRootContext();
    return new CalendarHeadCellState(props, root2);
  }
  function useCalendarHeader(props) {
    const root2 = getCalendarRootContext();
    return new CalendarHeaderState(props, root2);
  }
  function useCalendarHeading(props) {
    const root2 = getCalendarRootContext();
    return new CalendarHeadingState(props, root2);
  }
  mark_module_start();
  Calendar_grid[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/calendar/components/calendar-grid.svelte";
  var root_2$j = add_locations(/* @__PURE__ */ template(`<table><!></table>`), Calendar_grid[FILENAME], [[29, 1]]);
  function Calendar_grid($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Calendar_grid);
    validate_prop_bindings($$props, ["ref"], [], Calendar_grid);
    let ref = prop($$props, "ref", 15, null), id = prop($$props, "id", 19, useId), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "children",
        "child",
        "ref",
        "id"
      ],
      "restProps"
    );
    const gridState = useCalendarGrid({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, gridState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({ props: get$2(mergedProps) }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var table = root_2$j();
        let attributes;
        var node_2 = child(table);
        snippet(node_2, () => $$props.children ?? noop$1);
        template_effect(() => attributes = set_attributes(table, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, table);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Calendar_grid);
  mark_module_start();
  Calendar_grid_body[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/calendar/components/calendar-grid-body.svelte";
  var root_2$i = add_locations(/* @__PURE__ */ template(`<tbody><!></tbody>`), Calendar_grid_body[FILENAME], [[29, 1]]);
  function Calendar_grid_body($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Calendar_grid_body);
    validate_prop_bindings($$props, ["ref"], [], Calendar_grid_body);
    let ref = prop($$props, "ref", 15, null), id = prop($$props, "id", 19, useId), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "children",
        "child",
        "ref",
        "id"
      ],
      "restProps"
    );
    const gridBodyState = useCalendarGridBody({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, gridBodyState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({ props: get$2(mergedProps) }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var tbody = root_2$i();
        let attributes;
        var node_2 = child(tbody);
        snippet(node_2, () => $$props.children ?? noop$1);
        template_effect(() => attributes = set_attributes(tbody, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, tbody);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Calendar_grid_body);
  mark_module_start();
  Calendar_grid_head[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/calendar/components/calendar-grid-head.svelte";
  var root_2$h = add_locations(/* @__PURE__ */ template(`<thead><!></thead>`), Calendar_grid_head[FILENAME], [[29, 1]]);
  function Calendar_grid_head($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Calendar_grid_head);
    validate_prop_bindings($$props, ["ref"], [], Calendar_grid_head);
    let ref = prop($$props, "ref", 15, null), id = prop($$props, "id", 19, useId), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "children",
        "child",
        "ref",
        "id"
      ],
      "restProps"
    );
    const gridHeadState = useCalendarGridHead({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, gridHeadState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({ props: get$2(mergedProps) }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var thead = root_2$h();
        let attributes;
        var node_2 = child(thead);
        snippet(node_2, () => $$props.children ?? noop$1);
        template_effect(() => attributes = set_attributes(thead, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, thead);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Calendar_grid_head);
  mark_module_start();
  Calendar_head_cell[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/calendar/components/calendar-head-cell.svelte";
  var root_2$g = add_locations(/* @__PURE__ */ template(`<th><!></th>`), Calendar_head_cell[FILENAME], [[29, 1]]);
  function Calendar_head_cell($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Calendar_head_cell);
    validate_prop_bindings($$props, ["ref"], [], Calendar_head_cell);
    let ref = prop($$props, "ref", 15, null), id = prop($$props, "id", 19, useId), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "children",
        "child",
        "ref",
        "id"
      ],
      "restProps"
    );
    const headCellState = useCalendarHeadCell({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, headCellState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({ props: get$2(mergedProps) }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var th = root_2$g();
        let attributes;
        var node_2 = child(th);
        snippet(node_2, () => $$props.children ?? noop$1);
        template_effect(() => attributes = set_attributes(th, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, th);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Calendar_head_cell);
  mark_module_start();
  Calendar_grid_row[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/calendar/components/calendar-grid-row.svelte";
  var root_2$f = add_locations(/* @__PURE__ */ template(`<tr><!></tr>`), Calendar_grid_row[FILENAME], [[29, 1]]);
  function Calendar_grid_row($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Calendar_grid_row);
    validate_prop_bindings($$props, ["ref"], [], Calendar_grid_row);
    let ref = prop($$props, "ref", 15, null), id = prop($$props, "id", 19, useId), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "children",
        "child",
        "ref",
        "id"
      ],
      "restProps"
    );
    const gridRowState = useCalendarGridRow({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, gridRowState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({ props: get$2(mergedProps) }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var tr = root_2$f();
        let attributes;
        var node_2 = child(tr);
        snippet(node_2, () => $$props.children ?? noop$1);
        template_effect(() => attributes = set_attributes(tr, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, tr);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Calendar_grid_row);
  mark_module_start();
  Calendar_header[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/calendar/components/calendar-header.svelte";
  var root_2$e = add_locations(/* @__PURE__ */ template(`<header><!></header>`), Calendar_header[FILENAME], [[29, 1]]);
  function Calendar_header($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Calendar_header);
    validate_prop_bindings($$props, ["ref"], [], Calendar_header);
    let ref = prop($$props, "ref", 15, null), id = prop($$props, "id", 19, useId), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "children",
        "child",
        "ref",
        "id"
      ],
      "restProps"
    );
    const headerState = useCalendarHeader({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, headerState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({ props: get$2(mergedProps) }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var header = root_2$e();
        let attributes;
        var node_2 = child(header);
        snippet(node_2, () => $$props.children ?? noop$1);
        template_effect(() => attributes = set_attributes(header, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, header);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Calendar_header);
  mark_module_start();
  Calendar_heading[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/calendar/components/calendar-heading.svelte";
  var root_2$d = add_locations(/* @__PURE__ */ template(`<div><!></div>`), Calendar_heading[FILENAME], [[29, 1]]);
  function Calendar_heading($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Calendar_heading);
    validate_prop_bindings($$props, ["ref"], [], Calendar_heading);
    let ref = prop($$props, "ref", 15, null), id = prop($$props, "id", 19, useId), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "children",
        "child",
        "ref",
        "id"
      ],
      "restProps"
    );
    const headingState = useCalendarHeading({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, headingState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({
          props: get$2(mergedProps),
          headingValue: headingState.headingValue
        }));
        append($$anchor2, fragment_1);
      };
      var alternate_1 = ($$anchor2) => {
        var div = root_2$d();
        let attributes;
        var node_2 = child(div);
        {
          var consequent_1 = ($$anchor3) => {
            var fragment_2 = comment();
            var node_3 = first_child(fragment_2);
            snippet(node_3, () => $$props.children ?? noop$1, () => ({ headingValue: headingState.headingValue }));
            append($$anchor3, fragment_2);
          };
          var alternate = ($$anchor3) => {
            var text$1 = text();
            template_effect(() => set_text(text$1, headingState.headingValue));
            append($$anchor3, text$1);
          };
          if_block(node_2, ($$render) => {
            if ($$props.children) $$render(consequent_1);
            else $$render(alternate, false);
          });
        }
        template_effect(() => attributes = set_attributes(div, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, div);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate_1, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Calendar_heading);
  mark_module_start();
  Calendar_next_button[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/calendar/components/calendar-next-button.svelte";
  var root_2$c = add_locations(/* @__PURE__ */ template(`<button><!></button>`), Calendar_next_button[FILENAME], [[29, 1]]);
  function Calendar_next_button($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Calendar_next_button);
    validate_prop_bindings($$props, ["ref"], [], Calendar_next_button);
    let id = prop($$props, "id", 19, useId), ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "children",
        "child",
        "id",
        "ref"
      ],
      "restProps"
    );
    const nextButtonState = useCalendarNextButton({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, nextButtonState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({ props: get$2(mergedProps) }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var button = root_2$c();
        let attributes;
        var node_2 = child(button);
        snippet(node_2, () => $$props.children ?? noop$1);
        template_effect(() => attributes = set_attributes(button, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, button);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Calendar_next_button);
  mark_module_start();
  Calendar_prev_button[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/calendar/components/calendar-prev-button.svelte";
  var root_2$b = add_locations(/* @__PURE__ */ template(`<button><!></button>`), Calendar_prev_button[FILENAME], [[29, 1]]);
  function Calendar_prev_button($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Calendar_prev_button);
    validate_prop_bindings($$props, ["ref"], [], Calendar_prev_button);
    let id = prop($$props, "id", 19, useId), ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "children",
        "child",
        "id",
        "ref"
      ],
      "restProps"
    );
    const prevButtonState = useCalendarPrevButton({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, prevButtonState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({ props: get$2(mergedProps) }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var button = root_2$b();
        let attributes;
        var node_2 = child(button);
        snippet(node_2, () => $$props.children ?? noop$1);
        template_effect(() => attributes = set_attributes(button, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, button);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Calendar_prev_button);
  const sides = ["top", "right", "bottom", "left"];
  const min = Math.min;
  const max = Math.max;
  const round = Math.round;
  const floor = Math.floor;
  const createCoords = (v2) => ({
    x: v2,
    y: v2
  });
  const oppositeSideMap = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  const oppositeAlignmentMap = {
    start: "end",
    end: "start"
  };
  function clamp(start, value, end) {
    return max(start, min(value, end));
  }
  function evaluate(value, param) {
    return typeof value === "function" ? value(param) : value;
  }
  function getSide(placement) {
    return placement.split("-")[0];
  }
  function getAlignment(placement) {
    return placement.split("-")[1];
  }
  function getOppositeAxis(axis) {
    return axis === "x" ? "y" : "x";
  }
  function getAxisLength(axis) {
    return axis === "y" ? "height" : "width";
  }
  function getSideAxis(placement) {
    return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
  }
  function getAlignmentAxis(placement) {
    return getOppositeAxis(getSideAxis(placement));
  }
  function getAlignmentSides(placement, rects, rtl) {
    if (rtl === void 0) {
      rtl = false;
    }
    const alignment = getAlignment(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const length = getAxisLength(alignmentAxis);
    let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
    if (rects.reference[length] > rects.floating[length]) {
      mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
    }
    return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
  }
  function getExpandedPlacements(placement) {
    const oppositePlacement = getOppositePlacement(placement);
    return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
  }
  function getOppositeAlignmentPlacement(placement) {
    return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
  }
  function getSideList(side, isStart, rtl) {
    const lr = ["left", "right"];
    const rl = ["right", "left"];
    const tb = ["top", "bottom"];
    const bt = ["bottom", "top"];
    switch (side) {
      case "top":
      case "bottom":
        if (rtl) return isStart ? rl : lr;
        return isStart ? lr : rl;
      case "left":
      case "right":
        return isStart ? tb : bt;
      default:
        return [];
    }
  }
  function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
    const alignment = getAlignment(placement);
    let list = getSideList(getSide(placement), direction === "start", rtl);
    if (alignment) {
      list = list.map((side) => side + "-" + alignment);
      if (flipAlignment) {
        list = list.concat(list.map(getOppositeAlignmentPlacement));
      }
    }
    return list;
  }
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
  }
  function expandPaddingObject(padding) {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      ...padding
    };
  }
  function getPaddingObject(padding) {
    return typeof padding !== "number" ? expandPaddingObject(padding) : {
      top: padding,
      right: padding,
      bottom: padding,
      left: padding
    };
  }
  function rectToClientRect(rect) {
    const {
      x: x2,
      y: y2,
      width,
      height
    } = rect;
    return {
      width,
      height,
      top: y2,
      left: x2,
      right: x2 + width,
      bottom: y2 + height,
      x: x2,
      y: y2
    };
  }
  function computeCoordsFromPlacement(_ref17, placement, rtl) {
    let {
      reference,
      floating
    } = _ref17;
    const sideAxis = getSideAxis(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const alignLength = getAxisLength(alignmentAxis);
    const side = getSide(placement);
    const isVertical = sideAxis === "y";
    const commonX = reference.x + reference.width / 2 - floating.width / 2;
    const commonY = reference.y + reference.height / 2 - floating.height / 2;
    const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
    let coords;
    switch (side) {
      case "top":
        coords = {
          x: commonX,
          y: reference.y - floating.height
        };
        break;
      case "bottom":
        coords = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      case "right":
        coords = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;
      case "left":
        coords = {
          x: reference.x - floating.width,
          y: commonY
        };
        break;
      default:
        coords = {
          x: reference.x,
          y: reference.y
        };
    }
    switch (getAlignment(placement)) {
      case "start":
        coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
        break;
      case "end":
        coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
        break;
    }
    return coords;
  }
  const computePosition$1 = async (reference, floating, config) => {
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware = [],
      platform: platform2
    } = config;
    const validMiddleware = middleware.filter(Boolean);
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
    let rects = await platform2.getElementRects({
      reference,
      floating,
      strategy
    });
    let {
      x: x2,
      y: y2
    } = computeCoordsFromPlacement(rects, placement, rtl);
    let statefulPlacement = placement;
    let middlewareData = {};
    let resetCount = 0;
    for (let i2 = 0; i2 < validMiddleware.length; i2++) {
      const {
        name,
        fn
      } = validMiddleware[i2];
      const {
        x: nextX,
        y: nextY,
        data,
        reset: reset2
      } = await fn({
        x: x2,
        y: y2,
        initialPlacement: placement,
        placement: statefulPlacement,
        strategy,
        middlewareData,
        rects,
        platform: platform2,
        elements: {
          reference,
          floating
        }
      });
      x2 = nextX != null ? nextX : x2;
      y2 = nextY != null ? nextY : y2;
      middlewareData = {
        ...middlewareData,
        [name]: {
          ...middlewareData[name],
          ...data
        }
      };
      if (reset2 && resetCount <= 50) {
        resetCount++;
        if (typeof reset2 === "object") {
          if (reset2.placement) {
            statefulPlacement = reset2.placement;
          }
          if (reset2.rects) {
            rects = reset2.rects === true ? await platform2.getElementRects({
              reference,
              floating,
              strategy
            }) : reset2.rects;
          }
          ({
            x: x2,
            y: y2
          } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
        }
        i2 = -1;
      }
    }
    return {
      x: x2,
      y: y2,
      placement: statefulPlacement,
      strategy,
      middlewareData
    };
  };
  async function detectOverflow(state2, options) {
    var _await$platform$isEle;
    if (options === void 0) {
      options = {};
    }
    const {
      x: x2,
      y: y2,
      platform: platform2,
      rects,
      elements,
      strategy
    } = state2;
    const {
      boundary = "clippingAncestors",
      rootBoundary = "viewport",
      elementContext = "floating",
      altBoundary = false,
      padding = 0
    } = evaluate(options, state2);
    const paddingObject = getPaddingObject(padding);
    const altContext = elementContext === "floating" ? "reference" : "floating";
    const element2 = elements[altBoundary ? altContext : elementContext];
    const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
      element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element2))) != null ? _await$platform$isEle : true) ? element2 : element2.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
      boundary,
      rootBoundary,
      strategy
    }));
    const rect = elementContext === "floating" ? {
      x: x2,
      y: y2,
      width: rects.floating.width,
      height: rects.floating.height
    } : rects.reference;
    const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
    const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
      x: 1,
      y: 1
    } : {
      x: 1,
      y: 1
    };
    const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
      elements,
      rect,
      offsetParent,
      strategy
    }) : rect);
    return {
      top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
      bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
      left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
      right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
    };
  }
  const arrow$1 = (options) => ({
    name: "arrow",
    options,
    async fn(state2) {
      const {
        x: x2,
        y: y2,
        placement,
        rects,
        platform: platform2,
        elements,
        middlewareData
      } = state2;
      const {
        element: element2,
        padding = 0
      } = evaluate(options, state2) || {};
      if (element2 == null) {
        return {};
      }
      const paddingObject = getPaddingObject(padding);
      const coords = {
        x: x2,
        y: y2
      };
      const axis = getAlignmentAxis(placement);
      const length = getAxisLength(axis);
      const arrowDimensions = await platform2.getDimensions(element2);
      const isYAxis = axis === "y";
      const minProp = isYAxis ? "top" : "left";
      const maxProp = isYAxis ? "bottom" : "right";
      const clientProp = isYAxis ? "clientHeight" : "clientWidth";
      const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
      const startDiff = coords[axis] - rects.reference[axis];
      const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element2));
      let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
      if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
        clientSize = elements.floating[clientProp] || rects.floating[length];
      }
      const centerToReference = endDiff / 2 - startDiff / 2;
      const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
      const minPadding = min(paddingObject[minProp], largestPossiblePadding);
      const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
      const min$1 = minPadding;
      const max2 = clientSize - arrowDimensions[length] - maxPadding;
      const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
      const offset2 = clamp(min$1, center, max2);
      const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset2 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
      const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
      return {
        [axis]: coords[axis] + alignmentOffset,
        data: {
          [axis]: offset2,
          centerOffset: center - offset2 - alignmentOffset,
          ...shouldAddOffset && {
            alignmentOffset
          }
        },
        reset: shouldAddOffset
      };
    }
  });
  const flip$1 = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "flip",
      options,
      async fn(state2) {
        var _middlewareData$arrow, _middlewareData$flip;
        const {
          placement,
          middlewareData,
          rects,
          initialPlacement,
          platform: platform2,
          elements
        } = state2;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true,
          fallbackPlacements: specifiedFallbackPlacements,
          fallbackStrategy = "bestFit",
          fallbackAxisSideDirection = "none",
          flipAlignment = true,
          ...detectOverflowOptions
        } = evaluate(options, state2);
        if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        const side = getSide(placement);
        const initialSideAxis = getSideAxis(initialPlacement);
        const isBasePlacement = getSide(initialPlacement) === initialPlacement;
        const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
        const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
        const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
        if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
          fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
        }
        const placements = [initialPlacement, ...fallbackPlacements];
        const overflow = await detectOverflow(state2, detectOverflowOptions);
        const overflows = [];
        let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
        if (checkMainAxis) {
          overflows.push(overflow[side]);
        }
        if (checkCrossAxis) {
          const sides2 = getAlignmentSides(placement, rects, rtl);
          overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
        }
        overflowsData = [...overflowsData, {
          placement,
          overflows
        }];
        if (!overflows.every((side2) => side2 <= 0)) {
          var _middlewareData$flip2, _overflowsData$filter;
          const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
          const nextPlacement = placements[nextIndex];
          if (nextPlacement) {
            return {
              data: {
                index: nextIndex,
                overflows: overflowsData
              },
              reset: {
                placement: nextPlacement
              }
            };
          }
          let resetPlacement = (_overflowsData$filter = overflowsData.filter((d2) => d2.overflows[0] <= 0).sort((a2, b2) => a2.overflows[1] - b2.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
          if (!resetPlacement) {
            switch (fallbackStrategy) {
              case "bestFit": {
                var _overflowsData$filter2;
                const placement2 = (_overflowsData$filter2 = overflowsData.filter((d2) => {
                  if (hasFallbackAxisSideDirection) {
                    const currentSideAxis = getSideAxis(d2.placement);
                    return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                    // reading directions favoring greater width.
                    currentSideAxis === "y";
                  }
                  return true;
                }).map((d2) => [d2.placement, d2.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a2, b2) => a2[1] - b2[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
                if (placement2) {
                  resetPlacement = placement2;
                }
                break;
              }
              case "initialPlacement":
                resetPlacement = initialPlacement;
                break;
            }
          }
          if (placement !== resetPlacement) {
            return {
              reset: {
                placement: resetPlacement
              }
            };
          }
        }
        return {};
      }
    };
  };
  function getSideOffsets(overflow, rect) {
    return {
      top: overflow.top - rect.height,
      right: overflow.right - rect.width,
      bottom: overflow.bottom - rect.height,
      left: overflow.left - rect.width
    };
  }
  function isAnySideFullyClipped(overflow) {
    return sides.some((side) => overflow[side] >= 0);
  }
  const hide$1 = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "hide",
      options,
      async fn(state2) {
        const {
          rects
        } = state2;
        const {
          strategy = "referenceHidden",
          ...detectOverflowOptions
        } = evaluate(options, state2);
        switch (strategy) {
          case "referenceHidden": {
            const overflow = await detectOverflow(state2, {
              ...detectOverflowOptions,
              elementContext: "reference"
            });
            const offsets = getSideOffsets(overflow, rects.reference);
            return {
              data: {
                referenceHiddenOffsets: offsets,
                referenceHidden: isAnySideFullyClipped(offsets)
              }
            };
          }
          case "escaped": {
            const overflow = await detectOverflow(state2, {
              ...detectOverflowOptions,
              altBoundary: true
            });
            const offsets = getSideOffsets(overflow, rects.floating);
            return {
              data: {
                escapedOffsets: offsets,
                escaped: isAnySideFullyClipped(offsets)
              }
            };
          }
          default: {
            return {};
          }
        }
      }
    };
  };
  async function convertValueToCoords(state2, options) {
    const {
      placement,
      platform: platform2,
      elements
    } = state2;
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
    const side = getSide(placement);
    const alignment = getAlignment(placement);
    const isVertical = getSideAxis(placement) === "y";
    const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
    const crossAxisMulti = rtl && isVertical ? -1 : 1;
    const rawValue = evaluate(options, state2);
    let {
      mainAxis,
      crossAxis,
      alignmentAxis
    } = typeof rawValue === "number" ? {
      mainAxis: rawValue,
      crossAxis: 0,
      alignmentAxis: null
    } : {
      mainAxis: rawValue.mainAxis || 0,
      crossAxis: rawValue.crossAxis || 0,
      alignmentAxis: rawValue.alignmentAxis
    };
    if (alignment && typeof alignmentAxis === "number") {
      crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
    }
    return isVertical ? {
      x: crossAxis * crossAxisMulti,
      y: mainAxis * mainAxisMulti
    } : {
      x: mainAxis * mainAxisMulti,
      y: crossAxis * crossAxisMulti
    };
  }
  const offset$1 = function(options) {
    if (options === void 0) {
      options = 0;
    }
    return {
      name: "offset",
      options,
      async fn(state2) {
        var _middlewareData$offse, _middlewareData$arrow;
        const {
          x: x2,
          y: y2,
          placement,
          middlewareData
        } = state2;
        const diffCoords = await convertValueToCoords(state2, options);
        if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        return {
          x: x2 + diffCoords.x,
          y: y2 + diffCoords.y,
          data: {
            ...diffCoords,
            placement
          }
        };
      }
    };
  };
  const shift$1 = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "shift",
      options,
      async fn(state2) {
        const {
          x: x2,
          y: y2,
          placement
        } = state2;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = false,
          limiter = {
            fn: (_ref17) => {
              let {
                x: x3,
                y: y3
              } = _ref17;
              return {
                x: x3,
                y: y3
              };
            }
          },
          ...detectOverflowOptions
        } = evaluate(options, state2);
        const coords = {
          x: x2,
          y: y2
        };
        const overflow = await detectOverflow(state2, detectOverflowOptions);
        const crossAxis = getSideAxis(getSide(placement));
        const mainAxis = getOppositeAxis(crossAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        if (checkMainAxis) {
          const minSide = mainAxis === "y" ? "top" : "left";
          const maxSide = mainAxis === "y" ? "bottom" : "right";
          const min2 = mainAxisCoord + overflow[minSide];
          const max2 = mainAxisCoord - overflow[maxSide];
          mainAxisCoord = clamp(min2, mainAxisCoord, max2);
        }
        if (checkCrossAxis) {
          const minSide = crossAxis === "y" ? "top" : "left";
          const maxSide = crossAxis === "y" ? "bottom" : "right";
          const min2 = crossAxisCoord + overflow[minSide];
          const max2 = crossAxisCoord - overflow[maxSide];
          crossAxisCoord = clamp(min2, crossAxisCoord, max2);
        }
        const limitedCoords = limiter.fn({
          ...state2,
          [mainAxis]: mainAxisCoord,
          [crossAxis]: crossAxisCoord
        });
        return {
          ...limitedCoords,
          data: {
            x: limitedCoords.x - x2,
            y: limitedCoords.y - y2,
            enabled: {
              [mainAxis]: checkMainAxis,
              [crossAxis]: checkCrossAxis
            }
          }
        };
      }
    };
  };
  const limitShift$1 = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      options,
      fn(state2) {
        const {
          x: x2,
          y: y2,
          placement,
          rects,
          middlewareData
        } = state2;
        const {
          offset: offset2 = 0,
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true
        } = evaluate(options, state2);
        const coords = {
          x: x2,
          y: y2
        };
        const crossAxis = getSideAxis(placement);
        const mainAxis = getOppositeAxis(crossAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        const rawOffset = evaluate(offset2, state2);
        const computedOffset = typeof rawOffset === "number" ? {
          mainAxis: rawOffset,
          crossAxis: 0
        } : {
          mainAxis: 0,
          crossAxis: 0,
          ...rawOffset
        };
        if (checkMainAxis) {
          const len = mainAxis === "y" ? "height" : "width";
          const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
          const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
          if (mainAxisCoord < limitMin) {
            mainAxisCoord = limitMin;
          } else if (mainAxisCoord > limitMax) {
            mainAxisCoord = limitMax;
          }
        }
        if (checkCrossAxis) {
          var _middlewareData$offse, _middlewareData$offse2;
          const len = mainAxis === "y" ? "width" : "height";
          const isOriginSide = ["top", "left"].includes(getSide(placement));
          const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
          const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
          if (crossAxisCoord < limitMin) {
            crossAxisCoord = limitMin;
          } else if (crossAxisCoord > limitMax) {
            crossAxisCoord = limitMax;
          }
        }
        return {
          [mainAxis]: mainAxisCoord,
          [crossAxis]: crossAxisCoord
        };
      }
    };
  };
  const size$1 = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "size",
      options,
      async fn(state2) {
        var _state$middlewareData, _state$middlewareData2;
        const {
          placement,
          rects,
          platform: platform2,
          elements
        } = state2;
        const {
          apply = () => {
          },
          ...detectOverflowOptions
        } = evaluate(options, state2);
        const overflow = await detectOverflow(state2, detectOverflowOptions);
        const side = getSide(placement);
        const alignment = getAlignment(placement);
        const isYAxis = getSideAxis(placement) === "y";
        const {
          width,
          height
        } = rects.floating;
        let heightSide;
        let widthSide;
        if (side === "top" || side === "bottom") {
          heightSide = side;
          widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
        } else {
          widthSide = side;
          heightSide = alignment === "end" ? "top" : "bottom";
        }
        const maximumClippingHeight = height - overflow.top - overflow.bottom;
        const maximumClippingWidth = width - overflow.left - overflow.right;
        const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);
        const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);
        const noShift = !state2.middlewareData.shift;
        let availableHeight = overflowAvailableHeight;
        let availableWidth = overflowAvailableWidth;
        if ((_state$middlewareData = state2.middlewareData.shift) != null && _state$middlewareData.enabled.x) {
          availableWidth = maximumClippingWidth;
        }
        if ((_state$middlewareData2 = state2.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {
          availableHeight = maximumClippingHeight;
        }
        if (noShift && !alignment) {
          const xMin = max(overflow.left, 0);
          const xMax = max(overflow.right, 0);
          const yMin = max(overflow.top, 0);
          const yMax = max(overflow.bottom, 0);
          if (isYAxis) {
            availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
          } else {
            availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
          }
        }
        await apply({
          ...state2,
          availableWidth,
          availableHeight
        });
        const nextDimensions = await platform2.getDimensions(elements.floating);
        if (width !== nextDimensions.width || height !== nextDimensions.height) {
          return {
            reset: {
              rects: true
            }
          };
        }
        return {};
      }
    };
  };
  function hasWindow() {
    return typeof window !== "undefined";
  }
  function getNodeName(node) {
    if (isNode(node)) {
      return (node.nodeName || "").toLowerCase();
    }
    return "#document";
  }
  function getWindow(node) {
    var _node$ownerDocument;
    return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
  }
  function getDocumentElement(node) {
    var _ref17;
    return (_ref17 = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref17.documentElement;
  }
  function isNode(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Node || value instanceof getWindow(value).Node;
  }
  function isElement(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Element || value instanceof getWindow(value).Element;
  }
  function isHTMLElement(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
  }
  function isShadowRoot(value) {
    if (!hasWindow() || typeof ShadowRoot === "undefined") {
      return false;
    }
    return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
  }
  function isOverflowElement(element2) {
    const {
      overflow,
      overflowX,
      overflowY,
      display
    } = getComputedStyle$1(element2);
    return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
  }
  function isTableElement(element2) {
    return ["table", "td", "th"].includes(getNodeName(element2));
  }
  function isTopLayer(element2) {
    return [":popover-open", ":modal"].some((selector) => {
      try {
        return element2.matches(selector);
      } catch (e) {
        return false;
      }
    });
  }
  function isContainingBlock(elementOrCss) {
    const webkit = isWebKit();
    const css = isElement(elementOrCss) ? getComputedStyle$1(elementOrCss) : elementOrCss;
    return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
  }
  function getContainingBlock(element2) {
    let currentNode = getParentNode(element2);
    while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
      if (isContainingBlock(currentNode)) {
        return currentNode;
      } else if (isTopLayer(currentNode)) {
        return null;
      }
      currentNode = getParentNode(currentNode);
    }
    return null;
  }
  function isWebKit() {
    if (typeof CSS === "undefined" || !CSS.supports) return false;
    return CSS.supports("-webkit-backdrop-filter", "none");
  }
  function isLastTraversableNode(node) {
    return ["html", "body", "#document"].includes(getNodeName(node));
  }
  function getComputedStyle$1(element2) {
    return getWindow(element2).getComputedStyle(element2);
  }
  function getNodeScroll(element2) {
    if (isElement(element2)) {
      return {
        scrollLeft: element2.scrollLeft,
        scrollTop: element2.scrollTop
      };
    }
    return {
      scrollLeft: element2.scrollX,
      scrollTop: element2.scrollY
    };
  }
  function getParentNode(node) {
    if (getNodeName(node) === "html") {
      return node;
    }
    const result2 = (
      // Step into the shadow DOM of the parent of a slotted node.
      node.assignedSlot || // DOM Element detected.
      node.parentNode || // ShadowRoot detected.
      isShadowRoot(node) && node.host || // Fallback.
      getDocumentElement(node)
    );
    return isShadowRoot(result2) ? result2.host : result2;
  }
  function getNearestOverflowAncestor(node) {
    const parentNode = getParentNode(node);
    if (isLastTraversableNode(parentNode)) {
      return node.ownerDocument ? node.ownerDocument.body : node.body;
    }
    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
      return parentNode;
    }
    return getNearestOverflowAncestor(parentNode);
  }
  function getOverflowAncestors(node, list, traverseIframes) {
    var _node$ownerDocument2;
    if (list === void 0) {
      list = [];
    }
    if (traverseIframes === void 0) {
      traverseIframes = true;
    }
    const scrollableAncestor = getNearestOverflowAncestor(node);
    const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
    const win = getWindow(scrollableAncestor);
    if (isBody) {
      const frameElement = getFrameElement(win);
      return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
    }
    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
  }
  function getFrameElement(win) {
    return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
  }
  function getCssDimensions(element2) {
    const css = getComputedStyle$1(element2);
    let width = parseFloat(css.width) || 0;
    let height = parseFloat(css.height) || 0;
    const hasOffset = isHTMLElement(element2);
    const offsetWidth = hasOffset ? element2.offsetWidth : width;
    const offsetHeight = hasOffset ? element2.offsetHeight : height;
    const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
    if (shouldFallback) {
      width = offsetWidth;
      height = offsetHeight;
    }
    return {
      width,
      height,
      $: shouldFallback
    };
  }
  function unwrapElement(element2) {
    return !isElement(element2) ? element2.contextElement : element2;
  }
  function getScale(element2) {
    const domElement = unwrapElement(element2);
    if (!isHTMLElement(domElement)) {
      return createCoords(1);
    }
    const rect = domElement.getBoundingClientRect();
    const {
      width,
      height,
      $
    } = getCssDimensions(domElement);
    let x2 = ($ ? round(rect.width) : rect.width) / width;
    let y2 = ($ ? round(rect.height) : rect.height) / height;
    if (!x2 || !Number.isFinite(x2)) {
      x2 = 1;
    }
    if (!y2 || !Number.isFinite(y2)) {
      y2 = 1;
    }
    return {
      x: x2,
      y: y2
    };
  }
  const noOffsets = /* @__PURE__ */ createCoords(0);
  function getVisualOffsets(element2) {
    const win = getWindow(element2);
    if (!isWebKit() || !win.visualViewport) {
      return noOffsets;
    }
    return {
      x: win.visualViewport.offsetLeft,
      y: win.visualViewport.offsetTop
    };
  }
  function shouldAddVisualOffsets(element2, isFixed, floatingOffsetParent) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element2)) {
      return false;
    }
    return isFixed;
  }
  function getBoundingClientRect(element2, includeScale, isFixedStrategy, offsetParent) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    const clientRect = element2.getBoundingClientRect();
    const domElement = unwrapElement(element2);
    let scale = createCoords(1);
    if (includeScale) {
      if (offsetParent) {
        if (isElement(offsetParent)) {
          scale = getScale(offsetParent);
        }
      } else {
        scale = getScale(element2);
      }
    }
    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
    let x2 = (clientRect.left + visualOffsets.x) / scale.x;
    let y2 = (clientRect.top + visualOffsets.y) / scale.y;
    let width = clientRect.width / scale.x;
    let height = clientRect.height / scale.y;
    if (domElement) {
      const win = getWindow(domElement);
      const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
      let currentWin = win;
      let currentIFrame = getFrameElement(currentWin);
      while (currentIFrame && offsetParent && offsetWin !== currentWin) {
        const iframeScale = getScale(currentIFrame);
        const iframeRect = currentIFrame.getBoundingClientRect();
        const css = getComputedStyle$1(currentIFrame);
        const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
        const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
        x2 *= iframeScale.x;
        y2 *= iframeScale.y;
        width *= iframeScale.x;
        height *= iframeScale.y;
        x2 += left;
        y2 += top;
        currentWin = getWindow(currentIFrame);
        currentIFrame = getFrameElement(currentWin);
      }
    }
    return rectToClientRect({
      width,
      height,
      x: x2,
      y: y2
    });
  }
  function getWindowScrollBarX(element2, rect) {
    const leftScroll = getNodeScroll(element2).scrollLeft;
    if (!rect) {
      return getBoundingClientRect(getDocumentElement(element2)).left + leftScroll;
    }
    return rect.left + leftScroll;
  }
  function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
    if (ignoreScrollbarX === void 0) {
      ignoreScrollbarX = false;
    }
    const htmlRect = documentElement.getBoundingClientRect();
    const x2 = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (
      // RTL <body> scrollbar.
      getWindowScrollBarX(documentElement, htmlRect)
    ));
    const y2 = htmlRect.top + scroll.scrollTop;
    return {
      x: x2,
      y: y2
    };
  }
  function convertOffsetParentRelativeRectToViewportRelativeRect(_ref17) {
    let {
      elements,
      rect,
      offsetParent,
      strategy
    } = _ref17;
    const isFixed = strategy === "fixed";
    const documentElement = getDocumentElement(offsetParent);
    const topLayer = elements ? isTopLayer(elements.floating) : false;
    if (offsetParent === documentElement || topLayer && isFixed) {
      return rect;
    }
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    let scale = createCoords(1);
    const offsets = createCoords(0);
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        const offsetRect = getBoundingClientRect(offsetParent);
        scale = getScale(offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      }
    }
    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
    return {
      width: rect.width * scale.x,
      height: rect.height * scale.y,
      x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
      y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
    };
  }
  function getClientRects(element2) {
    return Array.from(element2.getClientRects());
  }
  function getDocumentRect(element2) {
    const html = getDocumentElement(element2);
    const scroll = getNodeScroll(element2);
    const body = element2.ownerDocument.body;
    const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
    const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
    let x2 = -scroll.scrollLeft + getWindowScrollBarX(element2);
    const y2 = -scroll.scrollTop;
    if (getComputedStyle$1(body).direction === "rtl") {
      x2 += max(html.clientWidth, body.clientWidth) - width;
    }
    return {
      width,
      height,
      x: x2,
      y: y2
    };
  }
  function getViewportRect(element2, strategy) {
    const win = getWindow(element2);
    const html = getDocumentElement(element2);
    const visualViewport = win.visualViewport;
    let width = html.clientWidth;
    let height = html.clientHeight;
    let x2 = 0;
    let y2 = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      const visualViewportBased = isWebKit();
      if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
        x2 = visualViewport.offsetLeft;
        y2 = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x2,
      y: y2
    };
  }
  function getInnerBoundingClientRect(element2, strategy) {
    const clientRect = getBoundingClientRect(element2, true, strategy === "fixed");
    const top = clientRect.top + element2.clientTop;
    const left = clientRect.left + element2.clientLeft;
    const scale = isHTMLElement(element2) ? getScale(element2) : createCoords(1);
    const width = element2.clientWidth * scale.x;
    const height = element2.clientHeight * scale.y;
    const x2 = left * scale.x;
    const y2 = top * scale.y;
    return {
      width,
      height,
      x: x2,
      y: y2
    };
  }
  function getClientRectFromClippingAncestor(element2, clippingAncestor, strategy) {
    let rect;
    if (clippingAncestor === "viewport") {
      rect = getViewportRect(element2, strategy);
    } else if (clippingAncestor === "document") {
      rect = getDocumentRect(getDocumentElement(element2));
    } else if (isElement(clippingAncestor)) {
      rect = getInnerBoundingClientRect(clippingAncestor, strategy);
    } else {
      const visualOffsets = getVisualOffsets(element2);
      rect = {
        x: clippingAncestor.x - visualOffsets.x,
        y: clippingAncestor.y - visualOffsets.y,
        width: clippingAncestor.width,
        height: clippingAncestor.height
      };
    }
    return rectToClientRect(rect);
  }
  function hasFixedPositionAncestor(element2, stopNode) {
    const parentNode = getParentNode(element2);
    if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
      return false;
    }
    return getComputedStyle$1(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
  }
  function getClippingElementAncestors(element2, cache2) {
    const cachedResult = cache2.get(element2);
    if (cachedResult) {
      return cachedResult;
    }
    let result2 = getOverflowAncestors(element2, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
    let currentContainingBlockComputedStyle = null;
    const elementIsFixed = getComputedStyle$1(element2).position === "fixed";
    let currentNode = elementIsFixed ? getParentNode(element2) : element2;
    while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
      const computedStyle = getComputedStyle$1(currentNode);
      const currentNodeIsContaining = isContainingBlock(currentNode);
      if (!currentNodeIsContaining && computedStyle.position === "fixed") {
        currentContainingBlockComputedStyle = null;
      }
      const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element2, currentNode);
      if (shouldDropCurrentNode) {
        result2 = result2.filter((ancestor) => ancestor !== currentNode);
      } else {
        currentContainingBlockComputedStyle = computedStyle;
      }
      currentNode = getParentNode(currentNode);
    }
    cache2.set(element2, result2);
    return result2;
  }
  function getClippingRect(_ref17) {
    let {
      element: element2,
      boundary,
      rootBoundary,
      strategy
    } = _ref17;
    const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element2) ? [] : getClippingElementAncestors(element2, this._c) : [].concat(boundary);
    const clippingAncestors = [...elementClippingAncestors, rootBoundary];
    const firstClippingAncestor = clippingAncestors[0];
    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
      const rect = getClientRectFromClippingAncestor(element2, clippingAncestor, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromClippingAncestor(element2, firstClippingAncestor, strategy));
    return {
      width: clippingRect.right - clippingRect.left,
      height: clippingRect.bottom - clippingRect.top,
      x: clippingRect.left,
      y: clippingRect.top
    };
  }
  function getDimensions(element2) {
    const {
      width,
      height
    } = getCssDimensions(element2);
    return {
      width,
      height
    };
  }
  function getRectRelativeToOffsetParent(element2, offsetParent, strategy) {
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    const isFixed = strategy === "fixed";
    const rect = getBoundingClientRect(element2, true, isFixed, offsetParent);
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    const offsets = createCoords(0);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isOffsetParentAnElement) {
        const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
    const x2 = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
    const y2 = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
    return {
      x: x2,
      y: y2,
      width: rect.width,
      height: rect.height
    };
  }
  function isStaticPositioned(element2) {
    return getComputedStyle$1(element2).position === "static";
  }
  function getTrueOffsetParent(element2, polyfill) {
    if (!isHTMLElement(element2) || getComputedStyle$1(element2).position === "fixed") {
      return null;
    }
    if (polyfill) {
      return polyfill(element2);
    }
    let rawOffsetParent = element2.offsetParent;
    if (getDocumentElement(element2) === rawOffsetParent) {
      rawOffsetParent = rawOffsetParent.ownerDocument.body;
    }
    return rawOffsetParent;
  }
  function getOffsetParent(element2, polyfill) {
    const win = getWindow(element2);
    if (isTopLayer(element2)) {
      return win;
    }
    if (!isHTMLElement(element2)) {
      let svgOffsetParent = getParentNode(element2);
      while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
        if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
          return svgOffsetParent;
        }
        svgOffsetParent = getParentNode(svgOffsetParent);
      }
      return win;
    }
    let offsetParent = getTrueOffsetParent(element2, polyfill);
    while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
      offsetParent = getTrueOffsetParent(offsetParent, polyfill);
    }
    if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
      return win;
    }
    return offsetParent || getContainingBlock(element2) || win;
  }
  const getElementRects = async function(data) {
    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
    const getDimensionsFn = this.getDimensions;
    const floatingDimensions = await getDimensionsFn(data.floating);
    return {
      reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
      floating: {
        x: 0,
        y: 0,
        width: floatingDimensions.width,
        height: floatingDimensions.height
      }
    };
  };
  function isRTL(element2) {
    return getComputedStyle$1(element2).direction === "rtl";
  }
  const platform = {
    convertOffsetParentRelativeRectToViewportRelativeRect,
    getDocumentElement,
    getClippingRect,
    getOffsetParent,
    getElementRects,
    getClientRects,
    getDimensions,
    getScale,
    isElement,
    isRTL
  };
  function observeMove(element2, onMove) {
    let io = null;
    let timeoutId;
    const root2 = getDocumentElement(element2);
    function cleanup() {
      var _io;
      clearTimeout(timeoutId);
      (_io = io) == null || _io.disconnect();
      io = null;
    }
    function refresh(skip, threshold) {
      if (skip === void 0) {
        skip = false;
      }
      if (threshold === void 0) {
        threshold = 1;
      }
      cleanup();
      const {
        left,
        top,
        width,
        height
      } = element2.getBoundingClientRect();
      if (!skip) {
        onMove();
      }
      if (!width || !height) {
        return;
      }
      const insetTop = floor(top);
      const insetRight = floor(root2.clientWidth - (left + width));
      const insetBottom = floor(root2.clientHeight - (top + height));
      const insetLeft = floor(left);
      const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
      const options = {
        rootMargin,
        threshold: max(0, min(1, threshold)) || 1
      };
      let isFirstUpdate = true;
      function handleObserve(entries) {
        const ratio = entries[0].intersectionRatio;
        if (ratio !== threshold) {
          if (!isFirstUpdate) {
            return refresh();
          }
          if (!ratio) {
            timeoutId = setTimeout(() => {
              refresh(false, 1e-7);
            }, 1e3);
          } else {
            refresh(false, ratio);
          }
        }
        isFirstUpdate = false;
      }
      try {
        io = new IntersectionObserver(handleObserve, {
          ...options,
          // Handle <iframe>s
          root: root2.ownerDocument
        });
      } catch (e) {
        io = new IntersectionObserver(handleObserve, options);
      }
      io.observe(element2);
    }
    refresh(true);
    return cleanup;
  }
  function autoUpdate(reference, floating, update2, options) {
    if (options === void 0) {
      options = {};
    }
    const {
      ancestorScroll = true,
      ancestorResize = true,
      elementResize = typeof ResizeObserver === "function",
      layoutShift = typeof IntersectionObserver === "function",
      animationFrame = false
    } = options;
    const referenceEl = unwrapElement(reference);
    const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.addEventListener("scroll", update2, {
        passive: true
      });
      ancestorResize && ancestor.addEventListener("resize", update2);
    });
    const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update2) : null;
    let reobserveFrame = -1;
    let resizeObserver = null;
    if (elementResize) {
      resizeObserver = new ResizeObserver((_ref17) => {
        let [firstEntry] = _ref17;
        if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
          resizeObserver.unobserve(floating);
          cancelAnimationFrame(reobserveFrame);
          reobserveFrame = requestAnimationFrame(() => {
            var _resizeObserver;
            (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
          });
        }
        update2();
      });
      if (referenceEl && !animationFrame) {
        resizeObserver.observe(referenceEl);
      }
      resizeObserver.observe(floating);
    }
    let frameId;
    let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
    if (animationFrame) {
      frameLoop();
    }
    function frameLoop() {
      const nextRefRect = getBoundingClientRect(reference);
      if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
        update2();
      }
      prevRefRect = nextRefRect;
      frameId = requestAnimationFrame(frameLoop);
    }
    update2();
    return () => {
      var _resizeObserver2;
      ancestors.forEach((ancestor) => {
        ancestorScroll && ancestor.removeEventListener("scroll", update2);
        ancestorResize && ancestor.removeEventListener("resize", update2);
      });
      cleanupIo == null || cleanupIo();
      (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
      resizeObserver = null;
      if (animationFrame) {
        cancelAnimationFrame(frameId);
      }
    };
  }
  const offset = offset$1;
  const shift = shift$1;
  const flip = flip$1;
  const size = size$1;
  const hide = hide$1;
  const arrow = arrow$1;
  const limitShift = limitShift$1;
  const computePosition = (reference, floating, options) => {
    const cache2 = /* @__PURE__ */ new Map();
    const mergedOptions = {
      platform,
      ...options
    };
    const platformWithCache = {
      ...mergedOptions.platform,
      _c: cache2
    };
    return computePosition$1(reference, floating, {
      ...mergedOptions,
      platform: platformWithCache
    });
  };
  function get(valueOrGetValue) {
    return strict_equals(typeof valueOrGetValue, "function") ? valueOrGetValue() : valueOrGetValue;
  }
  function getDPR(element2) {
    if (strict_equals(typeof window, "undefined")) return 1;
    const win = element2.ownerDocument.defaultView || window;
    return win.devicePixelRatio || 1;
  }
  function roundByDPR(element2, value) {
    const dpr = getDPR(element2);
    return Math.round(value * dpr) / dpr;
  }
  function getFloatingContentCSSVars(name) {
    return {
      [`--bits-${name}-content-transform-origin`]: `var(--bits-floating-transform-origin)`,
      [`--bits-${name}-content-available-width`]: `var(--bits-floating-available-width)`,
      [`--bits-${name}-content-available-height`]: `var(--bits-floating-available-height)`,
      [`--bits-${name}-anchor-width`]: `var(--bits-floating-anchor-width)`,
      [`--bits-${name}-anchor-height`]: `var(--bits-floating-anchor-height)`
    };
  }
  function useFloating(options) {
    const whileElementsMountedOption = options.whileElementsMounted;
    const openOption = /* @__PURE__ */ derived(() => get(options.open) ?? true);
    const middlewareOption = /* @__PURE__ */ derived(() => get(options.middleware));
    const transformOption = /* @__PURE__ */ derived(() => get(options.transform) ?? true);
    const placementOption = /* @__PURE__ */ derived(() => get(options.placement) ?? "bottom");
    const strategyOption = /* @__PURE__ */ derived(() => get(options.strategy) ?? "absolute");
    const reference = options.reference;
    let x2 = state(0);
    let y2 = state(0);
    const floating = box(null);
    let strategy = state(proxy(get$2(strategyOption)));
    let placement = state(proxy(get$2(placementOption)));
    let middlewareData = state(proxy({}));
    let isPositioned = state(false);
    const floatingStyles = /* @__PURE__ */ derived(() => {
      const initialStyles = {
        position: get$2(strategy),
        left: "0",
        top: "0"
      };
      if (!floating.current) {
        return initialStyles;
      }
      const xVal = roundByDPR(floating.current, get$2(x2));
      const yVal = roundByDPR(floating.current, get$2(y2));
      if (get$2(transformOption)) {
        return {
          ...initialStyles,
          transform: `translate(${xVal}px, ${yVal}px)`,
          ...getDPR(floating.current) >= 1.5 && { willChange: "transform" }
        };
      }
      return {
        position: get$2(strategy),
        left: `${xVal}px`,
        top: `${yVal}px`
      };
    });
    let whileElementsMountedCleanup;
    function update2() {
      if (strict_equals(reference.current, null) || strict_equals(floating.current, null)) return;
      computePosition(reference.current, floating.current, {
        middleware: get$2(middlewareOption),
        placement: get$2(placementOption),
        strategy: get$2(strategyOption)
      }).then((position) => {
        set(x2, proxy(position.x, null, x2));
        set(y2, proxy(position.y, null, y2));
        set(strategy, proxy(position.strategy, null, strategy));
        set(placement, proxy(position.placement, null, placement));
        set(middlewareData, proxy(position.middlewareData, null, middlewareData));
        set(isPositioned, true);
      });
    }
    function cleanup() {
      if (strict_equals(typeof whileElementsMountedCleanup, "function")) {
        whileElementsMountedCleanup();
        whileElementsMountedCleanup = void 0;
      }
    }
    function attach() {
      cleanup();
      if (strict_equals(whileElementsMountedOption, void 0)) {
        update2();
        return;
      }
      if (strict_equals(reference.current, null) || strict_equals(floating.current, null)) return;
      whileElementsMountedCleanup = whileElementsMountedOption(reference.current, floating.current, update2);
    }
    function reset2() {
      if (!get$2(openOption)) {
        set(isPositioned, false);
      }
    }
    user_effect(update2);
    user_effect(attach);
    user_effect(reset2);
    user_effect(() => cleanup);
    return {
      floating,
      reference,
      get strategy() {
        return get$2(strategy);
      },
      get placement() {
        return get$2(placement);
      },
      get middlewareData() {
        return get$2(middlewareData);
      },
      get isPositioned() {
        return get$2(isPositioned);
      },
      get floatingStyles() {
        return get$2(floatingStyles);
      },
      get update() {
        return update2;
      }
    };
  }
  const OPPOSITE_SIDE = {
    top: "bottom",
    right: "left",
    bottom: "top",
    left: "right"
  };
  class FloatingRootState {
    constructor() {
      __publicField(this, "anchorNode", box(null));
      __publicField(this, "customAnchorNode", box(null));
      __publicField(this, "triggerNode", box(null));
      user_effect(() => {
        if (this.customAnchorNode.current) {
          if (strict_equals(typeof this.customAnchorNode.current, "string")) {
            this.anchorNode.current = document.querySelector(this.customAnchorNode.current);
          } else {
            this.anchorNode.current = this.customAnchorNode.current;
          }
        } else {
          this.anchorNode.current = this.triggerNode.current;
        }
      });
    }
  }
  class FloatingContentState {
    constructor(props, root2) {
      // state
      __publicField(this, "root");
      // nodes
      __publicField(this, "contentRef", box(null));
      __publicField(this, "wrapperRef", box(null));
      __publicField(this, "arrowRef", box(null));
      // ids
      __publicField(this, "arrowId", box(useId()));
      __publicField(this, "id");
      __publicField(this, "wrapperId");
      __publicField(this, "style");
      __privateAdd(this, _transformedStyle, /* @__PURE__ */ derived(() => {
        if (strict_equals(typeof this.style, "string")) return cssToStyleObj(this.style);
        if (!this.style) return {};
      }));
      __privateAdd(this, _dir);
      __privateAdd(this, _side);
      __privateAdd(this, _sideOffset);
      __privateAdd(this, _align);
      __privateAdd(this, _alignOffset);
      __privateAdd(this, _arrowPadding);
      __privateAdd(this, _avoidCollisions);
      __privateAdd(this, _collisionBoundary);
      __privateAdd(this, _collisionPadding);
      __privateAdd(this, _sticky);
      __privateAdd(this, _hideWhenDetached);
      __privateAdd(this, _strategy);
      __privateAdd(this, _updatePositionStrategy);
      __publicField(this, "onPlaced");
      __publicField(this, "enabled");
      __privateAdd(this, _arrowSize, new ElementSize(() => this.arrowRef.current ?? void 0));
      __privateAdd(this, _arrowWidth, /* @__PURE__ */ derived(() => {
        var _a2;
        return ((_a2 = __privateGet(this, _arrowSize)) == null ? void 0 : _a2.width) ?? 0;
      }));
      __privateAdd(this, _arrowHeight, /* @__PURE__ */ derived(() => {
        var _a2;
        return ((_a2 = __privateGet(this, _arrowSize)) == null ? void 0 : _a2.height) ?? 0;
      }));
      __privateAdd(this, _desiredPlacement, /* @__PURE__ */ derived(() => {
        var _a2;
        return ((_a2 = __privateGet(this, _side)) == null ? void 0 : _a2.current) + (strict_equals(__privateGet(this, _align).current, "center", false) ? `-${__privateGet(this, _align).current}` : "");
      }));
      __privateAdd(this, _boundary, /* @__PURE__ */ derived(() => Array.isArray(__privateGet(this, _collisionBoundary).current) ? __privateGet(this, _collisionBoundary).current : [__privateGet(this, _collisionBoundary).current]));
      __privateAdd(this, _hasExplicitBoundaries, /* @__PURE__ */ derived(() => get$2(__privateGet(this, _boundary)).length > 0));
      __privateAdd(this, _detectOverflowOptions, /* @__PURE__ */ derived(() => ({
        padding: __privateGet(this, _collisionPadding).current,
        boundary: get$2(__privateGet(this, _boundary)).filter(isNotNull),
        altBoundary: this.hasExplicitBoundaries
      })));
      __privateAdd(this, _availableWidth, state(void 0));
      __privateAdd(this, _availableHeight, state(void 0));
      __privateAdd(this, _anchorWidth, state(void 0));
      __privateAdd(this, _anchorHeight, state(void 0));
      __privateAdd(this, _middleware, /* @__PURE__ */ derived(() => [
        offset({
          mainAxis: __privateGet(this, _sideOffset).current + get$2(__privateGet(this, _arrowHeight)),
          alignmentAxis: __privateGet(this, _alignOffset).current
        }),
        __privateGet(this, _avoidCollisions).current && shift({
          mainAxis: true,
          crossAxis: false,
          limiter: strict_equals(__privateGet(this, _sticky).current, "partial") ? limitShift() : void 0,
          ...this.detectOverflowOptions
        }),
        __privateGet(this, _avoidCollisions).current && flip({ ...this.detectOverflowOptions }),
        size({
          ...this.detectOverflowOptions,
          apply: ({ rects, availableWidth, availableHeight }) => {
            const { width: anchorWidth, height: anchorHeight } = rects.reference;
            set(__privateGet(this, _availableWidth), proxy(availableWidth, null, __privateGet(this, _availableWidth)));
            set(__privateGet(this, _availableHeight), proxy(availableHeight, null, __privateGet(this, _availableHeight)));
            set(__privateGet(this, _anchorWidth), proxy(anchorWidth, null, __privateGet(this, _anchorWidth)));
            set(__privateGet(this, _anchorHeight), proxy(anchorHeight, null, __privateGet(this, _anchorHeight)));
          }
        }),
        this.arrowRef.current && arrow({
          element: this.arrowRef.current,
          padding: __privateGet(this, _arrowPadding).current
        }),
        transformOrigin({
          arrowWidth: get$2(__privateGet(this, _arrowWidth)),
          arrowHeight: get$2(__privateGet(this, _arrowHeight))
        }),
        __privateGet(this, _hideWhenDetached).current && hide({
          strategy: "referenceHidden",
          ...this.detectOverflowOptions
        })
      ].filter(Boolean)));
      __publicField(this, "floating");
      __privateAdd(this, _placedSide, /* @__PURE__ */ derived(() => getSideFromPlacement(this.floating.placement)));
      __privateAdd(this, _placedAlign, /* @__PURE__ */ derived(() => getAlignFromPlacement(this.floating.placement)));
      __privateAdd(this, _arrowX, /* @__PURE__ */ derived(() => {
        var _a2;
        return ((_a2 = this.floating.middlewareData.arrow) == null ? void 0 : _a2.x) ?? 0;
      }));
      __privateAdd(this, _arrowY, /* @__PURE__ */ derived(() => {
        var _a2;
        return ((_a2 = this.floating.middlewareData.arrow) == null ? void 0 : _a2.y) ?? 0;
      }));
      __privateAdd(this, _cannotCenterArrow, /* @__PURE__ */ derived(() => {
        var _a2;
        return strict_equals((_a2 = this.floating.middlewareData.arrow) == null ? void 0 : _a2.centerOffset, 0, false);
      }));
      __privateAdd(this, _contentZIndex, state());
      __privateAdd(this, _arrowBaseSide, /* @__PURE__ */ derived(() => OPPOSITE_SIDE[this.placedSide]));
      __privateAdd(this, _wrapperProps, /* @__PURE__ */ derived(() => {
        var _a2, _b2, _c;
        return {
          id: this.wrapperId.current,
          "data-bits-floating-content-wrapper": "",
          style: {
            ...this.floating.floatingStyles,
            // keep off page when measuring
            transform: this.floating.isPositioned ? this.floating.floatingStyles.transform : "translate(0, -200%)",
            minWidth: "max-content",
            zIndex: this.contentZIndex,
            "--bits-floating-transform-origin": `${(_a2 = this.floating.middlewareData.transformOrigin) == null ? void 0 : _a2.x} ${(_b2 = this.floating.middlewareData.transformOrigin) == null ? void 0 : _b2.y}`,
            "--bits-floating-available-width": `${get$2(__privateGet(this, _availableWidth))}px`,
            "--bits-floating-available-height": `${get$2(__privateGet(this, _availableHeight))}px`,
            "--bits-floating-anchor-width": `${get$2(__privateGet(this, _anchorWidth))}px`,
            "--bits-floating-anchor-height": `${get$2(__privateGet(this, _anchorHeight))}px`,
            // hide the content if using the hide middleware and should be hidden
            ...((_c = this.floating.middlewareData.hide) == null ? void 0 : _c.referenceHidden) && {
              visibility: "hidden",
              "pointer-events": "none"
            },
            ...get$2(__privateGet(this, _transformedStyle))
          },
          // Floating UI calculates logical alignment based the `dir` attribute
          dir: __privateGet(this, _dir).current
        };
      }));
      __privateAdd(this, _props20, /* @__PURE__ */ derived(() => ({
        "data-side": this.placedSide,
        "data-align": this.placedAlign,
        style: styleToString({
          ...get$2(__privateGet(this, _transformedStyle))
          // if the FloatingContent hasn't been placed yet (not all measurements done)
        })
      })));
      __privateAdd(this, _arrowStyle, /* @__PURE__ */ derived(() => ({
        position: "absolute",
        left: this.arrowX ? `${this.arrowX}px` : void 0,
        top: this.arrowY ? `${this.arrowY}px` : void 0,
        [this.arrowBaseSide]: 0,
        "transform-origin": {
          top: "",
          right: "0 0",
          bottom: "center 0",
          left: "100% 0"
        }[this.placedSide],
        transform: {
          top: "translateY(100%)",
          right: "translateY(50%) rotate(90deg) translateX(-50%)",
          bottom: "rotate(180deg)",
          left: "translateY(50%) rotate(-90deg) translateX(50%)"
        }[this.placedSide],
        visibility: this.cannotCenterArrow ? "hidden" : void 0
      })));
      this.id = props.id;
      __privateSet(this, _side, props.side);
      __privateSet(this, _sideOffset, props.sideOffset);
      __privateSet(this, _align, props.align);
      __privateSet(this, _alignOffset, props.alignOffset);
      __privateSet(this, _arrowPadding, props.arrowPadding);
      __privateSet(this, _avoidCollisions, props.avoidCollisions);
      __privateSet(this, _collisionBoundary, props.collisionBoundary);
      __privateSet(this, _collisionPadding, props.collisionPadding);
      __privateSet(this, _sticky, props.sticky);
      __privateSet(this, _hideWhenDetached, props.hideWhenDetached);
      __privateSet(this, _updatePositionStrategy, props.updatePositionStrategy);
      this.onPlaced = props.onPlaced;
      __privateSet(this, _strategy, props.strategy);
      __privateSet(this, _dir, props.dir);
      this.style = props.style;
      this.root = root2;
      this.enabled = props.enabled;
      this.wrapperId = props.wrapperId;
      if (props.customAnchor) {
        this.root.customAnchorNode.current = props.customAnchor.current;
      }
      user_effect(() => {
        props.customAnchor.current;
        untrack(() => {
          this.root.customAnchorNode.current = props.customAnchor.current;
        });
      });
      useRefById({
        id: this.wrapperId,
        ref: this.wrapperRef,
        deps: () => this.enabled.current
      });
      useRefById({
        id: this.id,
        ref: this.contentRef,
        deps: () => this.enabled.current
      });
      this.floating = useFloating({
        strategy: () => __privateGet(this, _strategy).current,
        placement: () => get$2(__privateGet(this, _desiredPlacement)),
        middleware: () => this.middleware,
        reference: this.root.anchorNode,
        whileElementsMounted: (...args) => {
          var _a2;
          const cleanup = autoUpdate(...args, {
            animationFrame: strict_equals((_a2 = __privateGet(this, _updatePositionStrategy)) == null ? void 0 : _a2.current, "always")
          });
          return cleanup;
        },
        open: () => this.enabled.current
      });
      user_effect(() => {
        var _a2;
        if (!this.floating.isPositioned) return;
        (_a2 = this.onPlaced) == null ? void 0 : _a2.current();
      });
      user_effect(() => {
        const contentNode = this.contentRef.current;
        if (!contentNode) return;
        untrack(() => {
          this.contentZIndex = window.getComputedStyle(contentNode).zIndex;
        });
      });
      user_effect(() => {
        this.floating.floating.current = this.wrapperRef.current;
      });
    }
    get hasExplicitBoundaries() {
      return get$2(__privateGet(this, _hasExplicitBoundaries));
    }
    set hasExplicitBoundaries(_2) {
      throw new Error("Cannot update a derived property ('hasExplicitBoundaries')");
    }
    get detectOverflowOptions() {
      return get$2(__privateGet(this, _detectOverflowOptions));
    }
    set detectOverflowOptions(_2) {
      throw new Error("Cannot update a derived property ('detectOverflowOptions')");
    }
    get middleware() {
      return get$2(__privateGet(this, _middleware));
    }
    set middleware(_2) {
      throw new Error("Cannot update a derived property ('middleware')");
    }
    get placedSide() {
      return get$2(__privateGet(this, _placedSide));
    }
    set placedSide(_2) {
      throw new Error("Cannot update a derived property ('placedSide')");
    }
    get placedAlign() {
      return get$2(__privateGet(this, _placedAlign));
    }
    set placedAlign(_2) {
      throw new Error("Cannot update a derived property ('placedAlign')");
    }
    get arrowX() {
      return get$2(__privateGet(this, _arrowX));
    }
    set arrowX(_2) {
      throw new Error("Cannot update a derived property ('arrowX')");
    }
    get arrowY() {
      return get$2(__privateGet(this, _arrowY));
    }
    set arrowY(_2) {
      throw new Error("Cannot update a derived property ('arrowY')");
    }
    get cannotCenterArrow() {
      return get$2(__privateGet(this, _cannotCenterArrow));
    }
    set cannotCenterArrow(_2) {
      throw new Error("Cannot update a derived property ('cannotCenterArrow')");
    }
    get contentZIndex() {
      return get$2(__privateGet(this, _contentZIndex));
    }
    set contentZIndex(value) {
      set(__privateGet(this, _contentZIndex), proxy(value, null, __privateGet(this, _contentZIndex)));
    }
    get arrowBaseSide() {
      return get$2(__privateGet(this, _arrowBaseSide));
    }
    set arrowBaseSide(_2) {
      throw new Error("Cannot update a derived property ('arrowBaseSide')");
    }
    get wrapperProps() {
      return get$2(__privateGet(this, _wrapperProps));
    }
    set wrapperProps(_2) {
      throw new Error("Cannot update a derived property ('wrapperProps')");
    }
    get props() {
      return get$2(__privateGet(this, _props20));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    get arrowStyle() {
      return get$2(__privateGet(this, _arrowStyle));
    }
    set arrowStyle(_2) {
      throw new Error("Cannot update a derived property ('arrowStyle')");
    }
    [ADD_OWNER](owner) {
      add_owner(get$2(__privateGet(this, _contentZIndex)), owner, false);
    }
  }
  _transformedStyle = new WeakMap();
  _dir = new WeakMap();
  _side = new WeakMap();
  _sideOffset = new WeakMap();
  _align = new WeakMap();
  _alignOffset = new WeakMap();
  _arrowPadding = new WeakMap();
  _avoidCollisions = new WeakMap();
  _collisionBoundary = new WeakMap();
  _collisionPadding = new WeakMap();
  _sticky = new WeakMap();
  _hideWhenDetached = new WeakMap();
  _strategy = new WeakMap();
  _updatePositionStrategy = new WeakMap();
  _arrowSize = new WeakMap();
  _arrowWidth = new WeakMap();
  _arrowHeight = new WeakMap();
  _desiredPlacement = new WeakMap();
  _boundary = new WeakMap();
  _hasExplicitBoundaries = new WeakMap();
  _detectOverflowOptions = new WeakMap();
  _availableWidth = new WeakMap();
  _availableHeight = new WeakMap();
  _anchorWidth = new WeakMap();
  _anchorHeight = new WeakMap();
  _middleware = new WeakMap();
  _placedSide = new WeakMap();
  _placedAlign = new WeakMap();
  _arrowX = new WeakMap();
  _arrowY = new WeakMap();
  _cannotCenterArrow = new WeakMap();
  _contentZIndex = new WeakMap();
  _arrowBaseSide = new WeakMap();
  _wrapperProps = new WeakMap();
  _props20 = new WeakMap();
  _arrowStyle = new WeakMap();
  class FloatingAnchorState {
    constructor(props, root2) {
      __publicField(this, "ref", box(null));
      if (props.virtualEl && props.virtualEl.current) {
        root2.triggerNode = box.from(props.virtualEl.current);
      } else {
        useRefById({
          id: props.id,
          ref: this.ref,
          onRefChange: (node) => {
            root2.triggerNode.current = node;
          }
        });
      }
    }
  }
  const [
    setFloatingRootContext,
    getFloatingRootContext
  ] = createContext("Floating.Root");
  const [
    setFloatingContentContext,
    getFloatingContentContext
  ] = createContext("Floating.Content");
  function useFloatingRootState() {
    return setFloatingRootContext(new FloatingRootState());
  }
  function useFloatingContentState(props) {
    return setFloatingContentContext(new FloatingContentState(props, getFloatingRootContext()));
  }
  function useFloatingAnchorState(props) {
    return new FloatingAnchorState(props, getFloatingRootContext());
  }
  function transformOrigin(options) {
    return {
      name: "transformOrigin",
      options,
      fn(data) {
        var _a2, _b2, _c;
        const { placement, rects, middlewareData } = data;
        const cannotCenterArrow = strict_equals((_a2 = middlewareData.arrow) == null ? void 0 : _a2.centerOffset, 0, false);
        const isArrowHidden = cannotCenterArrow;
        const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;
        const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;
        const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);
        const noArrowAlign = { start: "0%", center: "50%", end: "100%" }[placedAlign];
        const arrowXCenter = (((_b2 = middlewareData.arrow) == null ? void 0 : _b2.x) ?? 0) + arrowWidth / 2;
        const arrowYCenter = (((_c = middlewareData.arrow) == null ? void 0 : _c.y) ?? 0) + arrowHeight / 2;
        let x2 = "";
        let y2 = "";
        if (strict_equals(placedSide, "bottom")) {
          x2 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
          y2 = `${-arrowHeight}px`;
        } else if (strict_equals(placedSide, "top")) {
          x2 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
          y2 = `${rects.floating.height + arrowHeight}px`;
        } else if (strict_equals(placedSide, "right")) {
          x2 = `${-arrowHeight}px`;
          y2 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
        } else if (strict_equals(placedSide, "left")) {
          x2 = `${rects.floating.width + arrowHeight}px`;
          y2 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
        }
        return { data: { x: x2, y: y2 } };
      }
    };
  }
  function getSideAndAlignFromPlacement(placement) {
    const [side, align = "center"] = placement.split("-");
    return [side, align];
  }
  function getSideFromPlacement(placement) {
    return getSideAndAlignFromPlacement(placement)[0];
  }
  function getAlignFromPlacement(placement) {
    return getSideAndAlignFromPlacement(placement)[1];
  }
  mark_module_start();
  Floating_layer[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/utilities/floating-layer/components/floating-layer.svelte";
  function Floating_layer($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Floating_layer);
    validate_prop_bindings($$props, [], [], Floating_layer);
    useFloatingRootState();
    var fragment = comment();
    var node = first_child(fragment);
    snippet(node, () => $$props.children ?? noop$1);
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Floating_layer);
  mark_module_start();
  Floating_layer_anchor[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/utilities/floating-layer/components/floating-layer-anchor.svelte";
  function Floating_layer_anchor($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Floating_layer_anchor);
    validate_prop_bindings($$props, [], [], Floating_layer_anchor);
    useFloatingAnchorState({
      id: box.with(() => $$props.id),
      virtualEl: box.with(() => $$props.virtualEl)
    });
    var fragment = comment();
    var node = first_child(fragment);
    snippet(node, () => $$props.children ?? noop$1);
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Floating_layer_anchor);
  mark_module_start();
  Floating_layer_content[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/utilities/floating-layer/components/floating-layer-content.svelte";
  function Floating_layer_content($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Floating_layer_content);
    validate_prop_bindings($$props, [], [], Floating_layer_content);
    let side = prop($$props, "side", 3, "bottom"), sideOffset = prop($$props, "sideOffset", 3, 0), align = prop($$props, "align", 3, "center"), alignOffset = prop($$props, "alignOffset", 3, 0), arrowPadding = prop($$props, "arrowPadding", 3, 0), avoidCollisions = prop($$props, "avoidCollisions", 3, true), collisionBoundary = prop($$props, "collisionBoundary", 19, () => []), collisionPadding = prop($$props, "collisionPadding", 3, 0), hideWhenDetached = prop($$props, "hideWhenDetached", 3, false), onPlaced = prop($$props, "onPlaced", 3, () => {
    }), sticky = prop($$props, "sticky", 3, "partial"), updatePositionStrategy = prop($$props, "updatePositionStrategy", 3, "optimized"), strategy = prop($$props, "strategy", 3, "fixed"), dir = prop($$props, "dir", 3, "ltr"), style = prop($$props, "style", 19, () => ({})), wrapperId = prop($$props, "wrapperId", 19, useId), customAnchor = prop($$props, "customAnchor", 3, null);
    const contentState = useFloatingContentState({
      side: box.with(() => side()),
      sideOffset: box.with(() => sideOffset()),
      align: box.with(() => align()),
      alignOffset: box.with(() => alignOffset()),
      id: box.with(() => $$props.id),
      arrowPadding: box.with(() => arrowPadding()),
      avoidCollisions: box.with(() => avoidCollisions()),
      collisionBoundary: box.with(() => collisionBoundary()),
      collisionPadding: box.with(() => collisionPadding()),
      hideWhenDetached: box.with(() => hideWhenDetached()),
      onPlaced: box.with(() => onPlaced()),
      sticky: box.with(() => sticky()),
      updatePositionStrategy: box.with(() => updatePositionStrategy()),
      strategy: box.with(() => strategy()),
      dir: box.with(() => dir()),
      style: box.with(() => style()),
      enabled: box.with(() => false),
      wrapperId: box.with(() => wrapperId()),
      customAnchor: box.with(() => customAnchor())
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(contentState.wrapperProps, { style: { pointerEvents: "auto" } }));
    var fragment = comment();
    var node = first_child(fragment);
    snippet(node, () => $$props.content ?? noop$1, () => ({
      props: contentState.props,
      wrapperProps: get$2(mergedProps)
    }));
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Floating_layer_content);
  mark_module_start();
  Floating_layer_content_static[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/utilities/floating-layer/components/floating-layer-content-static.svelte";
  function Floating_layer_content_static($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Floating_layer_content_static);
    validate_prop_bindings($$props, [], [], Floating_layer_content_static);
    onMount(() => {
      var _a2;
      (_a2 = $$props.onPlaced) == null ? void 0 : _a2.call($$props);
    });
    var fragment = comment();
    var node = first_child(fragment);
    snippet(node, () => $$props.content ?? noop$1, () => ({ props: {}, wrapperProps: {} }));
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Floating_layer_content_static);
  mark_module_start();
  Popper_content[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/utilities/popper-layer/popper-content.svelte";
  function Popper_content($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Popper_content);
    validate_prop_bindings($$props, [], [], Popper_content);
    let isStatic = prop($$props, "isStatic", 3, false), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "content",
        "isStatic",
        "onPlaced"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        Floating_layer_content_static($$anchor2, {
          get content() {
            return $$props.content;
          },
          get onPlaced() {
            return $$props.onPlaced;
          }
        });
      };
      var alternate = ($$anchor2) => {
        Floating_layer_content($$anchor2, spread_props(
          {
            get content() {
              return $$props.content;
            },
            get onPlaced() {
              return $$props.onPlaced;
            }
          },
          () => restProps
        ));
      };
      if_block(node, ($$render) => {
        if (isStatic()) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Popper_content);
  mark_module_start();
  Popper_layer_inner[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/utilities/popper-layer/popper-layer-inner.svelte";
  var root_1$6 = add_locations(/* @__PURE__ */ template(`<!> <!>`, 1), Popper_layer_inner[FILENAME], []);
  function Popper_layer_inner($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Popper_layer_inner);
    validate_prop_bindings($$props, [], [], Popper_layer_inner);
    let interactOutsideBehavior = prop($$props, "interactOutsideBehavior", 3, "close"), trapFocus = prop($$props, "trapFocus", 3, true), isValidEvent2 = prop($$props, "isValidEvent", 3, () => false), customAnchor = prop($$props, "customAnchor", 3, null), isStatic = prop($$props, "isStatic", 3, false), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "popper",
        "onEscapeKeydown",
        "escapeKeydownBehavior",
        "preventOverflowTextSelection",
        "id",
        "onPointerDown",
        "onPointerUp",
        "side",
        "sideOffset",
        "align",
        "alignOffset",
        "arrowPadding",
        "avoidCollisions",
        "collisionBoundary",
        "collisionPadding",
        "sticky",
        "hideWhenDetached",
        "updatePositionStrategy",
        "strategy",
        "dir",
        "preventScroll",
        "wrapperId",
        "style",
        "onPlaced",
        "onInteractOutside",
        "onCloseAutoFocus",
        "onOpenAutoFocus",
        "onFocusOutside",
        "interactOutsideBehavior",
        "loop",
        "trapFocus",
        "isValidEvent",
        "customAnchor",
        "isStatic",
        "enabled"
      ],
      "restProps"
    );
    {
      const content = wrap_snippet(Popper_layer_inner, ($$anchor2, $$arg0) => {
        let floatingProps = () => $$arg0 == null ? void 0 : $$arg0().props;
        floatingProps();
        let wrapperProps = () => $$arg0 == null ? void 0 : $$arg0().wrapperProps;
        wrapperProps();
        var fragment_1 = root_1$6();
        var node = first_child(fragment_1);
        {
          var consequent = ($$anchor3) => {
            Scroll_lock($$anchor3, {
              get preventScroll() {
                return $$props.preventScroll;
              }
            });
          };
          var alternate = ($$anchor3) => {
            var fragment_3 = comment();
            var node_1 = first_child(fragment_3);
            {
              var consequent_1 = ($$anchor4) => {
                Scroll_lock($$anchor4, {
                  get preventScroll() {
                    return $$props.preventScroll;
                  }
                });
              };
              if_block(
                node_1,
                ($$render) => {
                  if (!$$props.forceMount) $$render(consequent_1);
                },
                true
              );
            }
            append($$anchor3, fragment_3);
          };
          if_block(node, ($$render) => {
            if ($$props.forceMount && $$props.enabled) $$render(consequent);
            else $$render(alternate, false);
          });
        }
        var node_2 = sibling(node, 2);
        var trapFocus_1 = /* @__PURE__ */ derived(() => $$props.enabled && trapFocus());
        {
          const focusScope = wrap_snippet(Popper_layer_inner, ($$anchor3, $$arg02) => {
            let focusScopeProps = () => $$arg02 == null ? void 0 : $$arg02().props;
            focusScopeProps();
            Escape_layer($$anchor3, {
              get onEscapeKeydown() {
                return $$props.onEscapeKeydown;
              },
              get escapeKeydownBehavior() {
                return $$props.escapeKeydownBehavior;
              },
              get enabled() {
                return $$props.enabled;
              },
              children: wrap_snippet(Popper_layer_inner, ($$anchor4, $$slotProps) => {
                {
                  const children = wrap_snippet(Popper_layer_inner, ($$anchor5, $$arg03) => {
                    let dismissibleProps = () => $$arg03 == null ? void 0 : $$arg03().props;
                    dismissibleProps();
                    Text_selection_layer($$anchor5, {
                      get id() {
                        return $$props.id;
                      },
                      get preventOverflowTextSelection() {
                        return $$props.preventOverflowTextSelection;
                      },
                      get onPointerDown() {
                        return $$props.onPointerDown;
                      },
                      get onPointerUp() {
                        return $$props.onPointerUp;
                      },
                      get enabled() {
                        return $$props.enabled;
                      },
                      children: wrap_snippet(Popper_layer_inner, ($$anchor6, $$slotProps2) => {
                        var fragment_8 = comment();
                        var node_3 = first_child(fragment_8);
                        var render_arg = /* @__PURE__ */ derived_safe_equal(() => ({
                          props: mergeProps(restProps, floatingProps(), dismissibleProps(), focusScopeProps(), { style: { pointerEvents: "auto" } }),
                          wrapperProps: wrapperProps()
                        }));
                        snippet(node_3, () => $$props.popper ?? noop$1, () => get$2(render_arg));
                        append($$anchor6, fragment_8);
                      }),
                      $$slots: { default: true }
                    });
                  });
                  Dismissible_layer($$anchor4, {
                    get id() {
                      return $$props.id;
                    },
                    get onInteractOutside() {
                      return $$props.onInteractOutside;
                    },
                    get onFocusOutside() {
                      return $$props.onFocusOutside;
                    },
                    get interactOutsideBehavior() {
                      return interactOutsideBehavior();
                    },
                    get isValidEvent() {
                      return isValidEvent2();
                    },
                    get enabled() {
                      return $$props.enabled;
                    },
                    children,
                    $$slots: { default: true }
                  });
                }
              }),
              $$slots: { default: true }
            });
          });
          Focus_scope(node_2, {
            get id() {
              return $$props.id;
            },
            get onOpenAutoFocus() {
              return $$props.onOpenAutoFocus;
            },
            get onCloseAutoFocus() {
              return $$props.onCloseAutoFocus;
            },
            get loop() {
              return $$props.loop;
            },
            get trapFocus() {
              return get$2(trapFocus_1);
            },
            get forceMount() {
              return $$props.forceMount;
            },
            focusScope,
            $$slots: { focusScope: true }
          });
        }
        append($$anchor2, fragment_1);
      });
      Popper_content($$anchor, {
        get isStatic() {
          return isStatic();
        },
        get id() {
          return $$props.id;
        },
        get side() {
          return $$props.side;
        },
        get sideOffset() {
          return $$props.sideOffset;
        },
        get align() {
          return $$props.align;
        },
        get alignOffset() {
          return $$props.alignOffset;
        },
        get arrowPadding() {
          return $$props.arrowPadding;
        },
        get avoidCollisions() {
          return $$props.avoidCollisions;
        },
        get collisionBoundary() {
          return $$props.collisionBoundary;
        },
        get collisionPadding() {
          return $$props.collisionPadding;
        },
        get sticky() {
          return $$props.sticky;
        },
        get hideWhenDetached() {
          return $$props.hideWhenDetached;
        },
        get updatePositionStrategy() {
          return $$props.updatePositionStrategy;
        },
        get strategy() {
          return $$props.strategy;
        },
        get dir() {
          return $$props.dir;
        },
        get wrapperId() {
          return $$props.wrapperId;
        },
        get style() {
          return $$props.style;
        },
        get onPlaced() {
          return $$props.onPlaced;
        },
        get customAnchor() {
          return customAnchor();
        },
        content,
        $$slots: { content: true }
      });
    }
    return pop({ ...legacy_api() });
  }
  mark_module_end(Popper_layer_inner);
  mark_module_start();
  Popper_layer[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/utilities/popper-layer/popper-layer.svelte";
  function Popper_layer($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Popper_layer);
    validate_prop_bindings($$props, [], [], Popper_layer);
    let interactOutsideBehavior = prop($$props, "interactOutsideBehavior", 3, "close"), trapFocus = prop($$props, "trapFocus", 3, true), isValidEvent2 = prop($$props, "isValidEvent", 3, () => false), customAnchor = prop($$props, "customAnchor", 3, null), isStatic = prop($$props, "isStatic", 3, false), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "popper",
        "present",
        "onEscapeKeydown",
        "escapeKeydownBehavior",
        "preventOverflowTextSelection",
        "id",
        "onPointerDown",
        "onPointerUp",
        "side",
        "sideOffset",
        "align",
        "alignOffset",
        "arrowPadding",
        "avoidCollisions",
        "collisionBoundary",
        "collisionPadding",
        "sticky",
        "hideWhenDetached",
        "updatePositionStrategy",
        "strategy",
        "dir",
        "preventScroll",
        "wrapperId",
        "style",
        "onPlaced",
        "onInteractOutside",
        "onCloseAutoFocus",
        "onOpenAutoFocus",
        "onFocusOutside",
        "interactOutsideBehavior",
        "loop",
        "trapFocus",
        "isValidEvent",
        "customAnchor",
        "isStatic"
      ],
      "restProps"
    );
    {
      const presence = wrap_snippet(Popper_layer, ($$anchor2, $$arg0) => {
        let present = () => $$arg0 == null ? void 0 : $$arg0().present;
        present();
        Popper_layer_inner($$anchor2, spread_props(
          {
            get popper() {
              return $$props.popper;
            },
            get onEscapeKeydown() {
              return $$props.onEscapeKeydown;
            },
            get escapeKeydownBehavior() {
              return $$props.escapeKeydownBehavior;
            },
            get preventOverflowTextSelection() {
              return $$props.preventOverflowTextSelection;
            },
            get id() {
              return $$props.id;
            },
            get onPointerDown() {
              return $$props.onPointerDown;
            },
            get onPointerUp() {
              return $$props.onPointerUp;
            },
            get side() {
              return $$props.side;
            },
            get sideOffset() {
              return $$props.sideOffset;
            },
            get align() {
              return $$props.align;
            },
            get alignOffset() {
              return $$props.alignOffset;
            },
            get arrowPadding() {
              return $$props.arrowPadding;
            },
            get avoidCollisions() {
              return $$props.avoidCollisions;
            },
            get collisionBoundary() {
              return $$props.collisionBoundary;
            },
            get collisionPadding() {
              return $$props.collisionPadding;
            },
            get sticky() {
              return $$props.sticky;
            },
            get hideWhenDetached() {
              return $$props.hideWhenDetached;
            },
            get updatePositionStrategy() {
              return $$props.updatePositionStrategy;
            },
            get strategy() {
              return $$props.strategy;
            },
            get dir() {
              return $$props.dir;
            },
            get preventScroll() {
              return $$props.preventScroll;
            },
            get wrapperId() {
              return $$props.wrapperId;
            },
            get style() {
              return $$props.style;
            },
            get onPlaced() {
              return $$props.onPlaced;
            },
            get customAnchor() {
              return customAnchor();
            },
            get isStatic() {
              return isStatic();
            },
            get enabled() {
              return present().current;
            },
            get onInteractOutside() {
              return $$props.onInteractOutside;
            },
            get onCloseAutoFocus() {
              return $$props.onCloseAutoFocus;
            },
            get onOpenAutoFocus() {
              return $$props.onOpenAutoFocus;
            },
            get interactOutsideBehavior() {
              return interactOutsideBehavior();
            },
            get loop() {
              return $$props.loop;
            },
            get trapFocus() {
              return trapFocus();
            },
            get isValidEvent() {
              return isValidEvent2();
            },
            get onFocusOutside() {
              return $$props.onFocusOutside;
            },
            forceMount: false
          },
          () => restProps
        ));
      });
      Presence_layer($$anchor, spread_props(
        {
          get id() {
            return $$props.id;
          },
          get present() {
            return $$props.present;
          }
        },
        () => restProps,
        { presence, $$slots: { presence: true } }
      ));
    }
    return pop({ ...legacy_api() });
  }
  mark_module_end(Popper_layer);
  mark_module_start();
  Popper_layer_force_mount[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/utilities/popper-layer/popper-layer-force-mount.svelte";
  function Popper_layer_force_mount($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Popper_layer_force_mount);
    validate_prop_bindings($$props, [], [], Popper_layer_force_mount);
    let interactOutsideBehavior = prop($$props, "interactOutsideBehavior", 3, "close"), trapFocus = prop($$props, "trapFocus", 3, true), isValidEvent2 = prop($$props, "isValidEvent", 3, () => false), customAnchor = prop($$props, "customAnchor", 3, null), isStatic = prop($$props, "isStatic", 3, false), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "popper",
        "onEscapeKeydown",
        "escapeKeydownBehavior",
        "preventOverflowTextSelection",
        "id",
        "onPointerDown",
        "onPointerUp",
        "side",
        "sideOffset",
        "align",
        "alignOffset",
        "arrowPadding",
        "avoidCollisions",
        "collisionBoundary",
        "collisionPadding",
        "sticky",
        "hideWhenDetached",
        "updatePositionStrategy",
        "strategy",
        "dir",
        "preventScroll",
        "wrapperId",
        "style",
        "onPlaced",
        "onInteractOutside",
        "onCloseAutoFocus",
        "onOpenAutoFocus",
        "onFocusOutside",
        "interactOutsideBehavior",
        "loop",
        "trapFocus",
        "isValidEvent",
        "customAnchor",
        "isStatic",
        "enabled"
      ],
      "restProps"
    );
    Popper_layer_inner($$anchor, spread_props(
      {
        get popper() {
          return $$props.popper;
        },
        get onEscapeKeydown() {
          return $$props.onEscapeKeydown;
        },
        get escapeKeydownBehavior() {
          return $$props.escapeKeydownBehavior;
        },
        get preventOverflowTextSelection() {
          return $$props.preventOverflowTextSelection;
        },
        get id() {
          return $$props.id;
        },
        get onPointerDown() {
          return $$props.onPointerDown;
        },
        get onPointerUp() {
          return $$props.onPointerUp;
        },
        get side() {
          return $$props.side;
        },
        get sideOffset() {
          return $$props.sideOffset;
        },
        get align() {
          return $$props.align;
        },
        get alignOffset() {
          return $$props.alignOffset;
        },
        get arrowPadding() {
          return $$props.arrowPadding;
        },
        get avoidCollisions() {
          return $$props.avoidCollisions;
        },
        get collisionBoundary() {
          return $$props.collisionBoundary;
        },
        get collisionPadding() {
          return $$props.collisionPadding;
        },
        get sticky() {
          return $$props.sticky;
        },
        get hideWhenDetached() {
          return $$props.hideWhenDetached;
        },
        get updatePositionStrategy() {
          return $$props.updatePositionStrategy;
        },
        get strategy() {
          return $$props.strategy;
        },
        get dir() {
          return $$props.dir;
        },
        get preventScroll() {
          return $$props.preventScroll;
        },
        get wrapperId() {
          return $$props.wrapperId;
        },
        get style() {
          return $$props.style;
        },
        get onPlaced() {
          return $$props.onPlaced;
        },
        get customAnchor() {
          return customAnchor();
        },
        get isStatic() {
          return isStatic();
        },
        get enabled() {
          return $$props.enabled;
        },
        get onInteractOutside() {
          return $$props.onInteractOutside;
        },
        get onCloseAutoFocus() {
          return $$props.onCloseAutoFocus;
        },
        get onOpenAutoFocus() {
          return $$props.onOpenAutoFocus;
        },
        get interactOutsideBehavior() {
          return interactOutsideBehavior();
        },
        get loop() {
          return $$props.loop;
        },
        get trapFocus() {
          return trapFocus();
        },
        get isValidEvent() {
          return isValidEvent2();
        },
        get onFocusOutside() {
          return $$props.onFocusOutside;
        }
      },
      () => restProps,
      { forceMount: true }
    ));
    return pop({ ...legacy_api() });
  }
  mark_module_end(Popper_layer_force_mount);
  class PopoverRootState {
    constructor(props) {
      __publicField(this, "open");
      __privateAdd(this, _contentNode2, state(null));
      __privateAdd(this, _contentId2, state(void 0));
      __privateAdd(this, _triggerNode2, state(null));
      this.open = props.open;
    }
    get contentNode() {
      return get$2(__privateGet(this, _contentNode2));
    }
    set contentNode(value) {
      set(__privateGet(this, _contentNode2), proxy(value, null, __privateGet(this, _contentNode2)));
    }
    get contentId() {
      return get$2(__privateGet(this, _contentId2));
    }
    set contentId(value) {
      set(__privateGet(this, _contentId2), proxy(value, null, __privateGet(this, _contentId2)));
    }
    get triggerNode() {
      return get$2(__privateGet(this, _triggerNode2));
    }
    set triggerNode(value) {
      set(__privateGet(this, _triggerNode2), proxy(value, null, __privateGet(this, _triggerNode2)));
    }
    toggleOpen() {
      this.open.current = !this.open.current;
    }
    handleClose() {
      if (!this.open.current) return;
      this.open.current = false;
    }
    [ADD_OWNER](owner) {
      add_owner(get$2(__privateGet(this, _contentNode2)), owner, false);
      add_owner(get$2(__privateGet(this, _contentId2)), owner, false);
      add_owner(get$2(__privateGet(this, _triggerNode2)), owner, false);
    }
  }
  _contentNode2 = new WeakMap();
  _contentId2 = new WeakMap();
  _triggerNode2 = new WeakMap();
  class PopoverTriggerState {
    constructor(props, root2) {
      __privateAdd(this, _PopoverTriggerState_instances);
      __privateAdd(this, _id12);
      __privateAdd(this, _ref12);
      __privateAdd(this, _disabled4);
      __privateAdd(this, _root6);
      __privateAdd(this, _props21, /* @__PURE__ */ derived(() => ({
        id: __privateGet(this, _id12).current,
        "aria-haspopup": "dialog",
        "aria-expanded": getAriaExpanded(__privateGet(this, _root6).open.current),
        "data-state": getDataOpenClosed(__privateGet(this, _root6).open.current),
        "aria-controls": __privateMethod(this, _PopoverTriggerState_instances, getAriaControls_fn).call(this),
        "data-popover-trigger": "",
        disabled: __privateGet(this, _disabled4).current,
        //
        onpointerdown: this.onpointerdown,
        onkeydown: this.onkeydown,
        onclick: this.onclick
      })));
      __privateSet(this, _id12, props.id);
      __privateSet(this, _root6, root2);
      __privateSet(this, _ref12, props.ref);
      __privateSet(this, _disabled4, props.disabled);
      useRefById({
        id: __privateGet(this, _id12),
        ref: __privateGet(this, _ref12),
        onRefChange: (node) => {
          __privateGet(this, _root6).triggerNode = node;
        }
      });
      this.onclick = this.onclick.bind(this);
      this.onpointerdown = this.onpointerdown.bind(this);
      this.onkeydown = this.onkeydown.bind(this);
    }
    onclick(e) {
      if (__privateGet(this, _disabled4).current) return;
      if (strict_equals(e.button, 0, false)) return;
      __privateGet(this, _root6).toggleOpen();
    }
    onpointerdown(e) {
      if (__privateGet(this, _disabled4).current) return;
      if (strict_equals(e.button, 0, false)) return;
      e.preventDefault();
    }
    onkeydown(e) {
      if (__privateGet(this, _disabled4).current) return;
      if (!(strict_equals(e.key, ENTER) || strict_equals(e.key, SPACE))) return;
      e.preventDefault();
      __privateGet(this, _root6).toggleOpen();
    }
    get props() {
      return get$2(__privateGet(this, _props21));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _id12 = new WeakMap();
  _ref12 = new WeakMap();
  _disabled4 = new WeakMap();
  _root6 = new WeakMap();
  _PopoverTriggerState_instances = new WeakSet();
  getAriaControls_fn = function() {
    if (__privateGet(this, _root6).open.current && __privateGet(this, _root6).contentId) {
      return __privateGet(this, _root6).contentId;
    }
    return void 0;
  };
  _props21 = new WeakMap();
  class PopoverContentState {
    constructor(props, root2) {
      __privateAdd(this, _id13);
      __privateAdd(this, _ref13);
      __publicField(this, "root");
      __privateAdd(this, _snippetProps4, /* @__PURE__ */ derived(() => ({ open: this.root.open.current })));
      __privateAdd(this, _props22, /* @__PURE__ */ derived(() => ({
        id: __privateGet(this, _id13).current,
        tabindex: -1,
        "data-state": getDataOpenClosed(this.root.open.current),
        "data-popover-content": "",
        style: { pointerEvents: "auto" }
      })));
      __privateSet(this, _id13, props.id);
      this.root = root2;
      __privateSet(this, _ref13, props.ref);
      useRefById({
        id: __privateGet(this, _id13),
        ref: __privateGet(this, _ref13),
        deps: () => this.root.open.current,
        onRefChange: (node) => {
          this.root.contentNode = node;
          this.root.contentId = node == null ? void 0 : node.id;
        }
      });
    }
    get snippetProps() {
      return get$2(__privateGet(this, _snippetProps4));
    }
    set snippetProps(_2) {
      throw new Error("Cannot update a derived property ('snippetProps')");
    }
    get props() {
      return get$2(__privateGet(this, _props22));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _id13 = new WeakMap();
  _ref13 = new WeakMap();
  _snippetProps4 = new WeakMap();
  _props22 = new WeakMap();
  const [setPopoverRootContext, getPopoverRootContext] = createContext("Popover.Root");
  function usePopoverRoot(props) {
    return setPopoverRootContext(new PopoverRootState(props));
  }
  function usePopoverTrigger(props) {
    return new PopoverTriggerState(props, getPopoverRootContext());
  }
  function usePopoverContent(props) {
    return new PopoverContentState(props, getPopoverRootContext());
  }
  mark_module_start();
  Popover_content$1[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/popover/components/popover-content.svelte";
  var root_4$1 = add_locations(/* @__PURE__ */ template(`<div><div><!></div></div>`), Popover_content$1[FILENAME], [[77, 4, [[78, 5]]]]);
  var root_9$1 = add_locations(/* @__PURE__ */ template(`<div><div><!></div></div>`), Popover_content$1[FILENAME], [[105, 4, [[106, 5]]]]);
  function Popover_content$1($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Popover_content$1);
    validate_prop_bindings($$props, ["ref"], [], Popover_content$1);
    let ref = prop($$props, "ref", 15, null), id = prop($$props, "id", 19, useId), forceMount = prop($$props, "forceMount", 3, false), onCloseAutoFocus = prop($$props, "onCloseAutoFocus", 3, noop), onEscapeKeydown = prop($$props, "onEscapeKeydown", 3, noop), onInteractOutside = prop($$props, "onInteractOutside", 3, noop), trapFocus = prop($$props, "trapFocus", 3, true), preventScroll = prop($$props, "preventScroll", 3, false), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "child",
        "children",
        "ref",
        "id",
        "forceMount",
        "onCloseAutoFocus",
        "onEscapeKeydown",
        "onInteractOutside",
        "trapFocus",
        "preventScroll"
      ],
      "restProps"
    );
    const contentState = usePopoverContent({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, contentState.props));
    function handleInteractOutside(e) {
      onInteractOutside()(e);
      if (e.defaultPrevented) return;
      if (isHTMLElement$1(e.target) && e.target.closest("[data-popover-trigger")) return;
      contentState.root.handleClose();
    }
    function handleEscapeKeydown(e) {
      onEscapeKeydown()(e);
      if (e.defaultPrevented) return;
      contentState.root.handleClose();
    }
    function handleCloseAutoFocus(e) {
      var _a2;
      onCloseAutoFocus()(e);
      if (e.defaultPrevented) return;
      e.preventDefault();
      (_a2 = contentState.root.triggerNode) == null ? void 0 : _a2.focus();
    }
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent_1 = ($$anchor2) => {
        {
          const popper = wrap_snippet(Popover_content$1, ($$anchor3, $$arg0) => {
            let props = () => $$arg0 == null ? void 0 : $$arg0().props;
            props();
            let wrapperProps = () => $$arg0 == null ? void 0 : $$arg0().wrapperProps;
            wrapperProps();
            var fragment_2 = comment();
            const finalProps = /* @__PURE__ */ derived(() => mergeProps(props(), {
              style: getFloatingContentCSSVars("popover")
            }));
            get$2(finalProps);
            var node_1 = first_child(fragment_2);
            {
              var consequent = ($$anchor4) => {
                var fragment_3 = comment();
                var node_2 = first_child(fragment_3);
                snippet(node_2, () => $$props.child, () => ({
                  props: get$2(finalProps),
                  wrapperProps: wrapperProps(),
                  ...contentState.snippetProps
                }));
                append($$anchor4, fragment_3);
              };
              var alternate = ($$anchor4) => {
                var div = root_4$1();
                let attributes;
                var div_1 = child(div);
                let attributes_1;
                var node_3 = child(div_1);
                snippet(node_3, () => $$props.children ?? noop$1);
                reset(div_1);
                reset(div);
                template_effect(() => {
                  attributes = set_attributes(div, attributes, { ...wrapperProps() });
                  attributes_1 = set_attributes(div_1, attributes_1, { ...get$2(finalProps) });
                });
                append($$anchor4, div);
              };
              if_block(node_1, ($$render) => {
                if ($$props.child) $$render(consequent);
                else $$render(alternate, false);
              });
            }
            append($$anchor3, fragment_2);
          });
          Popper_layer_force_mount($$anchor2, spread_props(() => get$2(mergedProps), {
            get enabled() {
              return contentState.root.open.current;
            },
            get id() {
              return id();
            },
            onInteractOutside: handleInteractOutside,
            onEscapeKeydown: handleEscapeKeydown,
            onCloseAutoFocus: handleCloseAutoFocus,
            get trapFocus() {
              return trapFocus();
            },
            get preventScroll() {
              return preventScroll();
            },
            loop: true,
            forceMount: true,
            popper,
            $$slots: { popper: true }
          }));
        }
      };
      var alternate_2 = ($$anchor2) => {
        var fragment_4 = comment();
        var node_4 = first_child(fragment_4);
        {
          var consequent_3 = ($$anchor3) => {
            {
              const popper = wrap_snippet(Popover_content$1, ($$anchor4, $$arg0) => {
                let props = () => $$arg0 == null ? void 0 : $$arg0().props;
                props();
                let wrapperProps = () => $$arg0 == null ? void 0 : $$arg0().wrapperProps;
                wrapperProps();
                var fragment_6 = comment();
                const finalProps = /* @__PURE__ */ derived(() => mergeProps(props(), {
                  style: getFloatingContentCSSVars("popover")
                }));
                get$2(finalProps);
                var node_5 = first_child(fragment_6);
                {
                  var consequent_2 = ($$anchor5) => {
                    var fragment_7 = comment();
                    var node_6 = first_child(fragment_7);
                    snippet(node_6, () => $$props.child, () => ({
                      props: get$2(finalProps),
                      wrapperProps: wrapperProps(),
                      ...contentState.snippetProps
                    }));
                    append($$anchor5, fragment_7);
                  };
                  var alternate_1 = ($$anchor5) => {
                    var div_2 = root_9$1();
                    let attributes_2;
                    var div_3 = child(div_2);
                    let attributes_3;
                    var node_7 = child(div_3);
                    snippet(node_7, () => $$props.children ?? noop$1);
                    reset(div_3);
                    reset(div_2);
                    template_effect(() => {
                      attributes_2 = set_attributes(div_2, attributes_2, { ...wrapperProps() });
                      attributes_3 = set_attributes(div_3, attributes_3, { ...get$2(finalProps) });
                    });
                    append($$anchor5, div_2);
                  };
                  if_block(node_5, ($$render) => {
                    if ($$props.child) $$render(consequent_2);
                    else $$render(alternate_1, false);
                  });
                }
                append($$anchor4, fragment_6);
              });
              Popper_layer($$anchor3, spread_props(() => get$2(mergedProps), {
                get present() {
                  return contentState.root.open.current;
                },
                get id() {
                  return id();
                },
                onInteractOutside: handleInteractOutside,
                onEscapeKeydown: handleEscapeKeydown,
                onCloseAutoFocus: handleCloseAutoFocus,
                get trapFocus() {
                  return trapFocus();
                },
                get preventScroll() {
                  return preventScroll();
                },
                loop: true,
                forceMount: false,
                popper,
                $$slots: { popper: true }
              }));
            }
          };
          if_block(
            node_4,
            ($$render) => {
              if (!forceMount()) $$render(consequent_3);
            },
            true
          );
        }
        append($$anchor2, fragment_4);
      };
      if_block(node, ($$render) => {
        if (forceMount()) $$render(consequent_1);
        else $$render(alternate_2, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Popover_content$1);
  mark_module_start();
  Popover_trigger[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/popover/components/popover-trigger.svelte";
  var root_3$2 = add_locations(/* @__PURE__ */ template(`<button><!></button>`), Popover_trigger[FILENAME], [[34, 2]]);
  function Popover_trigger($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Popover_trigger);
    validate_prop_bindings($$props, ["ref"], [], Popover_trigger);
    let id = prop($$props, "id", 19, useId), ref = prop($$props, "ref", 15, null), type = prop($$props, "type", 3, "button"), disabled = prop($$props, "disabled", 3, false), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "children",
        "child",
        "id",
        "ref",
        "type",
        "disabled"
      ],
      "restProps"
    );
    const triggerState = usePopoverTrigger({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2)),
      disabled: box.with(() => Boolean(disabled()))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, triggerState.props, { type: type() }));
    Floating_layer_anchor($$anchor, {
      get id() {
        return id();
      },
      children: wrap_snippet(Popover_trigger, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node = first_child(fragment_1);
        {
          var consequent = ($$anchor3) => {
            var fragment_2 = comment();
            var node_1 = first_child(fragment_2);
            snippet(node_1, () => $$props.child, () => ({ props: get$2(mergedProps) }));
            append($$anchor3, fragment_2);
          };
          var alternate = ($$anchor3) => {
            var button = root_3$2();
            let attributes;
            var node_2 = child(button);
            snippet(node_2, () => $$props.children ?? noop$1);
            reset(button);
            template_effect(() => attributes = set_attributes(button, attributes, { ...get$2(mergedProps) }));
            append($$anchor3, button);
          };
          if_block(node, ($$render) => {
            if ($$props.child) $$render(consequent);
            else $$render(alternate, false);
          });
        }
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    });
    return pop({ ...legacy_api() });
  }
  mark_module_end(Popover_trigger);
  class RangeCalendarRootState {
    constructor(props) {
      __privateAdd(this, _RangeCalendarRootState_instances);
      __publicField(this, "id");
      __publicField(this, "ref");
      __publicField(this, "value");
      __publicField(this, "placeholder");
      __publicField(this, "preventDeselect");
      __publicField(this, "minValue");
      __publicField(this, "maxValue");
      __publicField(this, "disabled");
      __publicField(this, "pagedNavigation");
      __publicField(this, "weekStartsOn");
      __publicField(this, "weekdayFormat");
      __publicField(this, "isDateDisabledProp");
      __publicField(this, "isDateUnavailableProp");
      __publicField(this, "fixedWeeks");
      __publicField(this, "numberOfMonths");
      __publicField(this, "locale");
      __publicField(this, "calendarLabel");
      __publicField(this, "readonly");
      __publicField(this, "disableDaysOutsideMonth");
      __publicField(this, "onRangeSelect");
      __publicField(this, "startValue");
      __publicField(this, "endValue");
      __privateAdd(this, _months, state(proxy([])));
      __privateAdd(this, _visibleMonths, /* @__PURE__ */ derived(() => this.months.map((month) => month.value)));
      __publicField(this, "announcer");
      __publicField(this, "formatter");
      __publicField(this, "accessibleHeadingId", useId());
      __privateAdd(this, _focusedValue, state(void 0));
      __privateAdd(this, _lastPressedDateValue, state(void 0));
      __publicField(this, "setMonths", (months) => {
        this.months = months;
      });
      __privateAdd(this, _weekdays, /* @__PURE__ */ derived(() => {
        return getWeekdays({
          months: this.months,
          formatter: this.formatter,
          weekdayFormat: this.weekdayFormat.current
        });
      }));
      __privateAdd(this, _isStartInvalid, /* @__PURE__ */ derived(() => {
        if (!this.startValue.current) return false;
        return this.isDateUnavailable(this.startValue.current) || this.isDateDisabled(this.startValue.current);
      }));
      __privateAdd(this, _isEndInvalid, /* @__PURE__ */ derived(() => {
        if (!this.endValue.current) return false;
        return this.isDateUnavailable(this.endValue.current) || this.isDateDisabled(this.endValue.current);
      }));
      __privateAdd(this, _isInvalid, /* @__PURE__ */ derived(() => {
        if (this.isStartInvalid || this.isEndInvalid) return true;
        if (this.endValue.current && this.startValue.current && isBefore(this.endValue.current, this.startValue.current)) return true;
        return false;
      }));
      __privateAdd(this, _isNextButtonDisabled, /* @__PURE__ */ derived(() => {
        return getIsNextButtonDisabled({
          maxValue: this.maxValue.current,
          months: this.months,
          disabled: this.disabled.current
        });
      }));
      __privateAdd(this, _isPrevButtonDisabled, /* @__PURE__ */ derived(() => {
        return getIsPrevButtonDisabled({
          minValue: this.minValue.current,
          months: this.months,
          disabled: this.disabled.current
        });
      }));
      __privateAdd(this, _headingValue2, /* @__PURE__ */ derived(() => {
        return getCalendarHeadingValue({
          months: this.months,
          formatter: this.formatter,
          locale: this.locale.current
        });
      }));
      __privateAdd(this, _fullCalendarLabel, /* @__PURE__ */ derived(() => `${this.calendarLabel.current} ${this.headingValue}`));
      __privateAdd(this, _highlightedRange, /* @__PURE__ */ derived(() => {
        if (this.startValue.current && this.endValue.current) return null;
        if (!this.startValue.current || !this.focusedValue) return null;
        const isStartBeforeFocused = isBefore(this.startValue.current, this.focusedValue);
        const start = isStartBeforeFocused ? this.startValue.current : this.focusedValue;
        const end = isStartBeforeFocused ? this.focusedValue : this.startValue.current;
        if ($14e0f24ef4ac5c92$export$ea39ec197993aef0(start.add({ days: 1 }), end)) {
          return { start, end };
        }
        const isValid = areAllDaysBetweenValid(start, end, this.isDateUnavailable, this.isDateDisabled);
        if (isValid) {
          return { start, end };
        }
        return null;
      }));
      __privateAdd(this, _snippetProps5, /* @__PURE__ */ derived(() => ({ months: this.months, weekdays: this.weekdays })));
      __privateAdd(this, _props23, /* @__PURE__ */ derived(() => ({
        ...getCalendarElementProps({
          fullCalendarLabel: this.fullCalendarLabel,
          id: this.id.current,
          isInvalid: this.isInvalid,
          disabled: this.disabled.current,
          readonly: this.readonly.current
        }),
        [this.getBitsAttr("root")]: "",
        //
        onkeydown: this.onkeydown
      })));
      this.value = props.value;
      this.placeholder = props.placeholder;
      this.preventDeselect = props.preventDeselect;
      this.minValue = props.minValue;
      this.maxValue = props.maxValue;
      this.disabled = props.disabled;
      this.pagedNavigation = props.pagedNavigation;
      this.weekStartsOn = props.weekStartsOn;
      this.weekdayFormat = props.weekdayFormat;
      this.isDateDisabledProp = props.isDateDisabled;
      this.isDateUnavailableProp = props.isDateUnavailable;
      this.fixedWeeks = props.fixedWeeks;
      this.numberOfMonths = props.numberOfMonths;
      this.locale = props.locale;
      this.calendarLabel = props.calendarLabel;
      this.readonly = props.readonly;
      this.disableDaysOutsideMonth = props.disableDaysOutsideMonth;
      this.id = props.id;
      this.ref = props.ref;
      this.onRangeSelect = props.onRangeSelect;
      this.startValue = props.startValue;
      this.endValue = props.endValue;
      this.announcer = getAnnouncer();
      this.formatter = createFormatter(this.locale.current);
      useRefById({ id: this.id, ref: this.ref });
      this.months = createMonths({
        dateObj: this.placeholder.current,
        weekStartsOn: this.weekStartsOn.current,
        locale: this.locale.current,
        fixedWeeks: this.fixedWeeks.current,
        numberOfMonths: this.numberOfMonths.current
      });
      user_effect(() => {
        if (strict_equals(this.formatter.getLocale(), this.locale.current)) return;
        this.formatter.setLocale(this.locale.current);
      });
      useMonthViewPlaceholderSync({
        placeholder: this.placeholder,
        getVisibleMonths: () => this.visibleMonths,
        weekStartsOn: this.weekStartsOn,
        locale: this.locale,
        fixedWeeks: this.fixedWeeks,
        numberOfMonths: this.numberOfMonths,
        setMonths: this.setMonths
      });
      useMonthViewOptionsSync({
        fixedWeeks: this.fixedWeeks,
        locale: this.locale,
        numberOfMonths: this.numberOfMonths,
        placeholder: this.placeholder,
        setMonths: this.setMonths,
        weekStartsOn: this.weekStartsOn
      });
      user_effect(() => {
        const node = document.getElementById(this.accessibleHeadingId);
        if (!node) return;
        node.textContent = this.fullCalendarLabel;
      });
      user_effect(() => {
        const value = this.value.current;
        untrack(() => {
          if (value.start && value.end) {
            this.startValue.current = value.start;
            this.endValue.current = value.end;
          } else if (value.start) {
            this.startValue.current = value.start;
            this.endValue.current = void 0;
          }
        });
      });
      user_effect(() => {
        this.value.current;
        untrack(() => {
          const startValue = this.value.current.start;
          if (startValue && strict_equals(this.placeholder.current, startValue, false)) {
            this.placeholder.current = startValue;
          }
        });
      });
      user_effect(() => {
        const startValue = this.startValue.current;
        const endValue = this.endValue.current;
        untrack(() => {
          const value = this.value.current;
          if (value && strict_equals(value.start, startValue) && strict_equals(value.end, endValue)) {
            return;
          }
          if (startValue && endValue) {
            __privateMethod(this, _RangeCalendarRootState_instances, updateValue_fn).call(this, (prev) => {
              if (strict_equals(prev.start, startValue) && strict_equals(prev.end, endValue)) return prev;
              if (isBefore(endValue, startValue)) {
                const start = startValue;
                const end = endValue;
                __privateMethod(this, _RangeCalendarRootState_instances, setStartValue_fn).call(this, end);
                __privateMethod(this, _RangeCalendarRootState_instances, setEndValue_fn).call(this, start);
                return { start: endValue, end: startValue };
              } else {
                return { start: startValue, end: endValue };
              }
            });
          } else if (value && value.start && value.end) {
            this.value.current = { start: void 0, end: void 0 };
          }
        });
      });
      this.shiftFocus = this.shiftFocus.bind(this);
      this.handleCellClick = this.handleCellClick.bind(this);
      this.onkeydown = this.onkeydown.bind(this);
      this.nextPage = this.nextPage.bind(this);
      this.prevPage = this.prevPage.bind(this);
      this.nextYear = this.nextYear.bind(this);
      this.prevYear = this.prevYear.bind(this);
      this.setYear = this.setYear.bind(this);
      this.setMonth = this.setMonth.bind(this);
      this.isDateDisabled = this.isDateDisabled.bind(this);
      this.isDateUnavailable = this.isDateUnavailable.bind(this);
      this.isOutsideVisibleMonths = this.isOutsideVisibleMonths.bind(this);
      this.isSelected = this.isSelected.bind(this);
    }
    get months() {
      return get$2(__privateGet(this, _months));
    }
    set months(value) {
      set(__privateGet(this, _months), proxy(value, null, __privateGet(this, _months)));
    }
    get visibleMonths() {
      return get$2(__privateGet(this, _visibleMonths));
    }
    set visibleMonths(_2) {
      throw new Error("Cannot update a derived property ('visibleMonths')");
    }
    get focusedValue() {
      return get$2(__privateGet(this, _focusedValue));
    }
    set focusedValue(value) {
      set(__privateGet(this, _focusedValue), proxy(value, null, __privateGet(this, _focusedValue)));
    }
    get lastPressedDateValue() {
      return get$2(__privateGet(this, _lastPressedDateValue));
    }
    set lastPressedDateValue(value) {
      set(__privateGet(this, _lastPressedDateValue), proxy(value, null, __privateGet(this, _lastPressedDateValue)));
    }
    get weekdays() {
      return get$2(__privateGet(this, _weekdays));
    }
    set weekdays(_2) {
      throw new Error("Cannot update a derived property ('weekdays')");
    }
    isOutsideVisibleMonths(date) {
      return !this.visibleMonths.some((month) => $14e0f24ef4ac5c92$export$a18c89cbd24170ff(date, month));
    }
    isDateDisabled(date) {
      if (this.isDateDisabledProp.current(date) || this.disabled.current) return true;
      const minValue = this.minValue.current;
      const maxValue = this.maxValue.current;
      if (minValue && isBefore(date, minValue)) return true;
      if (maxValue && isAfter(date, maxValue)) return true;
      return false;
    }
    isDateUnavailable(date) {
      if (this.isDateUnavailableProp.current(date)) return true;
      return false;
    }
    get isStartInvalid() {
      return get$2(__privateGet(this, _isStartInvalid));
    }
    set isStartInvalid(_2) {
      throw new Error("Cannot update a derived property ('isStartInvalid')");
    }
    get isEndInvalid() {
      return get$2(__privateGet(this, _isEndInvalid));
    }
    set isEndInvalid(_2) {
      throw new Error("Cannot update a derived property ('isEndInvalid')");
    }
    get isInvalid() {
      return get$2(__privateGet(this, _isInvalid));
    }
    set isInvalid(_2) {
      throw new Error("Cannot update a derived property ('isInvalid')");
    }
    get isNextButtonDisabled() {
      return get$2(__privateGet(this, _isNextButtonDisabled));
    }
    set isNextButtonDisabled(_2) {
      throw new Error("Cannot update a derived property ('isNextButtonDisabled')");
    }
    get isPrevButtonDisabled() {
      return get$2(__privateGet(this, _isPrevButtonDisabled));
    }
    set isPrevButtonDisabled(_2) {
      throw new Error("Cannot update a derived property ('isPrevButtonDisabled')");
    }
    get headingValue() {
      return get$2(__privateGet(this, _headingValue2));
    }
    set headingValue(_2) {
      throw new Error("Cannot update a derived property ('headingValue')");
    }
    get fullCalendarLabel() {
      return get$2(__privateGet(this, _fullCalendarLabel));
    }
    set fullCalendarLabel(_2) {
      throw new Error("Cannot update a derived property ('fullCalendarLabel')");
    }
    isSelectionStart(date) {
      if (!this.startValue.current) return false;
      return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, this.startValue.current);
    }
    isSelectionEnd(date) {
      if (!this.endValue.current) return false;
      return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, this.endValue.current);
    }
    isSelected(date) {
      if (this.startValue.current && $14e0f24ef4ac5c92$export$ea39ec197993aef0(this.startValue.current, date)) return true;
      if (this.endValue.current && $14e0f24ef4ac5c92$export$ea39ec197993aef0(this.endValue.current, date)) return true;
      if (this.startValue.current && this.endValue.current) {
        return isBetweenInclusive(date, this.startValue.current, this.endValue.current);
      }
      return false;
    }
    get highlightedRange() {
      return get$2(__privateGet(this, _highlightedRange));
    }
    set highlightedRange(_2) {
      throw new Error("Cannot update a derived property ('highlightedRange')");
    }
    shiftFocus(node, add) {
      return shiftCalendarFocus({
        node,
        add,
        placeholder: this.placeholder,
        calendarNode: this.ref.current,
        isPrevButtonDisabled: this.isPrevButtonDisabled,
        isNextButtonDisabled: this.isNextButtonDisabled,
        months: this.months,
        numberOfMonths: this.numberOfMonths.current
      });
    }
    handleCellClick(e, date) {
      if (this.isDateDisabled(date) || this.isDateUnavailable(date)) return;
      const prevLastPressedDate = this.lastPressedDateValue;
      this.lastPressedDateValue = date;
      if (this.startValue.current && strict_equals(this.highlightedRange, null)) {
        if ($14e0f24ef4ac5c92$export$ea39ec197993aef0(this.startValue.current, date) && !this.preventDeselect.current && !this.endValue.current) {
          __privateMethod(this, _RangeCalendarRootState_instances, setStartValue_fn).call(this, void 0);
          this.placeholder.current = date;
          __privateMethod(this, _RangeCalendarRootState_instances, announceEmpty_fn).call(this);
          return;
        } else if (!this.endValue.current) {
          e.preventDefault();
          if (prevLastPressedDate && $14e0f24ef4ac5c92$export$ea39ec197993aef0(prevLastPressedDate, date)) {
            __privateMethod(this, _RangeCalendarRootState_instances, setStartValue_fn).call(this, date);
            __privateMethod(this, _RangeCalendarRootState_instances, announceSelectedDate_fn).call(this, date);
          }
        }
      }
      if (this.startValue.current && this.endValue.current && $14e0f24ef4ac5c92$export$ea39ec197993aef0(this.endValue.current, date) && !this.preventDeselect.current) {
        __privateMethod(this, _RangeCalendarRootState_instances, setStartValue_fn).call(this, void 0);
        __privateMethod(this, _RangeCalendarRootState_instances, setEndValue_fn).call(this, void 0);
        this.placeholder.current = date;
        __privateMethod(this, _RangeCalendarRootState_instances, announceEmpty_fn).call(this);
        return;
      }
      if (!this.startValue.current) {
        __privateMethod(this, _RangeCalendarRootState_instances, announceSelectedDate_fn).call(this, date);
        __privateMethod(this, _RangeCalendarRootState_instances, setStartValue_fn).call(this, date);
      } else if (!this.endValue.current) {
        __privateMethod(this, _RangeCalendarRootState_instances, announceSelectedRange_fn).call(this, this.startValue.current, date);
        __privateMethod(this, _RangeCalendarRootState_instances, setEndValue_fn).call(this, date);
      } else if (this.endValue.current && this.startValue.current) {
        __privateMethod(this, _RangeCalendarRootState_instances, setEndValue_fn).call(this, void 0);
        __privateMethod(this, _RangeCalendarRootState_instances, announceSelectedDate_fn).call(this, date);
        __privateMethod(this, _RangeCalendarRootState_instances, setStartValue_fn).call(this, date);
      }
    }
    onkeydown(event2) {
      return handleCalendarKeydown({
        event: event2,
        handleCellClick: this.handleCellClick,
        placeholderValue: this.placeholder.current,
        shiftFocus: this.shiftFocus
      });
    }
    /**
     * Navigates to the next page of the calendar.
     */
    nextPage() {
      handleCalendarNextPage({
        fixedWeeks: this.fixedWeeks.current,
        locale: this.locale.current,
        numberOfMonths: this.numberOfMonths.current,
        pagedNavigation: this.pagedNavigation.current,
        setMonths: this.setMonths,
        setPlaceholder: (date) => this.placeholder.current = date,
        weekStartsOn: this.weekStartsOn.current,
        months: this.months
      });
    }
    /**
     * Navigates to the previous page of the calendar.
     */
    prevPage() {
      handleCalendarPrevPage({
        fixedWeeks: this.fixedWeeks.current,
        locale: this.locale.current,
        numberOfMonths: this.numberOfMonths.current,
        pagedNavigation: this.pagedNavigation.current,
        setMonths: this.setMonths,
        setPlaceholder: (date) => this.placeholder.current = date,
        weekStartsOn: this.weekStartsOn.current,
        months: this.months
      });
    }
    nextYear() {
      this.placeholder.current = this.placeholder.current.add({ years: 1 });
    }
    prevYear() {
      this.placeholder.current = this.placeholder.current.subtract({ years: 1 });
    }
    setYear(year) {
      this.placeholder.current = this.placeholder.current.set({ year });
    }
    setMonth(month) {
      this.placeholder.current = this.placeholder.current.set({ month });
    }
    getBitsAttr(part) {
      return `data-range-calendar-${part}`;
    }
    get snippetProps() {
      return get$2(__privateGet(this, _snippetProps5));
    }
    set snippetProps(_2) {
      throw new Error("Cannot update a derived property ('snippetProps')");
    }
    get props() {
      return get$2(__privateGet(this, _props23));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
      add_owner(get$2(__privateGet(this, _months)), owner, false);
      add_owner(get$2(__privateGet(this, _focusedValue)), owner, false);
      add_owner(get$2(__privateGet(this, _lastPressedDateValue)), owner, false);
    }
  }
  _months = new WeakMap();
  _visibleMonths = new WeakMap();
  _focusedValue = new WeakMap();
  _lastPressedDateValue = new WeakMap();
  _RangeCalendarRootState_instances = new WeakSet();
  updateValue_fn = function(cb) {
    var _a2, _b2;
    const value = this.value.current;
    const newValue = cb(value);
    this.value.current = newValue;
    if (newValue.start && newValue.end) {
      (_b2 = (_a2 = this.onRangeSelect) == null ? void 0 : _a2.current) == null ? void 0 : _b2.call(_a2);
    }
  };
  setStartValue_fn = function(value) {
    this.startValue.current = value;
  };
  setEndValue_fn = function(value) {
    this.endValue.current = value;
  };
  _weekdays = new WeakMap();
  _isStartInvalid = new WeakMap();
  _isEndInvalid = new WeakMap();
  _isInvalid = new WeakMap();
  _isNextButtonDisabled = new WeakMap();
  _isPrevButtonDisabled = new WeakMap();
  _headingValue2 = new WeakMap();
  _fullCalendarLabel = new WeakMap();
  _highlightedRange = new WeakMap();
  announceEmpty_fn = function() {
    this.announcer.announce("Selected date is now empty.", "polite");
  };
  announceSelectedDate_fn = function(date) {
    this.announcer.announce(`Selected Date: ${this.formatter.selectedDate(date, false)}`, "polite");
  };
  announceSelectedRange_fn = function(start, end) {
    this.announcer.announce(`Selected Dates: ${this.formatter.selectedDate(start, false)} to ${this.formatter.selectedDate(end, false)}`, "polite");
  };
  _snippetProps5 = new WeakMap();
  _props23 = new WeakMap();
  class RangeCalendarCellState {
    constructor(props, root2) {
      __publicField(this, "root");
      __publicField(this, "id");
      __publicField(this, "ref");
      __publicField(this, "date");
      __publicField(this, "month");
      __privateAdd(this, _cellDate, /* @__PURE__ */ derived(() => toDate(this.date.current)));
      __privateAdd(this, _isDisabled5, /* @__PURE__ */ derived(() => this.root.isDateDisabled(this.date.current)));
      __privateAdd(this, _isUnavailable, /* @__PURE__ */ derived(() => this.root.isDateUnavailableProp.current(this.date.current)));
      __privateAdd(this, _isDateToday, /* @__PURE__ */ derived(() => $14e0f24ef4ac5c92$export$629b0a497aa65267(this.date.current, $14e0f24ef4ac5c92$export$aa8b41735afcabd2())));
      __privateAdd(this, _isOutsideMonth, /* @__PURE__ */ derived(() => !$14e0f24ef4ac5c92$export$a18c89cbd24170ff(this.date.current, this.month.current)));
      __privateAdd(this, _isOutsideVisibleMonths, /* @__PURE__ */ derived(() => this.root.isOutsideVisibleMonths(this.date.current)));
      __privateAdd(this, _isFocusedDate, /* @__PURE__ */ derived(() => $14e0f24ef4ac5c92$export$ea39ec197993aef0(this.date.current, this.root.placeholder.current)));
      __privateAdd(this, _isSelectedDate, /* @__PURE__ */ derived(() => this.root.isSelected(this.date.current)));
      __privateAdd(this, _isSelectionStart, /* @__PURE__ */ derived(() => this.root.isSelectionStart(this.date.current)));
      __privateAdd(this, _isSelectionEnd, /* @__PURE__ */ derived(() => this.root.isSelectionEnd(this.date.current)));
      __privateAdd(this, _isHighlighted, /* @__PURE__ */ derived(() => this.root.highlightedRange ? isBetweenInclusive(this.date.current, this.root.highlightedRange.start, this.root.highlightedRange.end) : false));
      __privateAdd(this, _labelText, /* @__PURE__ */ derived(() => this.root.formatter.custom(this.cellDate, {
        weekday: "long",
        month: "long",
        day: "numeric",
        year: "numeric"
      })));
      __privateAdd(this, _snippetProps6, /* @__PURE__ */ derived(() => ({
        disabled: this.isDisabled,
        unavailable: this.isUnavailable,
        selected: this.isSelectedDate
      })));
      __privateAdd(this, _ariaDisabled, /* @__PURE__ */ derived(() => {
        return this.isDisabled || this.isOutsideMonth && this.root.disableDaysOutsideMonth.current || this.isUnavailable;
      }));
      __privateAdd(this, _sharedDataAttrs, /* @__PURE__ */ derived(() => ({
        "data-unavailable": getDataUnavailable(this.isUnavailable),
        "data-today": this.isDateToday ? "" : void 0,
        "data-outside-month": this.isOutsideMonth ? "" : void 0,
        "data-outside-visible-months": this.isOutsideVisibleMonths ? "" : void 0,
        "data-focused": this.isFocusedDate ? "" : void 0,
        "data-selection-start": this.isSelectionStart ? "" : void 0,
        "data-selection-end": this.isSelectionEnd ? "" : void 0,
        "data-highlighted": this.isHighlighted ? "" : void 0,
        "data-selected": getDataSelected(this.isSelectedDate),
        "data-value": this.date.current.toString(),
        "data-disabled": getDataDisabled(this.isDisabled || this.isOutsideMonth && this.root.disableDaysOutsideMonth.current)
      })));
      __privateAdd(this, _props24, /* @__PURE__ */ derived(() => ({
        id: this.id.current,
        role: "gridcell",
        "aria-selected": getAriaSelected(this.isSelectedDate),
        "aria-disabled": getAriaDisabled(this.ariaDisabled),
        ...this.sharedDataAttrs,
        [this.root.getBitsAttr("cell")]: ""
      })));
      this.root = root2;
      this.id = props.id;
      this.ref = props.ref;
      this.date = props.date;
      this.month = props.month;
      useRefById({ id: this.id, ref: this.ref });
    }
    get cellDate() {
      return get$2(__privateGet(this, _cellDate));
    }
    set cellDate(_2) {
      throw new Error("Cannot update a derived property ('cellDate')");
    }
    get isDisabled() {
      return get$2(__privateGet(this, _isDisabled5));
    }
    set isDisabled(_2) {
      throw new Error("Cannot update a derived property ('isDisabled')");
    }
    get isUnavailable() {
      return get$2(__privateGet(this, _isUnavailable));
    }
    set isUnavailable(_2) {
      throw new Error("Cannot update a derived property ('isUnavailable')");
    }
    get isDateToday() {
      return get$2(__privateGet(this, _isDateToday));
    }
    set isDateToday(_2) {
      throw new Error("Cannot update a derived property ('isDateToday')");
    }
    get isOutsideMonth() {
      return get$2(__privateGet(this, _isOutsideMonth));
    }
    set isOutsideMonth(_2) {
      throw new Error("Cannot update a derived property ('isOutsideMonth')");
    }
    get isOutsideVisibleMonths() {
      return get$2(__privateGet(this, _isOutsideVisibleMonths));
    }
    set isOutsideVisibleMonths(_2) {
      throw new Error("Cannot update a derived property ('isOutsideVisibleMonths')");
    }
    get isFocusedDate() {
      return get$2(__privateGet(this, _isFocusedDate));
    }
    set isFocusedDate(_2) {
      throw new Error("Cannot update a derived property ('isFocusedDate')");
    }
    get isSelectedDate() {
      return get$2(__privateGet(this, _isSelectedDate));
    }
    set isSelectedDate(_2) {
      throw new Error("Cannot update a derived property ('isSelectedDate')");
    }
    get isSelectionStart() {
      return get$2(__privateGet(this, _isSelectionStart));
    }
    set isSelectionStart(_2) {
      throw new Error("Cannot update a derived property ('isSelectionStart')");
    }
    get isSelectionEnd() {
      return get$2(__privateGet(this, _isSelectionEnd));
    }
    set isSelectionEnd(_2) {
      throw new Error("Cannot update a derived property ('isSelectionEnd')");
    }
    get isHighlighted() {
      return get$2(__privateGet(this, _isHighlighted));
    }
    set isHighlighted(_2) {
      throw new Error("Cannot update a derived property ('isHighlighted')");
    }
    get labelText() {
      return get$2(__privateGet(this, _labelText));
    }
    set labelText(_2) {
      throw new Error("Cannot update a derived property ('labelText')");
    }
    get snippetProps() {
      return get$2(__privateGet(this, _snippetProps6));
    }
    set snippetProps(_2) {
      throw new Error("Cannot update a derived property ('snippetProps')");
    }
    get ariaDisabled() {
      return get$2(__privateGet(this, _ariaDisabled));
    }
    set ariaDisabled(_2) {
      throw new Error("Cannot update a derived property ('ariaDisabled')");
    }
    get sharedDataAttrs() {
      return get$2(__privateGet(this, _sharedDataAttrs));
    }
    set sharedDataAttrs(_2) {
      throw new Error("Cannot update a derived property ('sharedDataAttrs')");
    }
    get props() {
      return get$2(__privateGet(this, _props24));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _cellDate = new WeakMap();
  _isDisabled5 = new WeakMap();
  _isUnavailable = new WeakMap();
  _isDateToday = new WeakMap();
  _isOutsideMonth = new WeakMap();
  _isOutsideVisibleMonths = new WeakMap();
  _isFocusedDate = new WeakMap();
  _isSelectedDate = new WeakMap();
  _isSelectionStart = new WeakMap();
  _isSelectionEnd = new WeakMap();
  _isHighlighted = new WeakMap();
  _labelText = new WeakMap();
  _snippetProps6 = new WeakMap();
  _ariaDisabled = new WeakMap();
  _sharedDataAttrs = new WeakMap();
  _props24 = new WeakMap();
  class RangeCalendarDayState {
    constructor(props, cell) {
      __publicField(this, "cell");
      __publicField(this, "id");
      __publicField(this, "ref");
      __privateAdd(this, _tabindex, /* @__PURE__ */ derived(() => this.cell.isFocusedDate ? 0 : this.cell.isOutsideMonth && this.cell.root.disableDaysOutsideMonth.current || this.cell.isDisabled ? void 0 : -1));
      __privateAdd(this, _snippetProps7, /* @__PURE__ */ derived(() => ({
        disabled: this.cell.isDisabled,
        unavailable: this.cell.isUnavailable,
        selected: this.cell.isSelectedDate,
        day: `${this.cell.date.current.day}`
      })));
      __privateAdd(this, _props25, /* @__PURE__ */ derived(() => ({
        id: this.id.current,
        role: "button",
        "aria-label": this.cell.labelText,
        "aria-disabled": getAriaDisabled(this.cell.ariaDisabled),
        ...this.cell.sharedDataAttrs,
        tabindex: get$2(__privateGet(this, _tabindex)),
        [this.cell.root.getBitsAttr("day")]: "",
        // Shared logic for range calendar and calendar
        "data-bits-day": "",
        //
        onclick: this.onclick,
        onmouseenter: this.onmouseenter,
        onfocusin: this.onfocusin
      })));
      this.cell = cell;
      this.id = props.id;
      this.ref = props.ref;
      useRefById({ id: this.id, ref: this.ref });
      this.onclick = this.onclick.bind(this);
      this.onmouseenter = this.onmouseenter.bind(this);
      this.onfocusin = this.onfocusin.bind(this);
    }
    onclick(e) {
      if (this.cell.isDisabled) return;
      this.cell.root.handleCellClick(e, this.cell.date.current);
    }
    onmouseenter(_2) {
      if (this.cell.isDisabled) return;
      this.cell.root.focusedValue = this.cell.date.current;
    }
    onfocusin(_2) {
      if (this.cell.isDisabled) return;
      this.cell.root.focusedValue = this.cell.date.current;
    }
    get snippetProps() {
      return get$2(__privateGet(this, _snippetProps7));
    }
    set snippetProps(_2) {
      throw new Error("Cannot update a derived property ('snippetProps')");
    }
    get props() {
      return get$2(__privateGet(this, _props25));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _tabindex = new WeakMap();
  _snippetProps7 = new WeakMap();
  _props25 = new WeakMap();
  const [
    setRangeCalendarRootContext,
    getRangeCalendarRootContext
  ] = createContext(["Calendar.Root", "RangeCalendar.Root"], "Calendar.Root", false);
  const [
    setRangeCalendarCellContext,
    getRangeCalendarCellContext
  ] = createContext("RangeCalendar.Cell");
  function useRangeCalendarRoot(props) {
    return setRangeCalendarRootContext(new RangeCalendarRootState(props));
  }
  function useRangeCalendarCell(props) {
    return setRangeCalendarCellContext(new RangeCalendarCellState(props, getRangeCalendarRootContext()));
  }
  function useRangeCalendarDay(props) {
    return new RangeCalendarDayState(props, getRangeCalendarCellContext());
  }
  mark_module_start();
  Range_calendar_cell$1[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/range-calendar/components/range-calendar-cell.svelte";
  var root_2$a = add_locations(/* @__PURE__ */ template(`<td><!></td>`), Range_calendar_cell$1[FILENAME], [[33, 1]]);
  function Range_calendar_cell$1($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Range_calendar_cell$1);
    validate_prop_bindings($$props, ["ref"], [], Range_calendar_cell$1);
    let id = prop($$props, "id", 19, useId), ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "children",
        "child",
        "id",
        "ref",
        "date",
        "month"
      ],
      "restProps"
    );
    const cellState = useRangeCalendarCell({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2)),
      date: box.with(() => $$props.date),
      month: box.with(() => $$props.month)
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, cellState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({
          props: get$2(mergedProps),
          ...cellState.snippetProps
        }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var td = root_2$a();
        let attributes;
        var node_2 = child(td);
        snippet(node_2, () => $$props.children ?? noop$1, () => cellState.snippetProps);
        template_effect(() => attributes = set_attributes(td, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, td);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Range_calendar_cell$1);
  mark_module_start();
  Range_calendar_day$1[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/range-calendar/components/range-calendar-day.svelte";
  var root_2$9 = add_locations(/* @__PURE__ */ template(`<div><!></div>`), Range_calendar_day$1[FILENAME], [[29, 1]]);
  function Range_calendar_day$1($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Range_calendar_day$1);
    validate_prop_bindings($$props, ["ref"], [], Range_calendar_day$1);
    let id = prop($$props, "id", 19, useId), ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "children",
        "child",
        "id",
        "ref"
      ],
      "restProps"
    );
    const dayState = useRangeCalendarDay({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, dayState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({
          props: get$2(mergedProps),
          ...dayState.snippetProps
        }));
        append($$anchor2, fragment_1);
      };
      var alternate_1 = ($$anchor2) => {
        var div = root_2$9();
        let attributes;
        var node_2 = child(div);
        {
          var consequent_1 = ($$anchor3) => {
            var fragment_2 = comment();
            var node_3 = first_child(fragment_2);
            snippet(node_3, () => $$props.children ?? noop$1, () => dayState.snippetProps);
            append($$anchor3, fragment_2);
          };
          var alternate = ($$anchor3) => {
            var text$1 = text();
            template_effect(() => set_text(text$1, dayState.cell.date.current.day));
            append($$anchor3, text$1);
          };
          if_block(node_2, ($$render) => {
            if ($$props.children) $$render(consequent_1);
            else $$render(alternate, false);
          });
        }
        template_effect(() => attributes = set_attributes(div, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, div);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate_1, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Range_calendar_day$1);
  mark_module_start();
  Dialog[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/dialog/components/dialog.svelte";
  function Dialog($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Dialog);
    validate_prop_bindings($$props, ["open"], [], Dialog);
    let open2 = prop($$props, "open", 15, false), onOpenChange = prop($$props, "onOpenChange", 3, noop), controlledOpen = prop($$props, "controlledOpen", 3, false);
    useDialogRoot({
      variant: box.with(() => "dialog"),
      open: box.with(() => open2(), (v2) => {
        if (controlledOpen()) {
          onOpenChange()(v2);
        } else {
          open2(v2);
          onOpenChange()(v2);
        }
      })
    });
    var fragment = comment();
    var node = first_child(fragment);
    snippet(node, () => $$props.children ?? noop$1);
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Dialog);
  mark_module_start();
  Dialog_close[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/dialog/components/dialog-close.svelte";
  var root_2$8 = add_locations(/* @__PURE__ */ template(`<button><!></button>`), Dialog_close[FILENAME], [[32, 1]]);
  function Dialog_close($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Dialog_close);
    validate_prop_bindings($$props, ["ref"], [], Dialog_close);
    let id = prop($$props, "id", 19, useId), ref = prop($$props, "ref", 15, null), disabled = prop($$props, "disabled", 3, false), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "children",
        "child",
        "id",
        "ref",
        "disabled"
      ],
      "restProps"
    );
    const closeState = useDialogClose({
      variant: box.with(() => "close"),
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2)),
      disabled: box.with(() => Boolean(disabled()))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, closeState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({ props: get$2(mergedProps) }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var button = root_2$8();
        let attributes;
        var node_2 = child(button);
        snippet(node_2, () => $$props.children ?? noop$1);
        template_effect(() => attributes = set_attributes(button, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, button);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Dialog_close);
  mark_module_start();
  Dialog_content$1[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/dialog/components/dialog-content.svelte";
  var root_6$2 = add_locations(/* @__PURE__ */ template(`<!> <!>`, 1), Dialog_content$1[FILENAME], []);
  var root_8$1 = add_locations(/* @__PURE__ */ template(`<!> <div><!></div>`, 1), Dialog_content$1[FILENAME], [[88, 8]]);
  function Dialog_content$1($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Dialog_content$1);
    validate_prop_bindings($$props, ["ref"], [], Dialog_content$1);
    let id = prop($$props, "id", 19, useId), ref = prop($$props, "ref", 15, null), forceMount = prop($$props, "forceMount", 3, false), onCloseAutoFocus = prop($$props, "onCloseAutoFocus", 3, noop), onEscapeKeydown = prop($$props, "onEscapeKeydown", 3, noop), onInteractOutside = prop($$props, "onInteractOutside", 3, noop), trapFocus = prop($$props, "trapFocus", 3, true), preventScroll = prop($$props, "preventScroll", 3, true), restoreScrollDelay = prop($$props, "restoreScrollDelay", 3, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "id",
        "children",
        "child",
        "ref",
        "forceMount",
        "onCloseAutoFocus",
        "onEscapeKeydown",
        "onInteractOutside",
        "trapFocus",
        "preventScroll",
        "restoreScrollDelay"
      ],
      "restProps"
    );
    const contentState = useDialogContent({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, contentState.props));
    var present_1 = /* @__PURE__ */ derived(() => contentState.root.open.current || forceMount());
    {
      const presence = wrap_snippet(Dialog_content$1, ($$anchor2, $$arg0) => {
        let present = () => $$arg0 == null ? void 0 : $$arg0().present;
        present();
        var trapFocus_1 = /* @__PURE__ */ derived(() => shouldTrapFocus({
          forceMount: forceMount(),
          present: present().current,
          trapFocus: trapFocus(),
          open: contentState.root.open.current
        }));
        {
          const focusScope = wrap_snippet(Dialog_content$1, ($$anchor3, $$arg02) => {
            let focusScopeProps = () => $$arg02 == null ? void 0 : $$arg02().props;
            focusScopeProps();
            Escape_layer($$anchor3, spread_props(() => get$2(mergedProps), {
              get enabled() {
                return present().current;
              },
              onEscapeKeydown: (e) => {
                onEscapeKeydown()(e);
                if (e.defaultPrevented) return;
                contentState.root.handleClose();
              },
              children: wrap_snippet(Dialog_content$1, ($$anchor4, $$slotProps) => {
                Dismissible_layer($$anchor4, spread_props(() => get$2(mergedProps), {
                  get enabled() {
                    return present().current;
                  },
                  onInteractOutside: (e) => {
                    onInteractOutside()(e);
                    if (e.defaultPrevented) return;
                    contentState.root.handleClose();
                  },
                  children: wrap_snippet(Dialog_content$1, ($$anchor5, $$slotProps2) => {
                    Text_selection_layer($$anchor5, spread_props(() => get$2(mergedProps), {
                      get enabled() {
                        return present().current;
                      },
                      children: wrap_snippet(Dialog_content$1, ($$anchor6, $$slotProps3) => {
                        var fragment_5 = comment();
                        var node = first_child(fragment_5);
                        {
                          var consequent_1 = ($$anchor7) => {
                            var fragment_6 = root_6$2();
                            var node_1 = first_child(fragment_6);
                            {
                              var consequent = ($$anchor8) => {
                                Scroll_lock($$anchor8, {
                                  get preventScroll() {
                                    return preventScroll();
                                  },
                                  get restoreScrollDelay() {
                                    return restoreScrollDelay();
                                  }
                                });
                              };
                              if_block(node_1, ($$render) => {
                                if (contentState.root.open.current) $$render(consequent);
                              });
                            }
                            var node_2 = sibling(node_1, 2);
                            var render_arg = /* @__PURE__ */ derived_safe_equal(() => ({
                              props: mergeProps(get$2(mergedProps), focusScopeProps()),
                              ...contentState.snippetProps
                            }));
                            snippet(node_2, () => $$props.child, () => get$2(render_arg));
                            append($$anchor7, fragment_6);
                          };
                          var alternate = ($$anchor7) => {
                            var fragment_8 = root_8$1();
                            var node_3 = first_child(fragment_8);
                            Scroll_lock(node_3, {
                              get preventScroll() {
                                return preventScroll();
                              }
                            });
                            var div = sibling(node_3, 2);
                            const spread_with_call = /* @__PURE__ */ derived(() => mergeProps(get$2(mergedProps), focusScopeProps()));
                            let attributes;
                            var node_4 = child(div);
                            snippet(node_4, () => $$props.children ?? noop$1);
                            reset(div);
                            template_effect(() => attributes = set_attributes(div, attributes, { ...get$2(spread_with_call) }));
                            append($$anchor7, fragment_8);
                          };
                          if_block(node, ($$render) => {
                            if ($$props.child) $$render(consequent_1);
                            else $$render(alternate, false);
                          });
                        }
                        append($$anchor6, fragment_5);
                      }),
                      $$slots: { default: true }
                    }));
                  }),
                  $$slots: { default: true }
                }));
              }),
              $$slots: { default: true }
            }));
          });
          Focus_scope($$anchor2, spread_props(
            {
              loop: true,
              get trapFocus() {
                return get$2(trapFocus_1);
              }
            },
            () => get$2(mergedProps),
            {
              onCloseAutoFocus: (e) => {
                var _a2;
                onCloseAutoFocus()(e);
                if (e.defaultPrevented) return;
                (_a2 = contentState.root.triggerNode) == null ? void 0 : _a2.focus();
              },
              focusScope,
              $$slots: { focusScope: true }
            }
          ));
        }
      });
      Presence_layer($$anchor, spread_props(() => get$2(mergedProps), {
        get forceMount() {
          return forceMount();
        },
        get present() {
          return get$2(present_1);
        },
        presence,
        $$slots: { presence: true }
      }));
    }
    return pop({ ...legacy_api() });
  }
  mark_module_end(Dialog_content$1);
  const ROOT_ATTR$1 = "data-label-root";
  class LabelRootState {
    constructor(props) {
      __privateAdd(this, _id14);
      __privateAdd(this, _ref14);
      __privateAdd(this, _props26, /* @__PURE__ */ derived(() => ({
        [ROOT_ATTR$1]: "",
        onmousedown: this.onmousedown
      })));
      __privateSet(this, _id14, props.id);
      __privateSet(this, _ref14, props.ref);
      this.onmousedown = this.onmousedown.bind(this);
      useRefById({ id: __privateGet(this, _id14), ref: __privateGet(this, _ref14) });
    }
    onmousedown(e) {
      if (e.detail > 1) e.preventDefault();
    }
    get props() {
      return get$2(__privateGet(this, _props26));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _id14 = new WeakMap();
  _ref14 = new WeakMap();
  _props26 = new WeakMap();
  function setLabelRootState(props) {
    return new LabelRootState(props);
  }
  mark_module_start();
  Label$1[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/label/components/label.svelte";
  var root_2$7 = add_locations(/* @__PURE__ */ template(`<label><!></label>`), Label$1[FILENAME], [[29, 1]]);
  function Label$1($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Label$1);
    validate_prop_bindings($$props, ["ref"], [], Label$1);
    let id = prop($$props, "id", 19, useId), ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "children",
        "child",
        "id",
        "ref",
        "for"
      ],
      "restProps"
    );
    const rootState = setLabelRootState({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, rootState.props, { for: $$props.for }));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({ props: get$2(mergedProps) }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var label = root_2$7();
        let attributes;
        var node_2 = child(label);
        snippet(node_2, () => $$props.children ?? noop$1);
        template_effect(() => attributes = set_attributes(label, attributes, { ...get$2(mergedProps), for: $$props.for }));
        append($$anchor2, label);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Label$1);
  mark_module_start();
  Popover[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/popover/components/popover.svelte";
  function Popover($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Popover);
    validate_prop_bindings($$props, ["open"], [], Popover);
    let open2 = prop($$props, "open", 15, false), onOpenChange = prop($$props, "onOpenChange", 3, noop), controlledOpen = prop($$props, "controlledOpen", 3, false);
    usePopoverRoot({
      open: box.with(() => open2(), (v2) => {
        if (controlledOpen()) {
          onOpenChange()(v2);
        } else {
          open2(v2);
          onOpenChange()(v2);
        }
      })
    });
    Floating_layer($$anchor, {
      children: wrap_snippet(Popover, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node = first_child(fragment_1);
        snippet(node, () => $$props.children ?? noop$1);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    });
    return pop({ ...legacy_api() });
  }
  mark_module_end(Popover);
  mark_module_start();
  Range_calendar$1[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/range-calendar/components/range-calendar.svelte";
  var root_2$6 = add_locations(/* @__PURE__ */ template(`<div><!></div>`), Range_calendar$1[FILENAME], [[131, 1]]);
  function Range_calendar$1($$anchor, $$props) {
    var _a2, _b2, _c;
    check_target(new.target);
    push($$props, true, Range_calendar$1);
    validate_prop_bindings($$props, ["ref", "value", "placeholder"], [], Range_calendar$1);
    let id = prop($$props, "id", 19, useId), ref = prop($$props, "ref", 15, null), value = prop($$props, "value", 15), onValueChange = prop($$props, "onValueChange", 3, noop), placeholder = prop($$props, "placeholder", 15), onPlaceholderChange = prop($$props, "onPlaceholderChange", 3, noop), weekdayFormat = prop($$props, "weekdayFormat", 3, "narrow"), weekStartsOn = prop($$props, "weekStartsOn", 3, 0), pagedNavigation = prop($$props, "pagedNavigation", 3, false), isDateDisabled = prop($$props, "isDateDisabled", 3, () => false), isDateUnavailable = prop($$props, "isDateUnavailable", 3, () => false), fixedWeeks = prop($$props, "fixedWeeks", 3, false), numberOfMonths = prop($$props, "numberOfMonths", 3, 1), locale = prop($$props, "locale", 3, "en"), calendarLabel = prop($$props, "calendarLabel", 3, "Event"), disabled = prop($$props, "disabled", 3, false), readonly = prop($$props, "readonly", 3, false), minValue = prop($$props, "minValue", 3, void 0), maxValue = prop($$props, "maxValue", 3, void 0), preventDeselect = prop($$props, "preventDeselect", 3, false), disableDaysOutsideMonth = prop($$props, "disableDaysOutsideMonth", 3, true), onStartValueChange = prop($$props, "onStartValueChange", 3, noop), onEndValueChange = prop($$props, "onEndValueChange", 3, noop), controlledPlaceholder = prop($$props, "controlledPlaceholder", 3, false), controlledValue = prop($$props, "controlledValue", 3, false), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "children",
        "child",
        "id",
        "ref",
        "value",
        "onValueChange",
        "placeholder",
        "onPlaceholderChange",
        "weekdayFormat",
        "weekStartsOn",
        "pagedNavigation",
        "isDateDisabled",
        "isDateUnavailable",
        "fixedWeeks",
        "numberOfMonths",
        "locale",
        "calendarLabel",
        "disabled",
        "readonly",
        "minValue",
        "maxValue",
        "preventDeselect",
        "disableDaysOutsideMonth",
        "onStartValueChange",
        "onEndValueChange",
        "controlledPlaceholder",
        "controlledValue"
      ],
      "restProps"
    );
    let startValue = state(proxy((_a2 = value()) == null ? void 0 : _a2.start));
    let endValue = state(proxy((_b2 = value()) == null ? void 0 : _b2.end));
    if (strict_equals(placeholder(), void 0)) {
      const defaultPlaceholder = getDefaultDate({
        defaultPlaceholder: void 0,
        defaultValue: (_c = value()) == null ? void 0 : _c.start
      });
      if (controlledPlaceholder()) {
        onPlaceholderChange()(defaultPlaceholder);
      } else {
        placeholder(defaultPlaceholder);
      }
    }
    if (strict_equals(value(), void 0)) {
      const defaultValue = { start: void 0, end: void 0 };
      if (controlledValue()) {
        onValueChange()(defaultValue);
      } else {
        value(defaultValue);
      }
    }
    const rootState = useRangeCalendarRoot({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2)),
      value: box.with(() => value(), (v2) => {
        if (controlledValue()) {
          onValueChange()(v2);
        } else {
          value(v2);
          onValueChange()(v2);
        }
      }),
      placeholder: box.with(() => placeholder(), (v2) => {
        if (controlledPlaceholder()) {
          onPlaceholderChange()(v2);
        } else {
          placeholder(v2);
          onPlaceholderChange()(v2);
        }
      }),
      disabled: box.with(() => disabled()),
      readonly: box.with(() => readonly()),
      preventDeselect: box.with(() => preventDeselect()),
      minValue: box.with(() => minValue()),
      maxValue: box.with(() => maxValue()),
      isDateUnavailable: box.with(() => isDateUnavailable()),
      isDateDisabled: box.with(() => isDateDisabled()),
      pagedNavigation: box.with(() => pagedNavigation()),
      weekStartsOn: box.with(() => weekStartsOn()),
      weekdayFormat: box.with(() => weekdayFormat()),
      numberOfMonths: box.with(() => numberOfMonths()),
      locale: box.with(() => locale()),
      calendarLabel: box.with(() => calendarLabel()),
      fixedWeeks: box.with(() => fixedWeeks()),
      disableDaysOutsideMonth: box.with(() => disableDaysOutsideMonth()),
      startValue: box.with(() => get$2(startValue), (v2) => {
        set(startValue, proxy(v2, null, startValue));
        onStartValueChange()(v2);
      }),
      endValue: box.with(() => get$2(endValue), (v2) => {
        set(endValue, proxy(v2, null, endValue));
        onEndValueChange()(v2);
      })
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, rootState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({
          props: get$2(mergedProps),
          ...rootState.snippetProps
        }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var div = root_2$6();
        let attributes;
        var node_2 = child(div);
        snippet(node_2, () => $$props.children ?? noop$1, () => rootState.snippetProps);
        template_effect(() => attributes = set_attributes(div, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, div);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Range_calendar$1);
  const ROOT_ATTR = "data-switch-root";
  const THUMB_ATTR = "data-switch-thumb";
  class SwitchRootState {
    constructor(props) {
      __privateAdd(this, _SwitchRootState_instances);
      __privateAdd(this, _id15);
      __privateAdd(this, _ref15);
      __publicField(this, "checked");
      __publicField(this, "disabled");
      __publicField(this, "required");
      __publicField(this, "name");
      __publicField(this, "value");
      __privateAdd(this, _sharedProps2, /* @__PURE__ */ derived(() => ({
        "data-disabled": getDataDisabled(this.disabled.current),
        "data-state": getDataChecked(this.checked.current),
        "data-required": getDataRequired(this.required.current)
      })));
      __privateAdd(this, _props27, /* @__PURE__ */ derived(() => ({
        ...this.sharedProps,
        id: __privateGet(this, _id15).current,
        role: "switch",
        disabled: getDisabled(this.disabled.current),
        "aria-checked": getAriaChecked(this.checked.current),
        "aria-required": getAriaRequired(this.required.current),
        [ROOT_ATTR]: "",
        //
        onclick: this.onclick,
        onkeydown: this.onkeydown
      })));
      this.checked = props.checked;
      this.disabled = props.disabled;
      this.required = props.required;
      this.name = props.name;
      this.value = props.value;
      __privateSet(this, _id15, props.id);
      __privateSet(this, _ref15, props.ref);
      useRefById({ id: __privateGet(this, _id15), ref: __privateGet(this, _ref15) });
      this.onkeydown = this.onkeydown.bind(this);
      this.onclick = this.onclick.bind(this);
    }
    onkeydown(e) {
      if (!(strict_equals(e.key, ENTER) || strict_equals(e.key, SPACE)) || this.disabled.current) return;
      e.preventDefault();
      __privateMethod(this, _SwitchRootState_instances, toggle_fn).call(this);
    }
    onclick(_2) {
      if (this.disabled.current) return;
      __privateMethod(this, _SwitchRootState_instances, toggle_fn).call(this);
    }
    get sharedProps() {
      return get$2(__privateGet(this, _sharedProps2));
    }
    set sharedProps(_2) {
      throw new Error("Cannot update a derived property ('sharedProps')");
    }
    get props() {
      return get$2(__privateGet(this, _props27));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _id15 = new WeakMap();
  _ref15 = new WeakMap();
  _SwitchRootState_instances = new WeakSet();
  toggle_fn = function() {
    this.checked.current = !this.checked.current;
  };
  _sharedProps2 = new WeakMap();
  _props27 = new WeakMap();
  class SwitchInputState {
    constructor(root2) {
      __privateAdd(this, _root7);
      __privateAdd(this, _shouldRender, /* @__PURE__ */ derived(() => strict_equals(__privateGet(this, _root7).name.current, void 0, false)));
      __privateAdd(this, _props28, /* @__PURE__ */ derived(() => ({
        type: "checkbox",
        name: __privateGet(this, _root7).name.current,
        value: __privateGet(this, _root7).value.current,
        checked: __privateGet(this, _root7).checked.current,
        disabled: __privateGet(this, _root7).disabled.current,
        required: __privateGet(this, _root7).required.current,
        "aria-hidden": getAriaHidden(true),
        style: styleToString(srOnlyStyles)
      })));
      __privateSet(this, _root7, root2);
    }
    get shouldRender() {
      return get$2(__privateGet(this, _shouldRender));
    }
    set shouldRender(_2) {
      throw new Error("Cannot update a derived property ('shouldRender')");
    }
    get props() {
      return get$2(__privateGet(this, _props28));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _root7 = new WeakMap();
  _shouldRender = new WeakMap();
  _props28 = new WeakMap();
  class SwitchThumbState {
    constructor(props, root2) {
      __privateAdd(this, _id16);
      __privateAdd(this, _ref16);
      __publicField(this, "root");
      __privateAdd(this, _props29, /* @__PURE__ */ derived(() => ({
        ...this.root.sharedProps,
        id: __privateGet(this, _id16).current,
        [THUMB_ATTR]: ""
      })));
      this.root = root2;
      __privateSet(this, _id16, props.id);
      __privateSet(this, _ref16, props.ref);
      useRefById({ id: __privateGet(this, _id16), ref: __privateGet(this, _ref16) });
    }
    get props() {
      return get$2(__privateGet(this, _props29));
    }
    set props(_2) {
      throw new Error("Cannot update a derived property ('props')");
    }
    [ADD_OWNER](owner) {
    }
  }
  _id16 = new WeakMap();
  _ref16 = new WeakMap();
  _props29 = new WeakMap();
  const [setSwitchRootContext, getSwitchRootContext] = createContext("Switch.Root");
  function useSwitchRoot(props) {
    return setSwitchRootContext(new SwitchRootState(props));
  }
  function useSwitchInput() {
    return new SwitchInputState(getSwitchRootContext());
  }
  function useSwitchThumb(props) {
    return new SwitchThumbState(props, getSwitchRootContext());
  }
  mark_module_start();
  Switch_input[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/switch/components/switch-input.svelte";
  var root_1$5 = add_locations(/* @__PURE__ */ template(`<input>`), Switch_input[FILENAME], [[8, 1]]);
  function Switch_input($$anchor, $$props) {
    check_target(new.target);
    push($$props, false, Switch_input);
    const inputState = useSwitchInput();
    init();
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var input = root_1$5();
        let attributes;
        template_effect(() => attributes = set_attributes(input, attributes, { ...inputState.props }));
        append($$anchor2, input);
      };
      if_block(node, ($$render) => {
        if (inputState.shouldRender) $$render(consequent);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Switch_input);
  mark_module_start();
  Switch$1[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/switch/components/switch.svelte";
  var root_2$5 = add_locations(/* @__PURE__ */ template(`<button><!></button>`), Switch$1[FILENAME], [[54, 1]]);
  var root$6 = add_locations(/* @__PURE__ */ template(`<!> <!>`, 1), Switch$1[FILENAME], []);
  function Switch$1($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Switch$1);
    validate_prop_bindings($$props, ["ref", "checked"], [], Switch$1);
    let ref = prop($$props, "ref", 15, null), id = prop($$props, "id", 19, useId), disabled = prop($$props, "disabled", 3, false), required = prop($$props, "required", 3, false), checked = prop($$props, "checked", 15, false), value = prop($$props, "value", 3, "on"), name = prop($$props, "name", 3, void 0), type = prop($$props, "type", 3, "button"), onCheckedChange = prop($$props, "onCheckedChange", 3, noop), controlledChecked = prop($$props, "controlledChecked", 3, false), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "child",
        "children",
        "ref",
        "id",
        "disabled",
        "required",
        "checked",
        "value",
        "name",
        "type",
        "onCheckedChange",
        "controlledChecked"
      ],
      "restProps"
    );
    const rootState = useSwitchRoot({
      checked: box.with(() => checked(), (v2) => {
        var _a2;
        if (controlledChecked()) {
          onCheckedChange()(v2);
        } else {
          checked(v2);
          (_a2 = onCheckedChange()) == null ? void 0 : _a2(v2);
        }
      }),
      disabled: box.with(() => disabled() ?? false),
      required: box.with(() => required()),
      value: box.with(() => value()),
      name: box.with(() => name()),
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, rootState.props, { type: type() }));
    var fragment = root$6();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({
          props: get$2(mergedProps),
          checked: rootState.checked.current
        }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var button = root_2$5();
        let attributes;
        var node_2 = child(button);
        snippet(node_2, () => $$props.children ?? noop$1, () => ({ checked: rootState.checked.current }));
        template_effect(() => attributes = set_attributes(button, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, button);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    var node_3 = sibling(node, 2);
    Switch_input(node_3, {});
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Switch$1);
  mark_module_start();
  Switch_thumb[FILENAME] = "node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.16.0/node_modules/bits-ui/dist/bits/switch/components/switch-thumb.svelte";
  var root_2$4 = add_locations(/* @__PURE__ */ template(`<span><!></span>`), Switch_thumb[FILENAME], [[29, 1]]);
  function Switch_thumb($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Switch_thumb);
    validate_prop_bindings($$props, ["ref"], [], Switch_thumb);
    let ref = prop($$props, "ref", 15, null), id = prop($$props, "id", 19, useId), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "child",
        "children",
        "ref",
        "id"
      ],
      "restProps"
    );
    const thumbState = useSwitchThumb({
      id: box.with(() => id()),
      ref: box.with(() => ref(), (v2) => ref(v2))
    });
    const mergedProps = /* @__PURE__ */ derived(() => mergeProps(restProps, thumbState.props));
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor2) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.child, () => ({
          props: get$2(mergedProps),
          checked: thumbState.root.checked.current
        }));
        append($$anchor2, fragment_1);
      };
      var alternate = ($$anchor2) => {
        var span = root_2$4();
        let attributes;
        var node_2 = child(span);
        snippet(node_2, () => $$props.children ?? noop$1, () => ({ checked: thumbState.root.checked.current }));
        template_effect(() => attributes = set_attributes(span, attributes, { ...get$2(mergedProps) }));
        append($$anchor2, span);
      };
      if_block(node, ($$render) => {
        if ($$props.child) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Switch_thumb);
  mark_module_start();
  Dialog_title[FILENAME] = "src/lib/components/shadcn-ui/dialog/dialog-title.svelte";
  function Dialog_title($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Dialog_title);
    validate_prop_bindings($$props, ["ref"], [], Dialog_title);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    var class_1 = /* @__PURE__ */ derived(() => cn("text-lg font-semibold leading-none tracking-tight", $$props.class));
    component(node, () => Dialog_title$1, ($$anchor2, $$component) => {
      {
        add_owner_effect(ref, $$component);
        $$component($$anchor2, spread_props(
          {
            get class() {
              return get$2(class_1);
            }
          },
          () => restProps,
          {
            get ref() {
              return ref();
            },
            set ref($$value) {
              ref($$value);
            }
          }
        ));
      }
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Dialog_title);
  mark_module_start();
  Dialog_footer[FILENAME] = "src/lib/components/shadcn-ui/dialog/dialog-footer.svelte";
  var root$5 = add_locations(/* @__PURE__ */ template(`<div><!></div>`), Dialog_footer[FILENAME], [[14, 0]]);
  function Dialog_footer($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Dialog_footer);
    validate_prop_bindings($$props, ["ref"], [], Dialog_footer);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class",
        "children"
      ],
      "restProps"
    );
    var div = root$5();
    let attributes;
    var node = child(div);
    snippet(node, () => $$props.children ?? noop$1);
    bind_this(div, ($$value) => ref($$value), () => ref());
    template_effect(() => attributes = set_attributes(div, attributes, {
      class: cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", $$props.class),
      ...restProps
    }));
    append($$anchor, div);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Dialog_footer);
  mark_module_start();
  Dialog_header[FILENAME] = "src/lib/components/shadcn-ui/dialog/dialog-header.svelte";
  var root$4 = add_locations(/* @__PURE__ */ template(`<div><!></div>`), Dialog_header[FILENAME], [[14, 0]]);
  function Dialog_header($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Dialog_header);
    validate_prop_bindings($$props, ["ref"], [], Dialog_header);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class",
        "children"
      ],
      "restProps"
    );
    var div = root$4();
    let attributes;
    var node = child(div);
    snippet(node, () => $$props.children ?? noop$1);
    bind_this(div, ($$value) => ref($$value), () => ref());
    template_effect(() => attributes = set_attributes(div, attributes, {
      class: cn("flex flex-col space-y-1.5 text-center sm:text-left", $$props.class),
      ...restProps
    }));
    append($$anchor, div);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Dialog_header);
  mark_module_start();
  Dialog_overlay[FILENAME] = "src/lib/components/shadcn-ui/dialog/dialog-overlay.svelte";
  function Dialog_overlay($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Dialog_overlay);
    validate_prop_bindings($$props, ["ref"], [], Dialog_overlay);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    var class_1 = /* @__PURE__ */ derived(() => cn("fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0", $$props.class));
    component(node, () => Dialog_overlay$1, ($$anchor2, $$component) => {
      {
        add_owner_effect(ref, $$component);
        $$component($$anchor2, spread_props(
          {
            get class() {
              return get$2(class_1);
            }
          },
          () => restProps,
          {
            get ref() {
              return ref();
            },
            set ref($$value) {
              ref($$value);
            }
          }
        ));
      }
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Dialog_overlay);
  /**
   * @license lucide-svelte v0.469.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   */
  const defaultAttributes$1 = {
    xmlns: "http://www.w3.org/2000/svg",
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    "stroke-width": 2,
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  };
  mark_module_start();
  Icon$1[FILENAME] = "node_modules/.pnpm/lucide-svelte@0.469.0_svelte@5.16.0/node_modules/lucide-svelte/dist/Icon.svelte";
  var root$3 = add_locations(/* @__PURE__ */ ns_template(`<svg><!><!></svg>`), Icon$1[FILENAME], [[14, 0]]);
  function Icon$1($$anchor, $$props) {
    check_target(new.target);
    const $$sanitized_props = legacy_rest_props($$props, [
      "children",
      "$$slots",
      "$$events",
      "$$legacy"
    ]);
    const $$restProps = legacy_rest_props($$sanitized_props, [
      "name",
      "color",
      "size",
      "strokeWidth",
      "absoluteStrokeWidth",
      "iconNode"
    ]);
    push($$props, false, Icon$1);
    let name = prop($$props, "name", 8, void 0);
    let color = prop($$props, "color", 8, "currentColor");
    let size2 = prop($$props, "size", 8, 24);
    let strokeWidth = prop($$props, "strokeWidth", 8, 2);
    let absoluteStrokeWidth = prop($$props, "absoluteStrokeWidth", 8, false);
    let iconNode = prop($$props, "iconNode", 24, () => []);
    const mergeClasses = (...classes) => classes.filter((className, index2, array) => {
      return Boolean(className) && strict_equals(array.indexOf(className), index2);
    }).join(" ");
    init();
    var svg = root$3();
    let attributes;
    var node = child(svg);
    each(node, 1, iconNode, index, ($$anchor2, $$item) => {
      let tag = () => get$2($$item)[0];
      tag();
      let attrs = () => get$2($$item)[1];
      attrs();
      var fragment = comment();
      var node_1 = first_child(fragment);
      validate_dynamic_element_tag(tag);
      element(
        node_1,
        tag,
        true,
        ($$element, $$anchor3) => {
          let attributes_1;
          template_effect(() => attributes_1 = set_attributes($$element, attributes_1, { ...attrs() }, void 0, $$element.namespaceURI === NAMESPACE_SVG, $$element.nodeName.includes("-")));
        },
        void 0,
        [35, 4]
      );
      append($$anchor2, fragment);
    });
    var node_2 = sibling(node);
    slot(node_2, $$props, "default", {});
    template_effect(() => attributes = set_attributes(
      svg,
      attributes,
      {
        ...defaultAttributes$1,
        ...$$restProps,
        width: size2(),
        height: size2(),
        stroke: color(),
        "stroke-width": absoluteStrokeWidth() ? Number(strokeWidth()) * 24 / Number(size2()) : strokeWidth(),
        class: mergeClasses("lucide-icon", "lucide", name() ? `lucide-${name()}` : "", $$sanitized_props.class)
      },
      void 0,
      true
    ));
    append($$anchor, svg);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Icon$1);
  mark_module_start();
  X[FILENAME] = "node_modules/.pnpm/lucide-svelte@0.469.0_svelte@5.16.0/node_modules/lucide-svelte/dist/icons/x.svelte";
  function X($$anchor, $$props) {
    check_target(new.target);
    const $$sanitized_props = legacy_rest_props($$props, [
      "children",
      "$$slots",
      "$$events",
      "$$legacy"
    ]);
    push($$props, false, X);
    const iconNode = [
      ["path", { "d": "M18 6 6 18" }],
      ["path", { "d": "m6 6 12 12" }]
    ];
    Icon$1($$anchor, spread_props({ name: "x" }, () => $$sanitized_props, {
      iconNode,
      children: wrap_snippet(X, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node = first_child(fragment_1);
        slot(node, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }));
    return pop({ ...legacy_api() });
  }
  mark_module_end(X);
  mark_module_start();
  Dialog_content[FILENAME] = "src/lib/components/shadcn-ui/dialog/dialog-content.svelte";
  var root_3$1 = add_locations(/* @__PURE__ */ template(`<!> <span class="sr-only">Close</span>`, 1), Dialog_content[FILENAME], [[35, 3]]);
  var root_2$3 = add_locations(/* @__PURE__ */ template(`<!> <!>`, 1), Dialog_content[FILENAME], []);
  var root_1$4 = add_locations(/* @__PURE__ */ template(`<!> <!>`, 1), Dialog_content[FILENAME], []);
  function Dialog_content($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Dialog_content);
    validate_prop_bindings($$props, ["ref"], [], Dialog_content);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class",
        "portalProps",
        "children"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    component(node, () => Portal, ($$anchor2, $$component) => {
      $$component($$anchor2, spread_props(() => $$props.portalProps, {
        children: wrap_snippet(Dialog_content, ($$anchor3, $$slotProps) => {
          var fragment_1 = root_1$4();
          var node_1 = first_child(fragment_1);
          component(node_1, () => Dialog_overlay, ($$anchor4, $$component2) => {
            $$component2($$anchor4, {});
          });
          var node_2 = sibling(node_1, 2);
          var class_1 = /* @__PURE__ */ derived(() => cn("fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg", $$props.class));
          component(node_2, () => Dialog_content$1, ($$anchor4, $$component2) => {
            {
              add_owner_effect(ref, $$component2);
              $$component2($$anchor4, spread_props(
                {
                  get class() {
                    return get$2(class_1);
                  }
                },
                () => restProps,
                {
                  get ref() {
                    return ref();
                  },
                  set ref($$value) {
                    ref($$value);
                  },
                  children: wrap_snippet(Dialog_content, ($$anchor5, $$slotProps2) => {
                    var fragment_2 = root_2$3();
                    var node_3 = first_child(fragment_2);
                    snippet(node_3, () => $$props.children ?? noop$1);
                    var node_4 = sibling(node_3, 2);
                    component(node_4, () => Dialog_close, ($$anchor6, $$component3) => {
                      $$component3($$anchor6, {
                        class: "absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none",
                        children: wrap_snippet(Dialog_content, ($$anchor7, $$slotProps3) => {
                          var fragment_3 = root_3$1();
                          var node_5 = first_child(fragment_3);
                          X(node_5, { class: "size-4" });
                          next(2);
                          append($$anchor7, fragment_3);
                        }),
                        $$slots: { default: true }
                      });
                    });
                    append($$anchor5, fragment_2);
                  }),
                  $$slots: { default: true }
                }
              ));
            }
          });
          append($$anchor3, fragment_1);
        }),
        $$slots: { default: true }
      }));
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Dialog_content);
  mark_module_start();
  Dialog_description[FILENAME] = "src/lib/components/shadcn-ui/dialog/dialog-description.svelte";
  function Dialog_description($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Dialog_description);
    validate_prop_bindings($$props, ["ref"], [], Dialog_description);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    var class_1 = /* @__PURE__ */ derived(() => cn("text-sm text-muted-foreground", $$props.class));
    component(node, () => Dialog_description$1, ($$anchor2, $$component) => {
      {
        add_owner_effect(ref, $$component);
        $$component($$anchor2, spread_props(
          {
            get class() {
              return get$2(class_1);
            }
          },
          () => restProps,
          {
            get ref() {
              return ref();
            },
            set ref($$value) {
              ref($$value);
            }
          }
        ));
      }
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Dialog_description);
  const Root$1 = Dialog;
  const Trigger$1 = Dialog_trigger;
  const Portal = Portal$1;
  studyTable;
  mark_module_start();
  Accordion_content[FILENAME] = "src/lib/components/shadcn-ui/accordion/accordion-content.svelte";
  var root_1$3 = add_locations(/* @__PURE__ */ template(`<div class="pb-4 pt-0"><!></div>`), Accordion_content[FILENAME], [[21, 1]]);
  function Accordion_content($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Accordion_content);
    validate_prop_bindings($$props, ["ref"], [], Accordion_content);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class",
        "children"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    var class_1 = /* @__PURE__ */ derived(() => cn("overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down", $$props.class));
    component(node, () => Accordion_content$1, ($$anchor2, $$component) => {
      {
        add_owner_effect(ref, $$component);
        $$component($$anchor2, spread_props(
          {
            get class() {
              return get$2(class_1);
            }
          },
          () => restProps,
          {
            get ref() {
              return ref();
            },
            set ref($$value) {
              ref($$value);
            },
            children: wrap_snippet(Accordion_content, ($$anchor3, $$slotProps) => {
              var div = root_1$3();
              var node_1 = child(div);
              snippet(node_1, () => $$props.children ?? noop$1);
              reset(div);
              append($$anchor3, div);
            }),
            $$slots: { default: true }
          }
        ));
      }
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Accordion_content);
  mark_module_start();
  Accordion_item[FILENAME] = "src/lib/components/shadcn-ui/accordion/accordion-item.svelte";
  function Accordion_item($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Accordion_item);
    validate_prop_bindings($$props, ["ref"], [], Accordion_item);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    var class_1 = /* @__PURE__ */ derived(() => cn("border-b", $$props.class));
    component(node, () => Accordion_item$1, ($$anchor2, $$component) => {
      {
        add_owner_effect(ref, $$component);
        $$component($$anchor2, spread_props(
          {
            get class() {
              return get$2(class_1);
            }
          },
          () => restProps,
          {
            get ref() {
              return ref();
            },
            set ref($$value) {
              ref($$value);
            }
          }
        ));
      }
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Accordion_item);
  mark_module_start();
  Chevron_down[FILENAME] = "node_modules/.pnpm/lucide-svelte@0.469.0_svelte@5.16.0/node_modules/lucide-svelte/dist/icons/chevron-down.svelte";
  function Chevron_down($$anchor, $$props) {
    check_target(new.target);
    const $$sanitized_props = legacy_rest_props($$props, [
      "children",
      "$$slots",
      "$$events",
      "$$legacy"
    ]);
    push($$props, false, Chevron_down);
    const iconNode = [["path", { "d": "m6 9 6 6 6-6" }]];
    Icon$1($$anchor, spread_props({ name: "chevron-down" }, () => $$sanitized_props, {
      iconNode,
      children: wrap_snippet(Chevron_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node = first_child(fragment_1);
        slot(node, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }));
    return pop({ ...legacy_api() });
  }
  mark_module_end(Chevron_down);
  mark_module_start();
  Accordion_trigger[FILENAME] = "src/lib/components/shadcn-ui/accordion/accordion-trigger.svelte";
  var root_2$2 = add_locations(/* @__PURE__ */ template(`<!> <!>`, 1), Accordion_trigger[FILENAME], []);
  function Accordion_trigger($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Accordion_trigger);
    validate_prop_bindings($$props, ["ref"], [], Accordion_trigger);
    let ref = prop($$props, "ref", 15, null), level = prop($$props, "level", 3, 3), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class",
        "level",
        "children"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    component(node, () => Accordion_header, ($$anchor2, $$component) => {
      $$component($$anchor2, {
        get level() {
          return level();
        },
        class: "flex",
        children: wrap_snippet(Accordion_trigger, ($$anchor3, $$slotProps) => {
          var fragment_1 = comment();
          var node_1 = first_child(fragment_1);
          var class_1 = /* @__PURE__ */ derived(() => cn("flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180", $$props.class));
          component(node_1, () => Accordion_trigger$1, ($$anchor4, $$component2) => {
            {
              add_owner_effect(ref, $$component2);
              $$component2($$anchor4, spread_props(
                {
                  get class() {
                    return get$2(class_1);
                  }
                },
                () => restProps,
                {
                  get ref() {
                    return ref();
                  },
                  set ref($$value) {
                    ref($$value);
                  },
                  children: wrap_snippet(Accordion_trigger, ($$anchor5, $$slotProps2) => {
                    var fragment_2 = root_2$2();
                    var node_2 = first_child(fragment_2);
                    snippet(node_2, () => $$props.children ?? noop$1);
                    var node_3 = sibling(node_2, 2);
                    Chevron_down(node_3, {
                      class: "size-4 shrink-0 transition-transform duration-200"
                    });
                    append($$anchor5, fragment_2);
                  }),
                  $$slots: { default: true }
                }
              ));
            }
          });
          append($$anchor3, fragment_1);
        }),
        $$slots: { default: true }
      });
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Accordion_trigger);
  studyTable;
  mark_module_start();
  Popover_content[FILENAME] = "src/lib/components/shadcn-ui/popover/popover-content.svelte";
  function Popover_content($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Popover_content);
    validate_prop_bindings($$props, ["ref"], [], Popover_content);
    let ref = prop($$props, "ref", 15, null), sideOffset = prop($$props, "sideOffset", 3, 4), align = prop($$props, "align", 3, "center"), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class",
        "sideOffset",
        "align",
        "portalProps"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    component(node, () => Portal$1, ($$anchor2, $$component) => {
      $$component($$anchor2, spread_props(() => $$props.portalProps, {
        children: wrap_snippet(Popover_content, ($$anchor3, $$slotProps) => {
          var fragment_1 = comment();
          var node_1 = first_child(fragment_1);
          var class_1 = /* @__PURE__ */ derived(() => cn("z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", $$props.class));
          component(node_1, () => Popover_content$1, ($$anchor4, $$component2) => {
            {
              add_owner_effect(ref, $$component2);
              $$component2($$anchor4, spread_props(
                {
                  get sideOffset() {
                    return sideOffset();
                  },
                  get align() {
                    return align();
                  },
                  get class() {
                    return get$2(class_1);
                  }
                },
                () => restProps,
                {
                  get ref() {
                    return ref();
                  },
                  set ref($$value) {
                    ref($$value);
                  }
                }
              ));
            }
          });
          append($$anchor3, fragment_1);
        }),
        $$slots: { default: true }
      }));
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Popover_content);
  const Root = Popover;
  const Trigger = Popover_trigger;
  studyTable;
  mark_module_start();
  Switch[FILENAME] = "src/lib/components/shadcn-ui/switch/switch.svelte";
  function Switch($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Switch);
    validate_prop_bindings($$props, ["ref", "checked"], [], Switch);
    let ref = prop($$props, "ref", 15, null), checked = prop($$props, "checked", 15, false), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class",
        "checked"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    var class_1 = /* @__PURE__ */ derived(() => cn("peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input", $$props.class));
    component(node, () => Switch$1, ($$anchor2, $$component) => {
      {
        add_owner_effect(ref, $$component);
        add_owner_effect(checked, $$component);
        $$component($$anchor2, spread_props(
          {
            get class() {
              return get$2(class_1);
            }
          },
          () => restProps,
          {
            get ref() {
              return ref();
            },
            set ref($$value) {
              ref($$value);
            },
            get checked() {
              return checked();
            },
            set checked($$value) {
              checked($$value);
            },
            children: wrap_snippet(Switch, ($$anchor3, $$slotProps) => {
              var fragment_1 = comment();
              var node_1 = first_child(fragment_1);
              var class_2 = /* @__PURE__ */ derived(() => cn("pointer-events-none block size-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"));
              component(node_1, () => Switch_thumb, ($$anchor4, $$component2) => {
                $$component2($$anchor4, {
                  get class() {
                    return get$2(class_2);
                  }
                });
              });
              append($$anchor3, fragment_1);
            }),
            $$slots: { default: true }
          }
        ));
      }
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Switch);
  studyTable;
  mark_module_start();
  Label[FILENAME] = "src/lib/components/shadcn-ui/label/label.svelte";
  function Label($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Label);
    validate_prop_bindings($$props, ["ref"], [], Label);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    var class_1 = /* @__PURE__ */ derived(() => cn("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70", $$props.class));
    component(node, () => Label$1, ($$anchor2, $$component) => {
      {
        add_owner_effect(ref, $$component);
        $$component($$anchor2, spread_props(
          {
            get class() {
              return get$2(class_1);
            }
          },
          () => restProps,
          {
            get ref() {
              return ref();
            },
            set ref($$value) {
              ref($$value);
            }
          }
        ));
      }
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Label);
  studyTable;
  studyTable;
  mark_module_start();
  Range_calendar[FILENAME] = "src/lib/components/shadcn-ui/range-calendar/range-calendar.svelte";
  var root_2$1 = add_locations(/* @__PURE__ */ template(`<!> <!> <!>`, 1), Range_calendar[FILENAME], []);
  var root_5$1 = add_locations(/* @__PURE__ */ template(`<!> <!>`, 1), Range_calendar[FILENAME], []);
  var root_1$2 = add_locations(/* @__PURE__ */ template(`<!> <!>`, 1), Range_calendar[FILENAME], []);
  function Range_calendar($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Range_calendar);
    validate_prop_bindings($$props, ["ref", "value", "placeholder"], [], Range_calendar);
    let ref = prop($$props, "ref", 15, null), value = prop($$props, "value", 15), placeholder = prop($$props, "placeholder", 15), weekdayFormat = prop($$props, "weekdayFormat", 3, "short"), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "value",
        "placeholder",
        "weekdayFormat",
        "class"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    var class_1 = /* @__PURE__ */ derived(() => cn("p-3", $$props.class));
    component(node, () => Range_calendar$1, ($$anchor2, $$component) => {
      {
        const children = wrap_snippet(Range_calendar, ($$anchor3, $$arg0) => {
          let months = () => $$arg0 == null ? void 0 : $$arg0().months;
          months();
          let weekdays = () => $$arg0 == null ? void 0 : $$arg0().weekdays;
          weekdays();
          var fragment_1 = root_1$2();
          var node_1 = first_child(fragment_1);
          component(node_1, () => Range_calendar_header, ($$anchor4, $$component2) => {
            $$component2($$anchor4, {
              children: wrap_snippet(Range_calendar, ($$anchor5, $$slotProps) => {
                var fragment_2 = root_2$1();
                var node_2 = first_child(fragment_2);
                component(node_2, () => Range_calendar_prev_button, ($$anchor6, $$component3) => {
                  $$component3($$anchor6, {});
                });
                var node_3 = sibling(node_2, 2);
                component(node_3, () => Range_calendar_heading, ($$anchor6, $$component3) => {
                  $$component3($$anchor6, {});
                });
                var node_4 = sibling(node_3, 2);
                component(node_4, () => Range_calendar_next_button, ($$anchor6, $$component3) => {
                  $$component3($$anchor6, {});
                });
                append($$anchor5, fragment_2);
              }),
              $$slots: { default: true }
            });
          });
          var node_5 = sibling(node_1, 2);
          component(node_5, () => Range_calendar_months, ($$anchor4, $$component2) => {
            $$component2($$anchor4, {
              children: wrap_snippet(Range_calendar, ($$anchor5, $$slotProps) => {
                var fragment_3 = comment();
                var node_6 = first_child(fragment_3);
                each(node_6, 17, months, index, ($$anchor6, month) => {
                  var fragment_4 = comment();
                  var node_7 = first_child(fragment_4);
                  component(node_7, () => Range_calendar_grid, ($$anchor7, $$component3) => {
                    $$component3($$anchor7, {
                      children: wrap_snippet(Range_calendar, ($$anchor8, $$slotProps2) => {
                        var fragment_5 = root_5$1();
                        var node_8 = first_child(fragment_5);
                        component(node_8, () => GridHead, ($$anchor9, $$component4) => {
                          $$component4($$anchor9, {
                            children: wrap_snippet(Range_calendar, ($$anchor10, $$slotProps3) => {
                              var fragment_6 = comment();
                              var node_9 = first_child(fragment_6);
                              component(node_9, () => Range_calendar_grid_row, ($$anchor11, $$component5) => {
                                $$component5($$anchor11, {
                                  class: "flex",
                                  children: wrap_snippet(Range_calendar, ($$anchor12, $$slotProps4) => {
                                    var fragment_7 = comment();
                                    var node_10 = first_child(fragment_7);
                                    each(node_10, 17, weekdays, index, ($$anchor13, weekday) => {
                                      var fragment_8 = comment();
                                      var node_11 = first_child(fragment_8);
                                      component(node_11, () => Range_calendar_head_cell, ($$anchor14, $$component6) => {
                                        $$component6($$anchor14, {
                                          children: wrap_snippet(Range_calendar, ($$anchor15, $$slotProps5) => {
                                            next();
                                            var text$1 = text();
                                            template_effect(() => set_text(text$1, get$2(weekday).slice(0, 2)));
                                            append($$anchor15, text$1);
                                          }),
                                          $$slots: { default: true }
                                        });
                                      });
                                      append($$anchor13, fragment_8);
                                    });
                                    append($$anchor12, fragment_7);
                                  }),
                                  $$slots: { default: true }
                                });
                              });
                              append($$anchor10, fragment_6);
                            }),
                            $$slots: { default: true }
                          });
                        });
                        var node_12 = sibling(node_8, 2);
                        component(node_12, () => GridBody, ($$anchor9, $$component4) => {
                          $$component4($$anchor9, {
                            children: wrap_snippet(Range_calendar, ($$anchor10, $$slotProps3) => {
                              var fragment_10 = comment();
                              var node_13 = first_child(fragment_10);
                              each(node_13, 17, () => get$2(month).weeks, index, ($$anchor11, weekDates) => {
                                var fragment_11 = comment();
                                var node_14 = first_child(fragment_11);
                                component(node_14, () => Range_calendar_grid_row, ($$anchor12, $$component5) => {
                                  $$component5($$anchor12, {
                                    class: "mt-2 w-full",
                                    children: wrap_snippet(Range_calendar, ($$anchor13, $$slotProps4) => {
                                      var fragment_12 = comment();
                                      var node_15 = first_child(fragment_12);
                                      each(node_15, 17, () => get$2(weekDates), index, ($$anchor14, date) => {
                                        var fragment_13 = comment();
                                        var node_16 = first_child(fragment_13);
                                        component(node_16, () => Range_calendar_cell, ($$anchor15, $$component6) => {
                                          $$component6($$anchor15, {
                                            get date() {
                                              return get$2(date);
                                            },
                                            get month() {
                                              return get$2(month).value;
                                            },
                                            children: wrap_snippet(Range_calendar, ($$anchor16, $$slotProps5) => {
                                              var fragment_14 = comment();
                                              var node_17 = first_child(fragment_14);
                                              component(node_17, () => Range_calendar_day, ($$anchor17, $$component7) => {
                                                $$component7($$anchor17, {});
                                              });
                                              append($$anchor16, fragment_14);
                                            }),
                                            $$slots: { default: true }
                                          });
                                        });
                                        append($$anchor14, fragment_13);
                                      });
                                      append($$anchor13, fragment_12);
                                    }),
                                    $$slots: { default: true }
                                  });
                                });
                                append($$anchor11, fragment_11);
                              });
                              append($$anchor10, fragment_10);
                            }),
                            $$slots: { default: true }
                          });
                        });
                        append($$anchor8, fragment_5);
                      }),
                      $$slots: { default: true }
                    });
                  });
                  append($$anchor6, fragment_4);
                });
                append($$anchor5, fragment_3);
              }),
              $$slots: { default: true }
            });
          });
          append($$anchor3, fragment_1);
        });
        add_owner_effect(ref, $$component);
        add_owner_effect(value, $$component);
        add_owner_effect(placeholder, $$component);
        $$component($$anchor2, spread_props(
          {
            get weekdayFormat() {
              return weekdayFormat();
            },
            get class() {
              return get$2(class_1);
            }
          },
          () => restProps,
          {
            get ref() {
              return ref();
            },
            set ref($$value) {
              ref($$value);
            },
            get value() {
              return value();
            },
            set value($$value) {
              value($$value);
            },
            get placeholder() {
              return placeholder();
            },
            set placeholder($$value) {
              placeholder($$value);
            },
            children,
            $$slots: { default: true }
          }
        ));
      }
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Range_calendar);
  mark_module_start();
  Range_calendar_cell[FILENAME] = "src/lib/components/shadcn-ui/range-calendar/range-calendar-cell.svelte";
  function Range_calendar_cell($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Range_calendar_cell);
    validate_prop_bindings($$props, ["ref"], [], Range_calendar_cell);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    var class_1 = /* @__PURE__ */ derived(() => cn("relative size-9 p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([data-selected])]:bg-accent first:[&:has([data-selected])]:rounded-l-md last:[&:has([data-selected])]:rounded-r-md [&:has([data-selected][data-outside-month])]:bg-accent/50 [&:has([data-selected][data-selection-end])]:rounded-r-md [&:has([data-selected][data-selection-start])]:rounded-l-md", $$props.class));
    component(node, () => Range_calendar_cell$1, ($$anchor2, $$component) => {
      {
        add_owner_effect(ref, $$component);
        $$component($$anchor2, spread_props(
          {
            get class() {
              return get$2(class_1);
            }
          },
          () => restProps,
          {
            get ref() {
              return ref();
            },
            set ref($$value) {
              ref($$value);
            }
          }
        ));
      }
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Range_calendar_cell);
  mark_module_start();
  Range_calendar_day[FILENAME] = "src/lib/components/shadcn-ui/range-calendar/range-calendar-day.svelte";
  function Range_calendar_day($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Range_calendar_day);
    validate_prop_bindings($$props, ["ref"], ["class"], Range_calendar_day);
    let ref = prop($$props, "ref", 15, null), className = prop($$props, "class", 7), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    var class_1 = /* @__PURE__ */ derived(() => cn(
      buttonVariants({ variant: "ghost" }),
      "size-9 p-0 font-normal data-[selected]:opacity-100",
      "[&[data-today]:not([data-selected])]:bg-accent [&[data-today]:not([data-selected])]:text-accent-foreground",
      // Selection Start
      "data-[selection-start]:bg-primary data-[selection-start]:text-primary-foreground data-[selection-start]:hover:bg-primary data-[selection-start]:hover:text-primary-foreground data-[selection-start]:focus:bg-primary data-[selection-start]:focus:text-primary-foreground",
      // Selection End
      "data-[selection-end]:bg-primary data-[selection-end]:text-primary-foreground data-[selection-end]:hover:bg-primary data-[selection-end]:hover:text-primary-foreground data-[selection-end]:focus:bg-primary data-[selection-end]:focus:text-primary-foreground",
      // Outside months
      "data-[outside-month]:pointer-events-none data-[outside-month]:text-muted-foreground data-[outside-month]:opacity-50 [&[data-outside-month][data-selected]]:bg-accent/50 [&[data-outside-month][data-selected]]:text-muted-foreground [&[data-outside-month][data-selected]]:opacity-30",
      // Disabled
      "data-[disabled]:text-muted-foreground data-[disabled]:opacity-50",
      // Unavailable
      "data-[unavailable]:text-destructive-foreground data-[unavailable]:line-through",
      className()
    ));
    component(node, () => Range_calendar_day$1, ($$anchor2, $$component) => {
      {
        add_owner_effect(ref, $$component);
        $$component($$anchor2, spread_props(
          {
            get class() {
              return get$2(class_1);
            }
          },
          () => restProps,
          {
            get ref() {
              return ref();
            },
            set ref($$value) {
              ref($$value);
            }
          }
        ));
      }
    });
    append($$anchor, fragment);
    return pop({
      get class() {
        return className();
      },
      set class($$value) {
        className($$value);
      },
      ...legacy_api()
    });
  }
  mark_module_end(Range_calendar_day);
  mark_module_start();
  Range_calendar_grid[FILENAME] = "src/lib/components/shadcn-ui/range-calendar/range-calendar-grid.svelte";
  function Range_calendar_grid($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Range_calendar_grid);
    validate_prop_bindings($$props, ["ref"], [], Range_calendar_grid);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    var class_1 = /* @__PURE__ */ derived(() => cn("w-full border-collapse space-y-1", $$props.class));
    component(node, () => Calendar_grid, ($$anchor2, $$component) => {
      {
        add_owner_effect(ref, $$component);
        $$component($$anchor2, spread_props(
          {
            get class() {
              return get$2(class_1);
            }
          },
          () => restProps,
          {
            get ref() {
              return ref();
            },
            set ref($$value) {
              ref($$value);
            }
          }
        ));
      }
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Range_calendar_grid);
  mark_module_start();
  Range_calendar_header[FILENAME] = "src/lib/components/shadcn-ui/range-calendar/range-calendar-header.svelte";
  function Range_calendar_header($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Range_calendar_header);
    validate_prop_bindings($$props, ["ref"], [], Range_calendar_header);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    var class_1 = /* @__PURE__ */ derived(() => cn("relative flex w-full items-center justify-between pt-1", $$props.class));
    component(node, () => Calendar_header, ($$anchor2, $$component) => {
      {
        add_owner_effect(ref, $$component);
        $$component($$anchor2, spread_props(
          {
            get class() {
              return get$2(class_1);
            }
          },
          () => restProps,
          {
            get ref() {
              return ref();
            },
            set ref($$value) {
              ref($$value);
            }
          }
        ));
      }
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Range_calendar_header);
  mark_module_start();
  Range_calendar_months[FILENAME] = "src/lib/components/shadcn-ui/range-calendar/range-calendar-months.svelte";
  var root$2 = add_locations(/* @__PURE__ */ template(`<div><!></div>`), Range_calendar_months[FILENAME], [[14, 0]]);
  function Range_calendar_months($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Range_calendar_months);
    validate_prop_bindings($$props, ["ref"], [], Range_calendar_months);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class",
        "children"
      ],
      "restProps"
    );
    var div = root$2();
    let attributes;
    var node = child(div);
    snippet(node, () => $$props.children ?? noop$1);
    bind_this(div, ($$value) => ref($$value), () => ref());
    template_effect(() => attributes = set_attributes(div, attributes, {
      class: cn("mt-4 flex flex-col space-y-4 sm:flex-row sm:space-x-4 sm:space-y-0", $$props.class),
      ...restProps
    }));
    append($$anchor, div);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Range_calendar_months);
  mark_module_start();
  Range_calendar_grid_row[FILENAME] = "src/lib/components/shadcn-ui/range-calendar/range-calendar-grid-row.svelte";
  function Range_calendar_grid_row($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Range_calendar_grid_row);
    validate_prop_bindings($$props, ["ref"], [], Range_calendar_grid_row);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    var class_1 = /* @__PURE__ */ derived(() => cn("flex", $$props.class));
    component(node, () => Calendar_grid_row, ($$anchor2, $$component) => {
      {
        add_owner_effect(ref, $$component);
        $$component($$anchor2, spread_props(
          {
            get class() {
              return get$2(class_1);
            }
          },
          () => restProps,
          {
            get ref() {
              return ref();
            },
            set ref($$value) {
              ref($$value);
            }
          }
        ));
      }
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Range_calendar_grid_row);
  mark_module_start();
  Range_calendar_heading[FILENAME] = "src/lib/components/shadcn-ui/range-calendar/range-calendar-heading.svelte";
  function Range_calendar_heading($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Range_calendar_heading);
    validate_prop_bindings($$props, ["ref"], [], Range_calendar_heading);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    var class_1 = /* @__PURE__ */ derived(() => cn("text-sm font-medium", $$props.class));
    component(node, () => Calendar_heading, ($$anchor2, $$component) => {
      {
        add_owner_effect(ref, $$component);
        $$component($$anchor2, spread_props(
          {
            get class() {
              return get$2(class_1);
            }
          },
          () => restProps,
          {
            get ref() {
              return ref();
            },
            set ref($$value) {
              ref($$value);
            }
          }
        ));
      }
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Range_calendar_heading);
  mark_module_start();
  Range_calendar_head_cell[FILENAME] = "src/lib/components/shadcn-ui/range-calendar/range-calendar-head-cell.svelte";
  function Range_calendar_head_cell($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Range_calendar_head_cell);
    validate_prop_bindings($$props, ["ref"], [], Range_calendar_head_cell);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class"
      ],
      "restProps"
    );
    var fragment = comment();
    var node = first_child(fragment);
    var class_1 = /* @__PURE__ */ derived(() => cn("w-9 rounded-md text-[0.8rem] font-normal text-muted-foreground", $$props.class));
    component(node, () => Calendar_head_cell, ($$anchor2, $$component) => {
      {
        add_owner_effect(ref, $$component);
        $$component($$anchor2, spread_props(
          {
            get class() {
              return get$2(class_1);
            }
          },
          () => restProps,
          {
            get ref() {
              return ref();
            },
            set ref($$value) {
              ref($$value);
            }
          }
        ));
      }
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Range_calendar_head_cell);
  mark_module_start();
  Chevron_right[FILENAME] = "node_modules/.pnpm/lucide-svelte@0.469.0_svelte@5.16.0/node_modules/lucide-svelte/dist/icons/chevron-right.svelte";
  function Chevron_right($$anchor, $$props) {
    check_target(new.target);
    const $$sanitized_props = legacy_rest_props($$props, [
      "children",
      "$$slots",
      "$$events",
      "$$legacy"
    ]);
    push($$props, false, Chevron_right);
    const iconNode = [["path", { "d": "m9 18 6-6-6-6" }]];
    Icon$1($$anchor, spread_props({ name: "chevron-right" }, () => $$sanitized_props, {
      iconNode,
      children: wrap_snippet(Chevron_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node = first_child(fragment_1);
        slot(node, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }));
    return pop({ ...legacy_api() });
  }
  mark_module_end(Chevron_right);
  mark_module_start();
  Range_calendar_next_button[FILENAME] = "src/lib/components/shadcn-ui/range-calendar/range-calendar-next-button.svelte";
  const Fallback$1 = wrap_snippet(Range_calendar_next_button, ($$anchor) => {
    Chevron_right($$anchor, { class: "size-4" });
  });
  function Range_calendar_next_button($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Range_calendar_next_button);
    validate_prop_bindings($$props, ["ref"], [], Range_calendar_next_button);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class",
        "children"
      ],
      "restProps"
    );
    var fragment_1 = comment();
    var node = first_child(fragment_1);
    var class_1 = /* @__PURE__ */ derived(() => cn(buttonVariants({ variant: "outline" }), "size-7 bg-transparent p-0 opacity-50 hover:opacity-100", $$props.class));
    var children_1 = /* @__PURE__ */ derived(() => $$props.children || Fallback$1);
    component(node, () => Calendar_next_button, ($$anchor2, $$component) => {
      {
        add_owner_effect(ref, $$component);
        $$component($$anchor2, spread_props(
          {
            get class() {
              return get$2(class_1);
            },
            get children() {
              return get$2(children_1);
            }
          },
          () => restProps,
          {
            get ref() {
              return ref();
            },
            set ref($$value) {
              ref($$value);
            }
          }
        ));
      }
    });
    append($$anchor, fragment_1);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Range_calendar_next_button);
  mark_module_start();
  Chevron_left[FILENAME] = "node_modules/.pnpm/lucide-svelte@0.469.0_svelte@5.16.0/node_modules/lucide-svelte/dist/icons/chevron-left.svelte";
  function Chevron_left($$anchor, $$props) {
    check_target(new.target);
    const $$sanitized_props = legacy_rest_props($$props, [
      "children",
      "$$slots",
      "$$events",
      "$$legacy"
    ]);
    push($$props, false, Chevron_left);
    const iconNode = [["path", { "d": "m15 18-6-6 6-6" }]];
    Icon$1($$anchor, spread_props({ name: "chevron-left" }, () => $$sanitized_props, {
      iconNode,
      children: wrap_snippet(Chevron_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node = first_child(fragment_1);
        slot(node, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }));
    return pop({ ...legacy_api() });
  }
  mark_module_end(Chevron_left);
  mark_module_start();
  Range_calendar_prev_button[FILENAME] = "src/lib/components/shadcn-ui/range-calendar/range-calendar-prev-button.svelte";
  const Fallback = wrap_snippet(Range_calendar_prev_button, ($$anchor) => {
    Chevron_left($$anchor, { class: "size-4" });
  });
  function Range_calendar_prev_button($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Range_calendar_prev_button);
    validate_prop_bindings($$props, ["ref"], [], Range_calendar_prev_button);
    let ref = prop($$props, "ref", 15, null), restProps = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "ref",
        "class",
        "children"
      ],
      "restProps"
    );
    var fragment_1 = comment();
    var node = first_child(fragment_1);
    var class_1 = /* @__PURE__ */ derived(() => cn(buttonVariants({ variant: "outline" }), "size-7 bg-transparent p-0 opacity-50 hover:opacity-100", $$props.class));
    var children_1 = /* @__PURE__ */ derived(() => $$props.children || Fallback);
    component(node, () => Calendar_prev_button, ($$anchor2, $$component) => {
      {
        add_owner_effect(ref, $$component);
        $$component($$anchor2, spread_props(
          {
            get class() {
              return get$2(class_1);
            },
            get children() {
              return get$2(children_1);
            }
          },
          () => restProps,
          {
            get ref() {
              return ref();
            },
            set ref($$value) {
              ref($$value);
            }
          }
        ));
      }
    });
    append($$anchor, fragment_1);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Range_calendar_prev_button);
  const GridHead = Calendar_grid_head;
  const GridBody = Calendar_grid_body;
  studyTable;
  /**
   * @license @lucide/svelte v0.483.0 - ISC
   *
   * ISC License
   * 
   * Copyright (c) for portions of Lucide are held by Cole Bemis 2013-2022 as part of Feather (MIT). All other copyright (c) for Lucide are held by Lucide Contributors 2022.
   * 
   * Permission to use, copy, modify, and/or distribute this software for any
   * purpose with or without fee is hereby granted, provided that the above
   * copyright notice and this permission notice appear in all copies.
   * 
   * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   * 
   */
  const defaultAttributes = {
    xmlns: "http://www.w3.org/2000/svg",
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    "stroke-width": 2,
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  };
  mark_module_start();
  Icon[FILENAME] = "node_modules/.pnpm/@lucide+svelte@0.483.0_svelte@5.16.0/node_modules/@lucide/svelte/dist/Icon.svelte";
  var root$1 = add_locations(/* @__PURE__ */ ns_template(`<svg><!><!></svg>`), Icon[FILENAME], [[5, 0]]);
  function Icon($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Icon);
    validate_prop_bindings($$props, [], [], Icon);
    const color = prop($$props, "color", 3, "currentColor"), size2 = prop($$props, "size", 3, 24), strokeWidth = prop($$props, "strokeWidth", 3, 2), absoluteStrokeWidth = prop($$props, "absoluteStrokeWidth", 3, false), iconNode = prop($$props, "iconNode", 19, () => []), props = /* @__PURE__ */ rest_props(
      $$props,
      [
        "$$slots",
        "$$events",
        "$$legacy",
        "name",
        "color",
        "size",
        "strokeWidth",
        "absoluteStrokeWidth",
        "iconNode",
        "children"
      ],
      "props"
    );
    var svg = root$1();
    let attributes;
    var node = child(svg);
    each(node, 17, iconNode, index, ($$anchor2, $$item) => {
      let tag = () => get$2($$item)[0];
      tag();
      let attrs = () => get$2($$item)[1];
      attrs();
      var fragment = comment();
      var node_1 = first_child(fragment);
      validate_dynamic_element_tag(tag);
      element(
        node_1,
        tag,
        true,
        ($$element, $$anchor3) => {
          let attributes_1;
          template_effect(() => attributes_1 = set_attributes($$element, attributes_1, { ...attrs() }, void 0, $$element.namespaceURI === NAMESPACE_SVG, $$element.nodeName.includes("-")));
        },
        void 0,
        [15, 4]
      );
      append($$anchor2, fragment);
    });
    var node_2 = sibling(node);
    snippet(node_2, () => $$props.children ?? noop$1);
    template_effect(() => attributes = set_attributes(
      svg,
      attributes,
      {
        ...defaultAttributes,
        ...props,
        width: size2(),
        height: size2(),
        stroke: color(),
        "stroke-width": absoluteStrokeWidth() ? Number(strokeWidth()) * 24 / Number(size2()) : strokeWidth(),
        class: [
          "lucide-icon lucide",
          $$props.name && `lucide-${$$props.name}`,
          $$props.class
        ]
      },
      void 0,
      true
    ));
    append($$anchor, svg);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Icon);
  mark_module_start();
  Calendar[FILENAME] = "node_modules/.pnpm/@lucide+svelte@0.483.0_svelte@5.16.0/node_modules/@lucide/svelte/dist/icons/calendar.svelte";
  function Calendar($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Calendar);
    validate_prop_bindings($$props, [], [], Calendar);
    let props = /* @__PURE__ */ rest_props($$props, ["$$slots", "$$events", "$$legacy"], "props");
    const iconNode = [
      ["path", { "d": "M8 2v4" }],
      ["path", { "d": "M16 2v4" }],
      [
        "rect",
        {
          "width": "18",
          "height": "18",
          "x": "3",
          "y": "4",
          "rx": "2"
        }
      ],
      ["path", { "d": "M3 10h18" }]
    ];
    Icon($$anchor, spread_props({ name: "calendar" }, () => props, {
      iconNode,
      children: wrap_snippet(Calendar, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node = first_child(fragment_1);
        snippet(node, () => $$props.children ?? noop$1);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }));
    return pop({ ...legacy_api() });
  }
  mark_module_end(Calendar);
  const constants = {
    appName: "KMITL DLC",
    utcOffset: 7,
    messages: {
      scrapeError: "Scraping error."
    },
    scraper: {
      classTypes: {
        lecture: ["ท", "L"],
        lab: ["ป", "P"]
      },
      days: {
        "อา.": 0,
        "จ.": 1,
        "อ.": 2,
        "พ.": 3,
        "พฤ.": 4,
        "ศ.": 5,
        "ส.": 6,
        Sun: 0,
        Mon: 1,
        Tue: 2,
        Wed: 3,
        Thu: 4,
        Fri: 5,
        Sat: 6
      }
    },
    apiPaths: {
      newReg: "https://k8s.reg.kmitl.ac.th/reg/api/?level_id=1&function="
    }
  };
  studyTable;
  var FileSaver_min$1 = { exports: {} };
  var FileSaver_min = FileSaver_min$1.exports;
  var hasRequiredFileSaver_min;
  function requireFileSaver_min() {
    if (hasRequiredFileSaver_min) return FileSaver_min$1.exports;
    hasRequiredFileSaver_min = 1;
    (function(module, exports) {
      (function(a2, b2) {
        b2();
      })(FileSaver_min, function() {
        function b2(a3, b3) {
          return "undefined" == typeof b3 ? b3 = { autoBom: false } : "object" != typeof b3 && (console.warn("Deprecated: Expected third argument to be a object"), b3 = { autoBom: !b3 }), b3.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a3.type) ? new Blob(["\uFEFF", a3], { type: a3.type }) : a3;
        }
        function c2(a3, b3, c3) {
          var d3 = new XMLHttpRequest();
          d3.open("GET", a3), d3.responseType = "blob", d3.onload = function() {
            g2(d3.response, b3, c3);
          }, d3.onerror = function() {
            console.error("could not download file");
          }, d3.send();
        }
        function d2(a3) {
          var b3 = new XMLHttpRequest();
          b3.open("HEAD", a3, false);
          try {
            b3.send();
          } catch (a4) {
          }
          return 200 <= b3.status && 299 >= b3.status;
        }
        function e(a3) {
          try {
            a3.dispatchEvent(new MouseEvent("click"));
          } catch (c3) {
            var b3 = document.createEvent("MouseEvents");
            b3.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null), a3.dispatchEvent(b3);
          }
        }
        var f2 = "object" == typeof window && window.window === window ? window : "object" == typeof self && self.self === self ? self : "object" == typeof commonjsGlobal && commonjsGlobal.global === commonjsGlobal ? commonjsGlobal : void 0, a2 = f2.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent), g2 = f2.saveAs || ("object" != typeof window || window !== f2 ? function() {
        } : "download" in HTMLAnchorElement.prototype && !a2 ? function(b3, g3, h2) {
          var i2 = f2.URL || f2.webkitURL, j2 = document.createElement("a");
          g3 = g3 || b3.name || "download", j2.download = g3, j2.rel = "noopener", "string" == typeof b3 ? (j2.href = b3, j2.origin === location.origin ? e(j2) : d2(j2.href) ? c2(b3, g3, h2) : e(j2, j2.target = "_blank")) : (j2.href = i2.createObjectURL(b3), setTimeout(function() {
            i2.revokeObjectURL(j2.href);
          }, 4e4), setTimeout(function() {
            e(j2);
          }, 0));
        } : "msSaveOrOpenBlob" in navigator ? function(f3, g3, h2) {
          if (g3 = g3 || f3.name || "download", "string" != typeof f3) navigator.msSaveOrOpenBlob(b2(f3, h2), g3);
          else if (d2(f3)) c2(f3, g3, h2);
          else {
            var i2 = document.createElement("a");
            i2.href = f3, i2.target = "_blank", setTimeout(function() {
              e(i2);
            });
          }
        } : function(b3, d3, e2, g3) {
          if (g3 = g3 || open("", "_blank"), g3 && (g3.document.title = g3.document.body.innerText = "downloading..."), "string" == typeof b3) return c2(b3, d3, e2);
          var h2 = "application/octet-stream" === b3.type, i2 = /constructor/i.test(f2.HTMLElement) || f2.safari, j2 = /CriOS\/[\d]+/.test(navigator.userAgent);
          if ((j2 || h2 && i2 || a2) && "undefined" != typeof FileReader) {
            var k = new FileReader();
            k.onloadend = function() {
              var a3 = k.result;
              a3 = j2 ? a3 : a3.replace(/^data:[^;]*;/, "data:attachment/file;"), g3 ? g3.location.href = a3 : location = a3, g3 = null;
            }, k.readAsDataURL(b3);
          } else {
            var l2 = f2.URL || f2.webkitURL, m = l2.createObjectURL(b3);
            g3 ? g3.location = m : location.href = m, g3 = null, setTimeout(function() {
              l2.revokeObjectURL(m);
            }, 4e4);
          }
        });
        f2.saveAs = g2.saveAs = g2, module.exports = g2;
      });
    })(FileSaver_min$1);
    return FileSaver_min$1.exports;
  }
  var FileSaver_minExports = requireFileSaver_min();
  function commonjsRequire(path) {
    throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
  }
  var uuidRandom = { exports: {} };
  const __viteBrowserExternal = new Proxy({}, {
    get(_2, key) {
      throw new Error(`Module "" has been externalized for browser compatibility. Cannot access ".${key}" in client code.  See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
    }
  });
  const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    default: __viteBrowserExternal
  }, Symbol.toStringTag, { value: "Module" }));
  const require$$0 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
  var hasRequiredUuidRandom;
  function requireUuidRandom() {
    if (hasRequiredUuidRandom) return uuidRandom.exports;
    hasRequiredUuidRandom = 1;
    (function(module) {
      (function() {
        var buf, bufIdx = 0, hexBytes = [], i2;
        for (i2 = 0; i2 < 256; i2++) {
          hexBytes[i2] = (i2 + 256).toString(16).substr(1);
        }
        uuid2.BUFFER_SIZE = 4096;
        uuid2.bin = uuidBin;
        uuid2.clearBuffer = function() {
          buf = null;
          bufIdx = 0;
        };
        uuid2.test = function(uuid3) {
          if (typeof uuid3 === "string") {
            return /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(uuid3);
          }
          return false;
        };
        var crypt0;
        if (typeof crypto !== "undefined") {
          crypt0 = crypto;
        } else if (typeof window !== "undefined" && typeof window.msCrypto !== "undefined") {
          crypt0 = window.msCrypto;
        }
        if (typeof commonjsRequire === "function") {
          crypt0 = crypt0 || require$$0;
          module.exports = uuid2;
        } else if (typeof window !== "undefined") {
          window.uuid = uuid2;
        }
        uuid2.randomBytes = function() {
          if (crypt0) {
            if (crypt0.randomBytes) {
              return crypt0.randomBytes;
            }
            if (crypt0.getRandomValues) {
              if (typeof Uint8Array.prototype.slice !== "function") {
                return function(n) {
                  var bytes = new Uint8Array(n);
                  crypt0.getRandomValues(bytes);
                  return Array.from(bytes);
                };
              }
              return function(n) {
                var bytes = new Uint8Array(n);
                crypt0.getRandomValues(bytes);
                return bytes;
              };
            }
          }
          return function(n) {
            var i3, r2 = [];
            for (i3 = 0; i3 < n; i3++) {
              r2.push(Math.floor(Math.random() * 256));
            }
            return r2;
          };
        }();
        function randomBytesBuffered(n) {
          if (!buf || bufIdx + n > uuid2.BUFFER_SIZE) {
            bufIdx = 0;
            buf = uuid2.randomBytes(uuid2.BUFFER_SIZE);
          }
          return buf.slice(bufIdx, bufIdx += n);
        }
        function uuidBin() {
          var b2 = randomBytesBuffered(16);
          b2[6] = b2[6] & 15 | 64;
          b2[8] = b2[8] & 63 | 128;
          return b2;
        }
        function uuid2() {
          var b2 = uuidBin();
          return hexBytes[b2[0]] + hexBytes[b2[1]] + hexBytes[b2[2]] + hexBytes[b2[3]] + "-" + hexBytes[b2[4]] + hexBytes[b2[5]] + "-" + hexBytes[b2[6]] + hexBytes[b2[7]] + "-" + hexBytes[b2[8]] + hexBytes[b2[9]] + "-" + hexBytes[b2[10]] + hexBytes[b2[11]] + hexBytes[b2[12]] + hexBytes[b2[13]] + hexBytes[b2[14]] + hexBytes[b2[15]];
        }
      })();
    })(uuidRandom);
    return uuidRandom.exports;
  }
  var uuidRandomExports = requireUuidRandom();
  const G = /* @__PURE__ */ getDefaultExportFromCjs(uuidRandomExports);
  var b = ((u2) => (u2.SECONDLY = "SECONDLY", u2.MINUTELY = "MINUTELY", u2.HOURLY = "HOURLY", u2.DAILY = "DAILY", u2.WEEKLY = "WEEKLY", u2.MONTHLY = "MONTHLY", u2.YEARLY = "YEARLY", u2))(b || {}), A = ((u2) => (u2.SU = "SU", u2.MO = "MO", u2.TU = "TU", u2.WE = "WE", u2.TH = "TH", u2.FR = "FR", u2.SA = "SA", u2))(A || {});
  function o(a2, t, e, n) {
    if ((a2 == null ? void 0 : a2.startsWith("/")) && (a2 = a2.substr(1)), typeof t == "string" || t instanceof Date) {
      let i2 = new Date(t), s = i2.getUTCFullYear() + String(i2.getUTCMonth() + 1).padStart(2, "0") + i2.getUTCDate().toString().padStart(2, "0");
      return a2 && (s = i2.getFullYear() + String(i2.getMonth() + 1).padStart(2, "0") + i2.getDate().toString().padStart(2, "0")), e ? s : a2 ? (s += "T" + i2.getHours().toString().padStart(2, "0") + i2.getMinutes().toString().padStart(2, "0") + i2.getSeconds().toString().padStart(2, "0"), s) : (s += "T" + i2.getUTCHours().toString().padStart(2, "0") + i2.getUTCMinutes().toString().padStart(2, "0") + i2.getUTCSeconds().toString().padStart(2, "0") + (n ? "" : "Z"), s);
    } else if (S(t)) {
      let i2 = a2 ? F(t) && !t.tz() ? t.clone().tz(a2) : t : n || e && F(t) && t.tz() ? t : t.utc();
      return i2.format("YYYYMMDD") + (e ? "" : "T" + i2.format("HHmmss") + (n || a2 ? "" : "Z"));
    } else if (R(t)) {
      let i2 = a2 ? t.setZone(a2) : n || e && t.zone.type !== "system" ? t : t.setZone("utc");
      return i2.toFormat("yyyyLLdd") + (e ? "" : "T" + i2.toFormat("HHmmss") + (n || a2 ? "" : "Z"));
    } else {
      let i2 = t;
      if (a2) i2 = typeof t.tz == "function" ? t.tz(a2) : t;
      else if (!n) if (typeof t.utc == "function") i2 = t.utc();
      else throw new Error("Unable to convert dayjs object to UTC value: UTC plugin is not available!");
      return i2.format("YYYYMMDD") + (e ? "" : "T" + i2.format("HHmmss") + (n || a2 ? "" : "Z"));
    }
  }
  function E(a2, t, e, n) {
    let i2 = "", s = (n == null ? void 0 : n.floating) || false;
    return (n == null ? void 0 : n.timezone) && (i2 = ";TZID=" + n.timezone, s = true), t + i2 + ":" + o(a2, e, false, s);
  }
  function r(a2, t) {
    return String(a2).replace(t ? /[\\"]/g : /[\\;,]/g, function(e) {
      return "\\" + e;
    }).replace(/(?:\r\n|\r|\n)/g, "\\n");
  }
  function v(a2) {
    return a2.split(`\r
`).map(function(t) {
      let e = "", n = 0;
      for (let i2 = 0; i2 < t.length; i2++) {
        let s = t.charAt(i2);
        s >= "\uD800" && s <= "\uDBFF" && (s += t.charAt(++i2));
        let k = new TextEncoder().encode(s).length;
        n += k, n > 74 && (e += `\r
 `, n = k), e += s;
      }
      return e;
    }).join(`\r
`);
  }
  function l(a2, t, e) {
    if (Array.isArray(t)) a2.x = t.map((n) => {
      if (Array.isArray(n)) return n;
      if (typeof n.key != "string" || typeof n.value != "string") throw new Error("Either key or value is not a string!");
      if (n.key.substr(0, 2) !== "X-") throw new Error("Key has to start with `X-`!");
      return [n.key, n.value];
    });
    else if (typeof t == "object") a2.x = Object.entries(t).map(([n, i2]) => {
      if (typeof n != "string" || typeof i2 != "string") throw new Error("Either key or value is not a string!");
      if (n.substr(0, 2) !== "X-") throw new Error("Key has to start with `X-`!");
      return [n, i2];
    });
    else if (typeof t == "string" && typeof e == "string") {
      if (t.substr(0, 2) !== "X-") throw new Error("Key has to start with `X-`!");
      a2.x.push([t, e]);
    } else return a2.x.map((n) => ({ key: n[0], value: n[1] }));
  }
  function D(a2) {
    let t = a2.x.map(([e, n]) => e.toUpperCase() + ":" + r(n, false)).join(`\r
`);
    return t.length ? t + `\r
` : "";
  }
  function p(a2, t) {
    let e = null;
    if (typeof t == "string") {
      let n = t.match(/^(.+) ?<([^>]+)>$/);
      n ? e = { name: n[1].trim(), email: n[2].trim() } : t.includes("@") && (e = { name: t.trim(), email: t.trim() });
    } else typeof t == "object" && (e = { name: t.name, email: t.email, mailto: t.mailto, sentBy: t.sentBy });
    if (!e && typeof t == "string") throw new Error("`" + a2 + "` isn't formated correctly. See https://sebbo2002.github.io/ical-generator/develop/reference/interfaces/ICalOrganizer.html");
    if (!e) throw new Error("`" + a2 + "` needs to be a valid formed string or an object. See https://sebbo2002.github.io/ical-generator/develop/reference/interfaces/ICalOrganizer.html");
    if (!e.name) throw new Error("`" + a2 + ".name` is empty!");
    return e;
  }
  function d(a2, t) {
    let e = Object.values(a2), n = String(t).toUpperCase();
    if (!n || !e.includes(n)) throw new Error(`Input must be one of the following: ${e.join(", ")}`);
    return n;
  }
  function h(a2, t) {
    if (a2 instanceof Date && isNaN(a2.getTime()) || typeof a2 == "string" && isNaN(new Date(a2).getTime())) throw new Error(`\`${t}\` has to be a valid date!`);
    if (a2 instanceof Date || typeof a2 == "string" || R(a2) && a2.isValid === true || (S(a2) || j(a2)) && a2.isValid()) return a2;
    throw new Error(`\`${t}\` has to be a valid date!`);
  }
  function N(a2) {
    return typeof a2 == "string" || a2 instanceof Date ? new Date(a2) : R(a2) ? a2.toJSDate() : a2.toDate();
  }
  function S(a2) {
    return a2 != null && a2._isAMomentObject != null;
  }
  function F(a2) {
    return S(a2) && "tz" in a2 && typeof a2.tz == "function";
  }
  function j(a2) {
    return typeof a2 == "object" && a2 !== null && !(a2 instanceof Date) && !S(a2) && !R(a2);
  }
  function R(a2) {
    return typeof a2 == "object" && a2 !== null && "toJSDate" in a2 && typeof a2.toJSDate == "function";
  }
  function J(a2) {
    return a2 !== null && typeof a2 == "object" && "asSeconds" in a2 && typeof a2.asSeconds == "function";
  }
  function x(a2) {
    return a2 !== null && typeof a2 == "object" && "between" in a2 && typeof a2.between == "function" && typeof a2.toString == "function";
  }
  function g(a2) {
    return a2 ? typeof a2 == "string" ? a2 : a2.toJSON() : null;
  }
  function C(a2) {
    let t = "";
    return a2 < 0 && (t = "-", a2 *= -1), t += "P", a2 >= 86400 && (t += Math.floor(a2 / 86400) + "D", a2 %= 86400), !a2 && t.length > 1 || (t += "T", a2 >= 3600 && (t += Math.floor(a2 / 3600) + "H", a2 %= 3600), a2 >= 60 && (t += Math.floor(a2 / 60) + "M", a2 %= 60), a2 > 0 ? t += a2 + "S" : t.length <= 2 && (t += "0S")), t;
  }
  var O = ((i2) => (i2.CHAIR = "CHAIR", i2.REQ = "REQ-PARTICIPANT", i2.OPT = "OPT-PARTICIPANT", i2.NON = "NON-PARTICIPANT", i2))(O || {}), M = ((s) => (s.ACCEPTED = "ACCEPTED", s.TENTATIVE = "TENTATIVE", s.DECLINED = "DECLINED", s.DELEGATED = "DELEGATED", s.NEEDSACTION = "NEEDS-ACTION", s))(M || {}), w = ((s) => (s.INDIVIDUAL = "INDIVIDUAL", s.GROUP = "GROUP", s.RESOURCE = "RESOURCE", s.ROOM = "ROOM", s.UNKNOWN = "UNKNOWN", s))(w || {}), f = class a2 {
    constructor(t, e) {
      __publicField(this, "data");
      __publicField(this, "parent");
      if (this.data = { name: null, email: "", mailto: null, sentBy: null, status: null, role: "REQ-PARTICIPANT", rsvp: null, type: null, delegatedTo: null, delegatedFrom: null, x: [] }, this.parent = e, !this.parent) throw new Error("`event` option required!");
      if (!t.email) throw new Error("No value for `email` in ICalAttendee given!");
      t.name !== void 0 && this.name(t.name), t.email !== void 0 && this.email(t.email), t.mailto !== void 0 && this.mailto(t.mailto), t.sentBy !== void 0 && this.sentBy(t.sentBy), t.status !== void 0 && this.status(t.status), t.role !== void 0 && this.role(t.role), t.rsvp !== void 0 && this.rsvp(t.rsvp), t.type !== void 0 && this.type(t.type), t.delegatedTo !== void 0 && this.delegatedTo(t.delegatedTo), t.delegatedFrom !== void 0 && this.delegatedFrom(t.delegatedFrom), t.delegatesTo && this.delegatesTo(t.delegatesTo), t.delegatesFrom && this.delegatesFrom(t.delegatesFrom), t.x !== void 0 && this.x(t.x);
    }
    name(t) {
      return t === void 0 ? this.data.name : (this.data.name = t || null, this);
    }
    email(t) {
      return t ? (this.data.email = t, this) : this.data.email;
    }
    mailto(t) {
      return t === void 0 ? this.data.mailto : (this.data.mailto = t || null, this);
    }
    sentBy(t) {
      return t ? (this.data.sentBy = t, this) : this.data.sentBy;
    }
    role(t) {
      return t === void 0 ? this.data.role : (this.data.role = d(O, t), this);
    }
    rsvp(t) {
      return t === void 0 ? this.data.rsvp : t === null ? (this.data.rsvp = null, this) : (this.data.rsvp = !!t, this);
    }
    status(t) {
      return t === void 0 ? this.data.status : t ? (this.data.status = d(M, t), this) : (this.data.status = null, this);
    }
    type(t) {
      return t === void 0 ? this.data.type : t ? (this.data.type = d(w, t), this) : (this.data.type = null, this);
    }
    delegatedTo(t) {
      return t === void 0 ? this.data.delegatedTo : t ? (typeof t == "string" ? this.data.delegatedTo = new a2({ email: t, ...p("delegatedTo", t) }, this.parent) : t instanceof a2 ? this.data.delegatedTo = t : this.data.delegatedTo = new a2(t, this.parent), this.data.status = "DELEGATED", this) : (this.data.delegatedTo = null, this.data.status === "DELEGATED" && (this.data.status = null), this);
    }
    delegatedFrom(t) {
      return t === void 0 ? this.data.delegatedFrom : (t ? typeof t == "string" ? this.data.delegatedFrom = new a2({ email: t, ...p("delegatedFrom", t) }, this.parent) : t instanceof a2 ? this.data.delegatedFrom = t : this.data.delegatedFrom = new a2(t, this.parent) : this.data.delegatedFrom = null, this);
    }
    delegatesTo(t) {
      let e = t instanceof a2 ? t : this.parent.createAttendee(t);
      return this.delegatedTo(e), e.delegatedFrom(this), e;
    }
    delegatesFrom(t) {
      let e = t instanceof a2 ? t : this.parent.createAttendee(t);
      return this.delegatedFrom(e), e.delegatedTo(this), e;
    }
    x(t, e) {
      if (t === void 0) return l(this.data);
      if (typeof t == "string" && typeof e == "string") l(this.data, t, e);
      else if (typeof t == "object") l(this.data, t);
      else throw new Error("Either key or value is not a string!");
      return this;
    }
    toJSON() {
      var _a2, _b2;
      return Object.assign({}, this.data, { delegatedTo: ((_a2 = this.data.delegatedTo) == null ? void 0 : _a2.email()) || null, delegatedFrom: ((_b2 = this.data.delegatedFrom) == null ? void 0 : _b2.email()) || null, x: this.x() });
    }
    toString() {
      let t = "ATTENDEE";
      if (!this.data.email) throw new Error("No value for `email` in ICalAttendee given!");
      return t += ";ROLE=" + this.data.role, this.data.type && (t += ";CUTYPE=" + this.data.type), this.data.status && (t += ";PARTSTAT=" + this.data.status), this.data.rsvp !== null && (t += ";RSVP=" + this.data.rsvp.toString().toUpperCase()), this.data.sentBy !== null && (t += ';SENT-BY="mailto:' + this.data.sentBy + '"'), this.data.delegatedTo && (t += ';DELEGATED-TO="' + this.data.delegatedTo.email() + '"'), this.data.delegatedFrom && (t += ';DELEGATED-FROM="' + this.data.delegatedFrom.email() + '"'), this.data.name && (t += ';CN="' + r(this.data.name, true) + '"'), this.data.email && this.data.mailto && (t += ";EMAIL=" + r(this.data.email, false)), this.data.x.length && (t += ";" + this.data.x.map(([e, n]) => e.toUpperCase() + "=" + r(n, false)).join(";")), t += ":MAILTO:" + r(this.data.mailto || this.data.email, false) + `\r
`, t;
    }
  };
  var V = ((n) => (n.display = "display", n.audio = "audio", n.email = "email", n))(V || {}), Y = { end: "END", start: "START" }, I = class {
    constructor(t, e) {
      __publicField(this, "data");
      __publicField(this, "event");
      if (this.data = { type: "display", trigger: -600, relatesTo: null, repeat: null, interval: null, attach: null, description: null, summary: null, attendees: [], x: [] }, this.event = e, !e) throw new Error("`event` option required!");
      t.type !== void 0 && this.type(t.type), "trigger" in t && t.trigger !== void 0 && this.trigger(t.trigger), "triggerBefore" in t && t.triggerBefore !== void 0 && this.triggerBefore(t.triggerBefore), "triggerAfter" in t && t.triggerAfter !== void 0 && this.triggerAfter(t.triggerAfter), t.repeat && this.repeat(t.repeat), t.attach !== void 0 && this.attach(t.attach), t.description !== void 0 && this.description(t.description), t.summary !== void 0 && this.summary(t.summary), t.attendees !== void 0 && this.attendees(t.attendees), t.x !== void 0 && this.x(t.x);
    }
    type(t) {
      if (t === void 0) return this.data.type;
      if (!t || !Object.keys(V).includes(t)) throw new Error("`type` is not correct, must be either `display` or `audio`!");
      return this.data.type = t, this;
    }
    trigger(t) {
      if (t === void 0 && typeof this.data.trigger == "number") return -1 * this.data.trigger;
      if (t === void 0) return this.data.trigger;
      if (typeof t == "number" && isFinite(t)) this.data.trigger = -1 * t;
      else {
        if (!t || typeof t == "number") throw new Error("`trigger` is not correct, must be a finite number or a supported date!");
        this.data.trigger = h(t, "trigger");
      }
      return this;
    }
    relatesTo(t) {
      if (t === void 0) return this.data.relatesTo;
      if (!t) return this.data.relatesTo = null, this;
      if (!Object.values(Y).includes(t)) throw new Error("`relatesTo` is not correct, must be either `START` or `END`!");
      return this.data.relatesTo = t, this;
    }
    triggerAfter(t) {
      return t === void 0 ? this.data.trigger : this.trigger(typeof t == "number" ? -1 * t : t);
    }
    triggerBefore(t) {
      return t === void 0 ? this.trigger() : this.trigger(t);
    }
    repeat(t) {
      if (t === void 0) return this.data.repeat;
      if (!t) return this.data.repeat = null, this;
      if (typeof t != "object") throw new Error("`repeat` is not correct, must be an object!");
      if (typeof t.times != "number" || !isFinite(t.times)) throw new Error("`repeat.times` is not correct, must be numeric!");
      if (typeof t.interval != "number" || !isFinite(t.interval)) throw new Error("`repeat.interval` is not correct, must be numeric!");
      return this.data.repeat = t, this;
    }
    attach(t) {
      if (t === void 0) return this.data.attach;
      if (!t) return this.data.attach = null, this;
      let e = null;
      if (typeof t == "string") e = { uri: t, mime: null };
      else if (typeof t == "object") e = { uri: t.uri, mime: t.mime || null };
      else throw new Error("`attachment` needs to be a valid formed string or an object. See https://sebbo2002.github.io/ical-generator/develop/reference/classes/ICalAlarm.html#attach");
      if (!e.uri) throw new Error("`attach.uri` is empty!");
      return this.data.attach = { uri: e.uri, mime: e.mime }, this;
    }
    description(t) {
      return t === void 0 ? this.data.description : t ? (this.data.description = t, this) : (this.data.description = null, this);
    }
    summary(t) {
      return t === void 0 ? this.data.summary : t ? (this.data.summary = t, this) : (this.data.summary = null, this);
    }
    createAttendee(t) {
      if (t instanceof f) return this.data.attendees.push(t), t;
      typeof t == "string" && (t = { email: t, ...p("data", t) });
      let e = new f(t, this);
      return this.data.attendees.push(e), e;
    }
    attendees(t) {
      return t ? (t.forEach((e) => this.createAttendee(e)), this) : this.data.attendees;
    }
    x(t, e) {
      if (t === void 0) return l(this.data);
      if (typeof t == "string" && typeof e == "string") l(this.data, t, e);
      else if (typeof t == "object") l(this.data, t);
      else throw new Error("Either key or value is not a string!");
      return this;
    }
    toJSON() {
      let t = this.trigger();
      return Object.assign({}, this.data, { trigger: typeof t == "number" ? t : g(t), x: this.x() });
    }
    toString() {
      var _a2;
      let t = `BEGIN:VALARM\r
`;
      if (t += "ACTION:" + this.data.type.toUpperCase() + `\r
`, typeof this.data.trigger == "number" && this.data.relatesTo === null ? this.data.trigger > 0 ? t += "TRIGGER;RELATED=END:" + C(this.data.trigger) + `\r
` : t += "TRIGGER:" + C(this.data.trigger) + `\r
` : typeof this.data.trigger == "number" ? t += "TRIGGER;RELATED=" + ((_a2 = this.data.relatesTo) == null ? void 0 : _a2.toUpperCase()) + ":" + C(this.data.trigger) + `\r
` : t += "TRIGGER;VALUE=DATE-TIME:" + o(this.event.timezone(), this.data.trigger) + `\r
`, this.data.repeat) {
        if (!this.data.repeat.times) throw new Error("No value for `repeat.times` in ICalAlarm given, but required for `interval`!");
        if (!this.data.repeat.interval) throw new Error("No value for `repeat.interval` in ICalAlarm given, but required for `repeat`!");
        t += "REPEAT:" + this.data.repeat.times + `\r
`, t += "DURATION:" + C(this.data.repeat.interval) + `\r
`;
      }
      return this.data.type === "audio" && this.data.attach && this.data.attach.mime ? t += "ATTACH;FMTTYPE=" + r(this.data.attach.mime, false) + ":" + r(this.data.attach.uri, false) + `\r
` : this.data.type === "audio" && this.data.attach ? t += "ATTACH;VALUE=URI:" + r(this.data.attach.uri, false) + `\r
` : this.data.type === "audio" && (t += `ATTACH;VALUE=URI:Basso\r
`), this.data.type !== "audio" && this.data.description ? t += "DESCRIPTION:" + r(this.data.description, false) + `\r
` : this.data.type !== "audio" && (t += "DESCRIPTION:" + r(this.event.summary(), false) + `\r
`), this.data.type === "email" && this.data.summary ? t += "SUMMARY:" + r(this.data.summary, false) + `\r
` : this.data.type === "email" && (t += "SUMMARY:" + r(this.event.summary(), false) + `\r
`), this.data.type === "email" && this.data.attendees.forEach((e) => {
        t += e.toString();
      }), t += D(this.data), t += `END:VALARM\r
`, t;
    }
  };
  var c = class {
    constructor(t) {
      __publicField(this, "data");
      if (this.data = { name: "" }, !t.name) throw new Error("No value for `name` in ICalCategory given!");
      this.name(t.name);
    }
    name(t) {
      return t === void 0 ? this.data.name : (this.data.name = t, this);
    }
    toJSON() {
      return Object.assign({}, this.data);
    }
    toString() {
      return r(this.data.name, false);
    }
  };
  var L = ((n) => (n.CONFIRMED = "CONFIRMED", n.TENTATIVE = "TENTATIVE", n.CANCELLED = "CANCELLED", n))(L || {}), z = ((i2) => (i2.FREE = "FREE", i2.TENTATIVE = "TENTATIVE", i2.BUSY = "BUSY", i2.OOF = "OOF", i2))(z || {}), U = ((e) => (e.TRANSPARENT = "TRANSPARENT", e.OPAQUE = "OPAQUE", e))(U || {}), B = ((n) => (n.PUBLIC = "PUBLIC", n.PRIVATE = "PRIVATE", n.CONFIDENTIAL = "CONFIDENTIAL", n))(B || {}), y = class {
    constructor(t, e) {
      __publicField(this, "data");
      __publicField(this, "calendar");
      if (this.data = { id: G(), sequence: 0, start: /* @__PURE__ */ new Date(), end: null, recurrenceId: null, timezone: null, stamp: /* @__PURE__ */ new Date(), allDay: false, floating: false, repeating: null, summary: "", location: null, description: null, organizer: null, attendees: [], alarms: [], categories: [], status: null, busystatus: null, priority: null, url: null, attachments: [], transparency: null, created: null, lastModified: null, class: null, x: [] }, this.calendar = e, !e) throw new Error("`calendar` option required!");
      t.id && this.id(t.id), t.sequence !== void 0 && this.sequence(t.sequence), t.start && this.start(t.start), t.end !== void 0 && this.end(t.end), t.recurrenceId !== void 0 && this.recurrenceId(t.recurrenceId), t.timezone !== void 0 && this.timezone(t.timezone), t.stamp !== void 0 && this.stamp(t.stamp), t.allDay !== void 0 && this.allDay(t.allDay), t.floating !== void 0 && this.floating(t.floating), t.repeating !== void 0 && this.repeating(t.repeating), t.summary !== void 0 && this.summary(t.summary), t.location !== void 0 && this.location(t.location), t.description !== void 0 && this.description(t.description), t.organizer !== void 0 && this.organizer(t.organizer), t.attendees !== void 0 && this.attendees(t.attendees), t.alarms !== void 0 && this.alarms(t.alarms), t.categories !== void 0 && this.categories(t.categories), t.status !== void 0 && this.status(t.status), t.busystatus !== void 0 && this.busystatus(t.busystatus), t.priority !== void 0 && this.priority(t.priority), t.url !== void 0 && this.url(t.url), t.attachments !== void 0 && this.attachments(t.attachments), t.transparency !== void 0 && this.transparency(t.transparency), t.created !== void 0 && this.created(t.created), t.lastModified !== void 0 && this.lastModified(t.lastModified), t.class !== void 0 && this.class(t.class), t.x !== void 0 && this.x(t.x);
    }
    id(t) {
      return t === void 0 ? this.data.id : (this.data.id = String(t), this);
    }
    uid(t) {
      return t === void 0 ? this.id() : this.id(t);
    }
    sequence(t) {
      if (t === void 0) return this.data.sequence;
      let e = parseInt(String(t), 10);
      if (isNaN(e)) throw new Error("`sequence` must be a number!");
      return this.data.sequence = t, this;
    }
    start(t) {
      return t === void 0 ? (this.swapStartAndEndIfRequired(), this.data.start) : (this.data.start = h(t, "start"), this);
    }
    end(t) {
      return t === void 0 ? (this.swapStartAndEndIfRequired(), this.data.end) : t === null ? (this.data.end = null, this) : (this.data.end = h(t, "end"), this);
    }
    swapStartAndEndIfRequired() {
      if (this.data.start && this.data.end && N(this.data.start).getTime() > N(this.data.end).getTime()) {
        let t = this.data.start;
        this.data.start = this.data.end, this.data.end = t;
      }
    }
    recurrenceId(t) {
      return t === void 0 ? this.data.recurrenceId : t === null ? (this.data.recurrenceId = null, this) : (this.data.recurrenceId = h(t, "recurrenceId"), this);
    }
    timezone(t) {
      return t === void 0 && this.data.timezone !== null ? this.data.timezone : t === void 0 ? this.calendar.timezone() : (this.data.timezone = t && t !== "UTC" ? t.toString() : null, this.data.timezone && (this.data.floating = false), this);
    }
    stamp(t) {
      return t === void 0 ? this.data.stamp : (this.data.stamp = h(t, "stamp"), this);
    }
    timestamp(t) {
      return t === void 0 ? this.stamp() : this.stamp(t);
    }
    allDay(t) {
      return t === void 0 ? this.data.allDay : (this.data.allDay = !!t, this);
    }
    floating(t) {
      return t === void 0 ? this.data.floating : (this.data.floating = !!t, this.data.floating && (this.data.timezone = null), this);
    }
    repeating(t) {
      if (t === void 0) return this.data.repeating;
      if (!t) return this.data.repeating = null, this;
      if (x(t) || typeof t == "string") return this.data.repeating = t, this;
      if (this.data.repeating = { freq: d(b, t.freq) }, t.count) {
        if (!isFinite(t.count)) throw new Error("`repeating.count` must be a finite number!");
        this.data.repeating.count = t.count;
      }
      if (t.interval) {
        if (!isFinite(t.interval)) throw new Error("`repeating.interval` must be a finite number!");
        this.data.repeating.interval = t.interval;
      }
      if (t.until !== void 0 && (this.data.repeating.until = h(t.until, "repeating.until")), t.byDay) {
        let e = Array.isArray(t.byDay) ? t.byDay : [t.byDay];
        this.data.repeating.byDay = e.map((n) => d(A, n));
      }
      if (t.byMonth) {
        let e = Array.isArray(t.byMonth) ? t.byMonth : [t.byMonth];
        this.data.repeating.byMonth = e.map((n) => {
          if (typeof n != "number" || n < 1 || n > 12) throw new Error("`repeating.byMonth` contains invalid value `" + n + "`!");
          return n;
        });
      }
      if (t.byMonthDay) {
        let e = Array.isArray(t.byMonthDay) ? t.byMonthDay : [t.byMonthDay];
        this.data.repeating.byMonthDay = e.map((n) => {
          if (typeof n != "number" || n < -31 || n > 31 || n === 0) throw new Error("`repeating.byMonthDay` contains invalid value `" + n + "`!");
          return n;
        });
      }
      if (t.bySetPos) {
        if (!this.data.repeating.byDay) throw "`repeating.bySetPos` must be used along with `repeating.byDay`!";
        let e = Array.isArray(t.bySetPos) ? t.bySetPos : [t.bySetPos];
        this.data.repeating.bySetPos = e.map((n) => {
          if (typeof n != "number" || n < -366 || n > 366 || n === 0) throw "`repeating.bySetPos` contains invalid value `" + n + "`!";
          return n;
        });
      }
      if (t.exclude) {
        let e = Array.isArray(t.exclude) ? t.exclude : [t.exclude];
        this.data.repeating.exclude = e.map((n, i2) => h(n, `repeating.exclude[${i2}]`));
      }
      return t.startOfWeek && (this.data.repeating.startOfWeek = d(A, t.startOfWeek)), this;
    }
    summary(t) {
      return t === void 0 ? this.data.summary : (this.data.summary = t ? String(t) : "", this);
    }
    location(t) {
      if (t === void 0) return this.data.location;
      if (typeof t == "string") return this.data.location = { title: t }, this;
      if (t && ("title" in t && !t.title || (t == null ? void 0 : t.geo) && (typeof t.geo.lat != "number" || !isFinite(t.geo.lat) || typeof t.geo.lon != "number" || !isFinite(t.geo.lon)) || !("title" in t) && !(t == null ? void 0 : t.geo))) throw new Error("`location` isn't formatted correctly. See https://sebbo2002.github.io/ical-generator/develop/reference/classes/ICalEvent.html#location");
      return this.data.location = t || null, this;
    }
    description(t) {
      return t === void 0 ? this.data.description : t === null ? (this.data.description = null, this) : (typeof t == "string" ? this.data.description = { plain: t } : this.data.description = t, this);
    }
    organizer(t) {
      return t === void 0 ? this.data.organizer : t === null ? (this.data.organizer = null, this) : (this.data.organizer = p("organizer", t), this);
    }
    createAttendee(t) {
      if (t instanceof f) return this.data.attendees.push(t), t;
      typeof t == "string" && (t = { email: t, ...p("data", t) });
      let e = new f(t, this);
      return this.data.attendees.push(e), e;
    }
    attendees(t) {
      return t ? (t.forEach((e) => this.createAttendee(e)), this) : this.data.attendees;
    }
    createAlarm(t) {
      let e = t instanceof I ? t : new I(t, this);
      return this.data.alarms.push(e), e;
    }
    alarms(t) {
      return t ? (t.forEach((e) => this.createAlarm(e)), this) : this.data.alarms;
    }
    createCategory(t) {
      let e = t instanceof c ? t : new c(t);
      return this.data.categories.push(e), e;
    }
    categories(t) {
      return t ? (t.forEach((e) => this.createCategory(e)), this) : this.data.categories;
    }
    status(t) {
      return t === void 0 ? this.data.status : t === null ? (this.data.status = null, this) : (this.data.status = d(L, t), this);
    }
    busystatus(t) {
      return t === void 0 ? this.data.busystatus : t === null ? (this.data.busystatus = null, this) : (this.data.busystatus = d(z, t), this);
    }
    priority(t) {
      if (t === void 0) return this.data.priority;
      if (t === null) return this.data.priority = null, this;
      if (t < 0 || t > 9) throw new Error("`priority` is invalid, musst be 0 ≤ priority ≤ 9.");
      return this.data.priority = Math.round(t), this;
    }
    url(t) {
      return t === void 0 ? this.data.url : (this.data.url = t ? String(t) : null, this);
    }
    createAttachment(t) {
      return this.data.attachments.push(t), this;
    }
    attachments(t) {
      return t ? (t.forEach((e) => this.createAttachment(e)), this) : this.data.attachments;
    }
    transparency(t) {
      return t === void 0 ? this.data.transparency : t ? (this.data.transparency = d(U, t), this) : (this.data.transparency = null, this);
    }
    created(t) {
      return t === void 0 ? this.data.created : t === null ? (this.data.created = null, this) : (this.data.created = h(t, "created"), this);
    }
    lastModified(t) {
      return t === void 0 ? this.data.lastModified : t === null ? (this.data.lastModified = null, this) : (this.data.lastModified = h(t, "lastModified"), this);
    }
    class(t) {
      return t === void 0 ? this.data.class : t === null ? (this.data.class = null, this) : (this.data.class = d(B, t), this);
    }
    x(t, e) {
      return t === void 0 ? l(this.data) : (typeof t == "string" && typeof e == "string" && l(this.data, t, e), typeof t == "object" && l(this.data, t), this);
    }
    toJSON() {
      var _a2;
      let t = null;
      return x(this.data.repeating) || typeof this.data.repeating == "string" ? t = this.data.repeating.toString() : this.data.repeating && (t = Object.assign({}, this.data.repeating, { until: g(this.data.repeating.until) || void 0, exclude: (_a2 = this.data.repeating.exclude) == null ? void 0 : _a2.map((e) => g(e)) })), this.swapStartAndEndIfRequired(), Object.assign({}, this.data, { start: g(this.data.start) || null, end: g(this.data.end) || null, recurrenceId: g(this.data.recurrenceId) || null, stamp: g(this.data.stamp) || null, created: g(this.data.created) || null, lastModified: g(this.data.lastModified) || null, repeating: t, x: this.x() });
    }
    toString() {
      var _a2, _b2, _c, _d;
      let t = "";
      if (t += `BEGIN:VEVENT\r
`, t += "UID:" + this.data.id + `\r
`, t += "SEQUENCE:" + this.data.sequence + `\r
`, this.swapStartAndEndIfRequired(), t += "DTSTAMP:" + o(this.calendar.timezone(), this.data.stamp) + `\r
`, this.data.allDay ? (t += "DTSTART;VALUE=DATE:" + o(this.timezone(), this.data.start, true) + `\r
`, this.data.end && (t += "DTEND;VALUE=DATE:" + o(this.timezone(), this.data.end, true) + `\r
`), t += `X-MICROSOFT-CDO-ALLDAYEVENT:TRUE\r
`, t += `X-MICROSOFT-MSNCALENDAR-ALLDAYEVENT:TRUE\r
`) : (t += E(this.timezone(), "DTSTART", this.data.start, this.data) + `\r
`, this.data.end && (t += E(this.timezone(), "DTEND", this.data.end, this.data) + `\r
`)), x(this.data.repeating) || typeof this.data.repeating == "string") {
        let e = this.data.repeating.toString().replace(/\r\n/g, `
`).split(`
`).filter((n) => n && !n.startsWith("DTSTART:")).join(`\r
`);
        !e.includes(`\r
`) && !e.startsWith("RRULE:") && (e = "RRULE:" + e), t += e.trim() + `\r
`;
      } else this.data.repeating && (t += "RRULE:FREQ=" + this.data.repeating.freq, this.data.repeating.count && (t += ";COUNT=" + this.data.repeating.count), this.data.repeating.interval && (t += ";INTERVAL=" + this.data.repeating.interval), this.data.repeating.until && (t += ";UNTIL=" + o(this.calendar.timezone(), this.data.repeating.until, false, this.floating())), this.data.repeating.byDay && (t += ";BYDAY=" + this.data.repeating.byDay.join(",")), this.data.repeating.byMonth && (t += ";BYMONTH=" + this.data.repeating.byMonth.join(",")), this.data.repeating.byMonthDay && (t += ";BYMONTHDAY=" + this.data.repeating.byMonthDay.join(",")), this.data.repeating.bySetPos && (t += ";BYSETPOS=" + this.data.repeating.bySetPos.join(",")), this.data.repeating.startOfWeek && (t += ";WKST=" + this.data.repeating.startOfWeek), t += `\r
`, this.data.repeating.exclude && (this.data.allDay ? t += "EXDATE;VALUE=DATE:" + this.data.repeating.exclude.map((e) => o(this.calendar.timezone(), e, true)).join(",") + `\r
` : (t += "EXDATE", this.timezone() ? t += ";TZID=" + this.timezone() + ":" + this.data.repeating.exclude.map((e) => o(this.timezone(), e, false, true)).join(",") + `\r
` : t += ":" + this.data.repeating.exclude.map((e) => o(this.timezone(), e, false, this.floating())).join(",") + `\r
`)));
      return this.data.recurrenceId && (t += E(this.timezone(), "RECURRENCE-ID", this.data.recurrenceId, this.data) + `\r
`), t += "SUMMARY:" + r(this.data.summary, false) + `\r
`, this.data.transparency && (t += "TRANSP:" + r(this.data.transparency, false) + `\r
`), this.data.location && "title" in this.data.location && this.data.location.title && (t += "LOCATION:" + r(this.data.location.title + (this.data.location.address ? `
` + this.data.location.address : ""), false) + `\r
`, this.data.location.radius && this.data.location.geo && (t += "X-APPLE-STRUCTURED-LOCATION;VALUE=URI;" + (this.data.location.address ? "X-ADDRESS=" + r(this.data.location.address, false) + ";" : "") + "X-APPLE-RADIUS=" + r(this.data.location.radius, false) + ";X-TITLE=" + r(this.data.location.title, false) + ":geo:" + r((_a2 = this.data.location.geo) == null ? void 0 : _a2.lat, false) + "," + r((_b2 = this.data.location.geo) == null ? void 0 : _b2.lon, false) + `\r
`)), ((_d = (_c = this.data.location) == null ? void 0 : _c.geo) == null ? void 0 : _d.lat) && this.data.location.geo.lon && (t += "GEO:" + r(this.data.location.geo.lat, false) + ";" + r(this.data.location.geo.lon, false) + `\r
`), this.data.description && (t += "DESCRIPTION:" + r(this.data.description.plain, false) + `\r
`, this.data.description.html && (t += "X-ALT-DESC;FMTTYPE=text/html:" + r(this.data.description.html, false) + `\r
`)), this.data.organizer && (t += 'ORGANIZER;CN="' + r(this.data.organizer.name, true) + '"', this.data.organizer.sentBy && (t += ';SENT-BY="mailto:' + r(this.data.organizer.sentBy, true) + '"'), this.data.organizer.email && this.data.organizer.mailto && (t += ";EMAIL=" + r(this.data.organizer.email, false)), t += ":", this.data.organizer.email && (t += "mailto:" + r(this.data.organizer.mailto || this.data.organizer.email, false)), t += `\r
`), this.data.attendees.forEach(function(e) {
        t += e.toString();
      }), this.data.alarms.forEach(function(e) {
        t += e.toString();
      }), this.data.categories.length > 0 && (t += "CATEGORIES:" + this.data.categories.map((e) => e.toString()).join() + `\r
`), this.data.url && (t += "URL;VALUE=URI:" + r(this.data.url, false) + `\r
`), this.data.attachments.length > 0 && this.data.attachments.forEach((e) => {
        t += "ATTACH:" + r(e, false) + `\r
`;
      }), this.data.status && (t += "STATUS:" + this.data.status.toUpperCase() + `\r
`), this.data.busystatus && (t += "X-MICROSOFT-CDO-BUSYSTATUS:" + this.data.busystatus.toUpperCase() + `\r
`), this.data.priority !== null && (t += "PRIORITY:" + this.data.priority + `\r
`), t += D(this.data), this.data.created && (t += "CREATED:" + o(this.calendar.timezone(), this.data.created) + `\r
`), this.data.lastModified && (t += "LAST-MODIFIED:" + o(this.calendar.timezone(), this.data.lastModified) + `\r
`), this.data.class && (t += "CLASS:" + this.data.class.toUpperCase() + `\r
`), t += `END:VEVENT\r
`, t;
    }
  };
  var P = ((m) => (m.PUBLISH = "PUBLISH", m.REQUEST = "REQUEST", m.REPLY = "REPLY", m.ADD = "ADD", m.CANCEL = "CANCEL", m.REFRESH = "REFRESH", m.COUNTER = "COUNTER", m.DECLINECOUNTER = "DECLINECOUNTER", m))(P || {}), T = class {
    constructor(t = {}) {
      __publicField(this, "data");
      this.data = { prodId: "//sebbo.net//ical-generator//EN", method: null, name: null, description: null, timezone: null, source: null, url: null, scale: null, ttl: null, events: [], x: [] }, t.prodId !== void 0 && this.prodId(t.prodId), t.method !== void 0 && this.method(t.method), t.name !== void 0 && this.name(t.name), t.description !== void 0 && this.description(t.description), t.timezone !== void 0 && this.timezone(t.timezone), t.source !== void 0 && this.source(t.source), t.url !== void 0 && this.url(t.url), t.scale !== void 0 && this.scale(t.scale), t.ttl !== void 0 && this.ttl(t.ttl), t.events !== void 0 && this.events(t.events), t.x !== void 0 && this.x(t.x);
    }
    prodId(t) {
      if (!t) return this.data.prodId;
      if (typeof t == "string") return this.data.prodId = t, this;
      if (typeof t != "object") throw new Error("`prodid` needs to be a string or an object!");
      if (!t.company) throw new Error("`prodid.company` is a mandatory item!");
      if (!t.product) throw new Error("`prodid.product` is a mandatory item!");
      let e = (t.language || "EN").toUpperCase();
      return this.data.prodId = "//" + t.company + "//" + t.product + "//" + e, this;
    }
    method(t) {
      return t === void 0 ? this.data.method : t ? (this.data.method = d(P, t), this) : (this.data.method = null, this);
    }
    name(t) {
      return t === void 0 ? this.data.name : (this.data.name = t ? String(t) : null, this);
    }
    description(t) {
      return t === void 0 ? this.data.description : (this.data.description = t ? String(t) : null, this);
    }
    timezone(t) {
      var _a2;
      return t === void 0 ? ((_a2 = this.data.timezone) == null ? void 0 : _a2.name) || null : (t === "UTC" ? this.data.timezone = null : typeof t == "string" ? this.data.timezone = { name: t } : t === null ? this.data.timezone = null : this.data.timezone = t, this);
    }
    source(t) {
      return t === void 0 ? this.data.source : (this.data.source = t || null, this);
    }
    url(t) {
      return t === void 0 ? this.data.url : (this.data.url = t || null, this);
    }
    scale(t) {
      return t === void 0 ? this.data.scale : (t === null ? this.data.scale = null : this.data.scale = t.toUpperCase(), this);
    }
    ttl(t) {
      return t === void 0 ? this.data.ttl : (J(t) ? this.data.ttl = t.asSeconds() : t && t > 0 ? this.data.ttl = t : this.data.ttl = null, this);
    }
    createEvent(t) {
      let e = t instanceof y ? t : new y(t, this);
      return this.data.events.push(e), e;
    }
    events(t) {
      return t ? (t.forEach((e) => this.createEvent(e)), this) : this.data.events;
    }
    clear() {
      return this.data.events = [], this;
    }
    x(t, e) {
      if (t === void 0) return l(this.data);
      if (typeof t == "string" && typeof e == "string") l(this.data, t, e);
      else if (typeof t == "object") l(this.data, t);
      else throw new Error("Either key or value is not a string!");
      return this;
    }
    toJSON() {
      return Object.assign({}, this.data, { timezone: this.timezone(), events: this.data.events.map((t) => t.toJSON()), x: this.x() });
    }
    length() {
      return this.data.events.length;
    }
    toString() {
      var _a2, _b2;
      let t = "";
      return t = `BEGIN:VCALENDAR\r
VERSION:2.0\r
`, t += "PRODID:-" + this.data.prodId + `\r
`, this.data.url && (t += "URL:" + this.data.url + `\r
`), this.data.source && (t += "SOURCE;VALUE=URI:" + this.data.source + `\r
`), this.data.scale && (t += "CALSCALE:" + this.data.scale + `\r
`), this.data.method && (t += "METHOD:" + this.data.method + `\r
`), this.data.name && (t += "NAME:" + this.data.name + `\r
`, t += "X-WR-CALNAME:" + this.data.name + `\r
`), this.data.description && (t += "X-WR-CALDESC:" + this.data.description + `\r
`), ((_a2 = this.data.timezone) == null ? void 0 : _a2.generator) && [.../* @__PURE__ */ new Set([this.timezone(), ...this.data.events.map((n) => n.timezone())])].filter((n) => n !== null && !n.startsWith("/")).forEach((n) => {
        var _a3;
        if (!((_a3 = this.data.timezone) == null ? void 0 : _a3.generator)) return;
        let i2 = this.data.timezone.generator(n);
        i2 && (t += i2.replace(/\r\n/g, `
`).replace(/\n/g, `\r
`).trim() + `\r
`);
      }), ((_b2 = this.data.timezone) == null ? void 0 : _b2.name) && (t += "TIMEZONE-ID:" + this.data.timezone.name + `\r
`, t += "X-WR-TIMEZONE:" + this.data.timezone.name + `\r
`), this.data.ttl && (t += "REFRESH-INTERVAL;VALUE=DURATION:" + C(this.data.ttl) + `\r
`, t += "X-PUBLISHED-TTL:" + C(this.data.ttl) + `\r
`), this.data.events.forEach((e) => t += e.toString()), t += D(this.data), t += "END:VCALENDAR", v(t);
    }
  };
  function H(a2) {
    return new T(a2);
  }
  var It = H;
  function getDayIndexOfWeek(date, dayIndex) {
    const day = date.getDay();
    const offset2 = dayIndex - day;
    const adjestedDate = new Date(date.getTime() + offset2 * (1e3 * 3600 * 24));
    return adjestedDate;
  }
  async function generateIcalStudy(scheduleItems, repeatingRange) {
    if (!repeatingRange.start || !repeatingRange.end)
      throw new Error("Invalid repeatingRange");
    function convertEvent(scheduleItem) {
      const event2 = {
        summary: `${scheduleItem.subjectName} (${scheduleItem.type})`,
        location: `${scheduleItem.building}:${scheduleItem.room}`,
        start: getDayIndexOfWeek(
          $11d87f3f76e88657$export$b21e0b124e224484(
            repeatingRange.start,
            new $35ea8db9cb2ccb90$export$680ea196effce5f(Number(scheduleItem.start.slice(0, 2)), Number(scheduleItem.start.slice(-2)))
          ).toDate($14e0f24ef4ac5c92$export$aa8b41735afcabd2()),
          scheduleItem.day
        ),
        end: getDayIndexOfWeek(
          $11d87f3f76e88657$export$b21e0b124e224484(
            repeatingRange.start,
            new $35ea8db9cb2ccb90$export$680ea196effce5f(Number(scheduleItem.start.slice(0, 2)), Number(scheduleItem.start.slice(-2)))
          ).toDate($14e0f24ef4ac5c92$export$aa8b41735afcabd2()),
          scheduleItem.day
        ),
        repeating: {
          freq: b.WEEKLY,
          until: repeatingRange.end.toDate($14e0f24ef4ac5c92$export$aa8b41735afcabd2())
        }
      };
      return event2;
    }
    const calendarName = `Study (${constants.appName}@${(/* @__PURE__ */ new Date()).toString()})`;
    const calendar = It({ name: calendarName, prodId: constants.appName });
    scheduleItems.forEach((item) => {
      const event2 = convertEvent(item);
      calendar.createEvent(event2);
    });
    const calendarBlob = new Blob([calendar.toString()], { type: "text/calendar;charset=utf-8" });
    FileSaver_minExports.saveAs(calendarBlob, `${calendarName}.ical`);
  }
  studyTable;
  studyTable;
  mark_module_start();
  Generate[FILENAME] = "src/lib/components/calendar/generate.svelte";
  var root_7$1 = add_locations(/* @__PURE__ */ template(`<!> <!>`, 1), Generate[FILENAME], []);
  var root_6$1 = add_locations(/* @__PURE__ */ template(`<!> <!>`, 1), Generate[FILENAME], []);
  var root_3 = add_locations(/* @__PURE__ */ template(`<!> <h3>Set repeating range</h3> <div class="grid gap-2"><!></div> <!>`, 1), Generate[FILENAME], [[48, 4], [49, 4]]);
  var root_1$1 = add_locations(/* @__PURE__ */ template(`<!> <!>`, 1), Generate[FILENAME], []);
  function Generate($$anchor, $$props) {
    check_target(new.target);
    push($$props, true, Generate);
    validate_prop_bindings($$props, [], [], Generate);
    const df = new $fb18d541ea1ad717$export$ad991b66133851cf("en-US", { dateStyle: "medium" });
    const today = /* @__PURE__ */ new Date();
    let value = state(proxy({
      start: new $35ea8db9cb2ccb90$export$99faa760c7908e4f(today.getFullYear(), today.getMonth() + 1, today.getDate()),
      end: new $35ea8db9cb2ccb90$export$99faa760c7908e4f(today.getFullYear(), today.getMonth() + 1, today.getDate())
    }));
    let startValue = state(void 0);
    var fragment = comment();
    var node = first_child(fragment);
    component(node, () => Root$1, ($$anchor2, $$component) => {
      $$component($$anchor2, {
        children: wrap_snippet(Generate, ($$anchor3, $$slotProps) => {
          var fragment_1 = root_1$1();
          var node_1 = first_child(fragment_1);
          var class_1 = /* @__PURE__ */ derived(() => buttonVariants({ variant: "outline" }));
          component(node_1, () => Trigger$1, ($$anchor4, $$component2) => {
            $$component2($$anchor4, {
              get class() {
                return get$2(class_1);
              },
              children: wrap_snippet(Generate, ($$anchor5, $$slotProps2) => {
                next();
                var text$1 = text("Generate Calendar");
                append($$anchor5, text$1);
              }),
              $$slots: { default: true }
            });
          });
          var node_2 = sibling(node_1, 2);
          component(node_2, () => Dialog_content, ($$anchor4, $$component2) => {
            $$component2($$anchor4, {
              class: "sm:max-w-[425px]",
              children: wrap_snippet(Generate, ($$anchor5, $$slotProps2) => {
                var fragment_2 = root_3();
                var node_3 = first_child(fragment_2);
                component(node_3, () => Dialog_header, ($$anchor6, $$component3) => {
                  $$component3($$anchor6, {
                    children: wrap_snippet(Generate, ($$anchor7, $$slotProps3) => {
                      var fragment_3 = comment();
                      var node_4 = first_child(fragment_3);
                      component(node_4, () => Dialog_title, ($$anchor8, $$component4) => {
                        $$component4($$anchor8, {
                          children: wrap_snippet(Generate, ($$anchor9, $$slotProps4) => {
                            next();
                            var text_1 = text("Generate Calendar");
                            append($$anchor9, text_1);
                          }),
                          $$slots: { default: true }
                        });
                      });
                      append($$anchor7, fragment_3);
                    }),
                    $$slots: { default: true }
                  });
                });
                var div = sibling(node_3, 4);
                var node_5 = child(div);
                component(node_5, () => Root, ($$anchor6, $$component3) => {
                  $$component3($$anchor6, {
                    children: wrap_snippet(Generate, ($$anchor7, $$slotProps3) => {
                      var fragment_4 = root_6$1();
                      var node_6 = first_child(fragment_4);
                      var class_2 = /* @__PURE__ */ derived(() => cn(buttonVariants({ variant: "outline" }), !get$2(value) && "text-muted-foreground"));
                      component(node_6, () => Trigger, ($$anchor8, $$component4) => {
                        $$component4($$anchor8, {
                          get class() {
                            return get$2(class_2);
                          },
                          children: wrap_snippet(Generate, ($$anchor9, $$slotProps4) => {
                            var fragment_5 = root_7$1();
                            var node_7 = first_child(fragment_5);
                            Calendar(node_7, { class: "mr-2 size-4" });
                            var node_8 = sibling(node_7, 2);
                            {
                              var consequent_1 = ($$anchor10) => {
                                var fragment_6 = comment();
                                var node_9 = first_child(fragment_6);
                                {
                                  var consequent = ($$anchor11) => {
                                    var text_2 = text();
                                    const stringified_text = /* @__PURE__ */ derived(() => df.format(get$2(value).start.toDate($14e0f24ef4ac5c92$export$aa8b41735afcabd2())) ?? "");
                                    const stringified_text_1 = /* @__PURE__ */ derived(() => df.format(get$2(value).end.toDate($14e0f24ef4ac5c92$export$aa8b41735afcabd2())) ?? "");
                                    template_effect(() => set_text(text_2, `${get$2(stringified_text)} - ${get$2(stringified_text_1)}`));
                                    append($$anchor11, text_2);
                                  };
                                  var alternate = ($$anchor11) => {
                                    var text_3 = text();
                                    template_effect(() => set_text(text_3, df.format(get$2(value).start.toDate($14e0f24ef4ac5c92$export$aa8b41735afcabd2()))));
                                    append($$anchor11, text_3);
                                  };
                                  if_block(node_9, ($$render) => {
                                    if (get$2(value).end) $$render(consequent);
                                    else $$render(alternate, false);
                                  });
                                }
                                append($$anchor10, fragment_6);
                              };
                              var alternate_2 = ($$anchor10) => {
                                var fragment_9 = comment();
                                var node_10 = first_child(fragment_9);
                                {
                                  var consequent_2 = ($$anchor11) => {
                                    var text_4 = text();
                                    template_effect(() => set_text(text_4, df.format(get$2(startValue).toDate($14e0f24ef4ac5c92$export$aa8b41735afcabd2()))));
                                    append($$anchor11, text_4);
                                  };
                                  var alternate_1 = ($$anchor11) => {
                                    var text_5 = text("Pick a date");
                                    append($$anchor11, text_5);
                                  };
                                  if_block(
                                    node_10,
                                    ($$render) => {
                                      if (get$2(startValue)) $$render(consequent_2);
                                      else $$render(alternate_1, false);
                                    },
                                    true
                                  );
                                }
                                append($$anchor10, fragment_9);
                              };
                              if_block(node_8, ($$render) => {
                                if (get$2(value) && get$2(value).start) $$render(consequent_1);
                                else $$render(alternate_2, false);
                              });
                            }
                            append($$anchor9, fragment_5);
                          }),
                          $$slots: { default: true }
                        });
                      });
                      var node_11 = sibling(node_6, 2);
                      component(node_11, () => Popover_content, ($$anchor8, $$component4) => {
                        $$component4($$anchor8, {
                          class: "w-auto p-0",
                          align: "start",
                          children: wrap_snippet(Generate, ($$anchor9, $$slotProps4) => {
                            {
                              add_owner_effect(() => get$2(value), Range_calendar);
                              Range_calendar($$anchor9, {
                                onStartValueChange: (v2) => {
                                  set(startValue, proxy(v2, null, startValue));
                                },
                                numberOfMonths: 2,
                                get value() {
                                  return get$2(value);
                                },
                                set value($$value) {
                                  set(value, proxy($$value, null, value));
                                }
                              });
                            }
                          }),
                          $$slots: { default: true }
                        });
                      });
                      append($$anchor7, fragment_4);
                    }),
                    $$slots: { default: true }
                  });
                });
                reset(div);
                var node_12 = sibling(div, 2);
                component(node_12, () => Dialog_footer, ($$anchor6, $$component3) => {
                  $$component3($$anchor6, {
                    children: wrap_snippet(Generate, ($$anchor7, $$slotProps3) => {
                      Button($$anchor7, {
                        onclick: () => generateIcalStudy($$props.schedule, get$2(value)),
                        children: wrap_snippet(Generate, ($$anchor8, $$slotProps4) => {
                          next();
                          var text_6 = text("Generate");
                          append($$anchor8, text_6);
                        }),
                        $$slots: { default: true }
                      });
                    }),
                    $$slots: { default: true }
                  });
                });
                append($$anchor5, fragment_2);
              }),
              $$slots: { default: true }
            });
          });
          append($$anchor3, fragment_1);
        }),
        $$slots: { default: true }
      });
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Generate);
  function resolveUrl(url, baseUrl) {
    if (url.match(/^[a-z]+:\/\//i)) {
      return url;
    }
    if (url.match(/^\/\//)) {
      return window.location.protocol + url;
    }
    if (url.match(/^[a-z]+:/i)) {
      return url;
    }
    const doc = document.implementation.createHTMLDocument();
    const base = doc.createElement("base");
    const a2 = doc.createElement("a");
    doc.head.appendChild(base);
    doc.body.appendChild(a2);
    if (baseUrl) {
      base.href = baseUrl;
    }
    a2.href = url;
    return a2.href;
  }
  const uuid = /* @__PURE__ */ (() => {
    let counter = 0;
    const random = () => (
      // eslint-disable-next-line no-bitwise
      `0000${(Math.random() * 36 ** 4 << 0).toString(36)}`.slice(-4)
    );
    return () => {
      counter += 1;
      return `u${random()}${counter}`;
    };
  })();
  function toArray(arrayLike) {
    const arr = [];
    for (let i2 = 0, l2 = arrayLike.length; i2 < l2; i2++) {
      arr.push(arrayLike[i2]);
    }
    return arr;
  }
  function px(node, styleProperty) {
    const win = node.ownerDocument.defaultView || window;
    const val = win.getComputedStyle(node).getPropertyValue(styleProperty);
    return val ? parseFloat(val.replace("px", "")) : 0;
  }
  function getNodeWidth(node) {
    const leftBorder = px(node, "border-left-width");
    const rightBorder = px(node, "border-right-width");
    return node.clientWidth + leftBorder + rightBorder;
  }
  function getNodeHeight(node) {
    const topBorder = px(node, "border-top-width");
    const bottomBorder = px(node, "border-bottom-width");
    return node.clientHeight + topBorder + bottomBorder;
  }
  function getImageSize(targetNode, options = {}) {
    const width = options.width || getNodeWidth(targetNode);
    const height = options.height || getNodeHeight(targetNode);
    return { width, height };
  }
  function getPixelRatio() {
    let ratio;
    let FINAL_PROCESS;
    try {
      FINAL_PROCESS = process;
    } catch (e) {
    }
    const val = FINAL_PROCESS && FINAL_PROCESS.env ? FINAL_PROCESS.env.devicePixelRatio : null;
    if (val) {
      ratio = parseInt(val, 10);
      if (Number.isNaN(ratio)) {
        ratio = 1;
      }
    }
    return ratio || window.devicePixelRatio || 1;
  }
  const canvasDimensionLimit = 16384;
  function checkCanvasDimensions(canvas) {
    if (canvas.width > canvasDimensionLimit || canvas.height > canvasDimensionLimit) {
      if (canvas.width > canvasDimensionLimit && canvas.height > canvasDimensionLimit) {
        if (canvas.width > canvas.height) {
          canvas.height *= canvasDimensionLimit / canvas.width;
          canvas.width = canvasDimensionLimit;
        } else {
          canvas.width *= canvasDimensionLimit / canvas.height;
          canvas.height = canvasDimensionLimit;
        }
      } else if (canvas.width > canvasDimensionLimit) {
        canvas.height *= canvasDimensionLimit / canvas.width;
        canvas.width = canvasDimensionLimit;
      } else {
        canvas.width *= canvasDimensionLimit / canvas.height;
        canvas.height = canvasDimensionLimit;
      }
    }
  }
  function createImage(url) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.decode = () => resolve(img);
      img.onload = () => resolve(img);
      img.onerror = reject;
      img.crossOrigin = "anonymous";
      img.decoding = "async";
      img.src = url;
    });
  }
  async function svgToDataURL(svg) {
    return Promise.resolve().then(() => new XMLSerializer().serializeToString(svg)).then(encodeURIComponent).then((html) => `data:image/svg+xml;charset=utf-8,${html}`);
  }
  async function nodeToDataURL(node, width, height) {
    const xmlns = "http://www.w3.org/2000/svg";
    const svg = document.createElementNS(xmlns, "svg");
    const foreignObject = document.createElementNS(xmlns, "foreignObject");
    svg.setAttribute("width", `${width}`);
    svg.setAttribute("height", `${height}`);
    svg.setAttribute("viewBox", `0 0 ${width} ${height}`);
    foreignObject.setAttribute("width", "100%");
    foreignObject.setAttribute("height", "100%");
    foreignObject.setAttribute("x", "0");
    foreignObject.setAttribute("y", "0");
    foreignObject.setAttribute("externalResourcesRequired", "true");
    svg.appendChild(foreignObject);
    foreignObject.appendChild(node);
    return svgToDataURL(svg);
  }
  const isInstanceOfElement = (node, instance) => {
    if (node instanceof instance)
      return true;
    const nodePrototype = Object.getPrototypeOf(node);
    if (nodePrototype === null)
      return false;
    return nodePrototype.constructor.name === instance.name || isInstanceOfElement(nodePrototype, instance);
  };
  function formatCSSText(style) {
    const content = style.getPropertyValue("content");
    return `${style.cssText} content: '${content.replace(/'|"/g, "")}';`;
  }
  function formatCSSProperties(style) {
    return toArray(style).map((name) => {
      const value = style.getPropertyValue(name);
      const priority = style.getPropertyPriority(name);
      return `${name}: ${value}${priority ? " !important" : ""};`;
    }).join(" ");
  }
  function getPseudoElementStyle(className, pseudo, style) {
    const selector = `.${className}:${pseudo}`;
    const cssText = style.cssText ? formatCSSText(style) : formatCSSProperties(style);
    return document.createTextNode(`${selector}{${cssText}}`);
  }
  function clonePseudoElement(nativeNode, clonedNode, pseudo) {
    const style = window.getComputedStyle(nativeNode, pseudo);
    const content = style.getPropertyValue("content");
    if (content === "" || content === "none") {
      return;
    }
    const className = uuid();
    try {
      clonedNode.className = `${clonedNode.className} ${className}`;
    } catch (err) {
      return;
    }
    const styleElement = document.createElement("style");
    styleElement.appendChild(getPseudoElementStyle(className, pseudo, style));
    clonedNode.appendChild(styleElement);
  }
  function clonePseudoElements(nativeNode, clonedNode) {
    clonePseudoElement(nativeNode, clonedNode, ":before");
    clonePseudoElement(nativeNode, clonedNode, ":after");
  }
  const WOFF = "application/font-woff";
  const JPEG = "image/jpeg";
  const mimes = {
    woff: WOFF,
    woff2: WOFF,
    ttf: "application/font-truetype",
    eot: "application/vnd.ms-fontobject",
    png: "image/png",
    jpg: JPEG,
    jpeg: JPEG,
    gif: "image/gif",
    tiff: "image/tiff",
    svg: "image/svg+xml",
    webp: "image/webp"
  };
  function getExtension(url) {
    const match = /\.([^./]*?)$/g.exec(url);
    return match ? match[1] : "";
  }
  function getMimeType(url) {
    const extension = getExtension(url).toLowerCase();
    return mimes[extension] || "";
  }
  function getContentFromDataUrl(dataURL) {
    return dataURL.split(/,/)[1];
  }
  function isDataUrl(url) {
    return url.search(/^(data:)/) !== -1;
  }
  function makeDataUrl(content, mimeType) {
    return `data:${mimeType};base64,${content}`;
  }
  async function fetchAsDataURL(url, init2, process2) {
    const res = await fetch(url, init2);
    if (res.status === 404) {
      throw new Error(`Resource "${res.url}" not found`);
    }
    const blob = await res.blob();
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onerror = reject;
      reader.onloadend = () => {
        try {
          resolve(process2({ res, result: reader.result }));
        } catch (error) {
          reject(error);
        }
      };
      reader.readAsDataURL(blob);
    });
  }
  const cache = {};
  function getCacheKey(url, contentType, includeQueryParams) {
    let key = url.replace(/\?.*/, "");
    if (includeQueryParams) {
      key = url;
    }
    if (/ttf|otf|eot|woff2?/i.test(key)) {
      key = key.replace(/.*\//, "");
    }
    return contentType ? `[${contentType}]${key}` : key;
  }
  async function resourceToDataURL(resourceUrl, contentType, options) {
    const cacheKey = getCacheKey(resourceUrl, contentType, options.includeQueryParams);
    if (cache[cacheKey] != null) {
      return cache[cacheKey];
    }
    if (options.cacheBust) {
      resourceUrl += (/\?/.test(resourceUrl) ? "&" : "?") + (/* @__PURE__ */ new Date()).getTime();
    }
    let dataURL;
    try {
      const content = await fetchAsDataURL(resourceUrl, options.fetchRequestInit, ({ res, result: result2 }) => {
        if (!contentType) {
          contentType = res.headers.get("Content-Type") || "";
        }
        return getContentFromDataUrl(result2);
      });
      dataURL = makeDataUrl(content, contentType);
    } catch (error) {
      dataURL = options.imagePlaceholder || "";
      let msg = `Failed to fetch resource: ${resourceUrl}`;
      if (error) {
        msg = typeof error === "string" ? error : error.message;
      }
      if (msg) {
        console.warn(msg);
      }
    }
    cache[cacheKey] = dataURL;
    return dataURL;
  }
  async function cloneCanvasElement(canvas) {
    const dataURL = canvas.toDataURL();
    if (dataURL === "data:,") {
      return canvas.cloneNode(false);
    }
    return createImage(dataURL);
  }
  async function cloneVideoElement(video, options) {
    if (video.currentSrc) {
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      canvas.width = video.clientWidth;
      canvas.height = video.clientHeight;
      ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
      const dataURL2 = canvas.toDataURL();
      return createImage(dataURL2);
    }
    const poster = video.poster;
    const contentType = getMimeType(poster);
    const dataURL = await resourceToDataURL(poster, contentType, options);
    return createImage(dataURL);
  }
  async function cloneIFrameElement(iframe) {
    var _a2;
    try {
      if ((_a2 = iframe === null || iframe === void 0 ? void 0 : iframe.contentDocument) === null || _a2 === void 0 ? void 0 : _a2.body) {
        return await cloneNode(iframe.contentDocument.body, {}, true);
      }
    } catch (_b2) {
    }
    return iframe.cloneNode(false);
  }
  async function cloneSingleNode(node, options) {
    if (isInstanceOfElement(node, HTMLCanvasElement)) {
      return cloneCanvasElement(node);
    }
    if (isInstanceOfElement(node, HTMLVideoElement)) {
      return cloneVideoElement(node, options);
    }
    if (isInstanceOfElement(node, HTMLIFrameElement)) {
      return cloneIFrameElement(node);
    }
    return node.cloneNode(false);
  }
  const isSlotElement = (node) => node.tagName != null && node.tagName.toUpperCase() === "SLOT";
  async function cloneChildren(nativeNode, clonedNode, options) {
    var _a2, _b2;
    let children = [];
    if (isSlotElement(nativeNode) && nativeNode.assignedNodes) {
      children = toArray(nativeNode.assignedNodes());
    } else if (isInstanceOfElement(nativeNode, HTMLIFrameElement) && ((_a2 = nativeNode.contentDocument) === null || _a2 === void 0 ? void 0 : _a2.body)) {
      children = toArray(nativeNode.contentDocument.body.childNodes);
    } else {
      children = toArray(((_b2 = nativeNode.shadowRoot) !== null && _b2 !== void 0 ? _b2 : nativeNode).childNodes);
    }
    if (children.length === 0 || isInstanceOfElement(nativeNode, HTMLVideoElement)) {
      return clonedNode;
    }
    await children.reduce((deferred, child2) => deferred.then(() => cloneNode(child2, options)).then((clonedChild) => {
      if (clonedChild) {
        clonedNode.appendChild(clonedChild);
      }
    }), Promise.resolve());
    return clonedNode;
  }
  function cloneCSSStyle(nativeNode, clonedNode) {
    const targetStyle = clonedNode.style;
    if (!targetStyle) {
      return;
    }
    const sourceStyle = window.getComputedStyle(nativeNode);
    if (sourceStyle.cssText) {
      targetStyle.cssText = sourceStyle.cssText;
      targetStyle.transformOrigin = sourceStyle.transformOrigin;
    } else {
      toArray(sourceStyle).forEach((name) => {
        let value = sourceStyle.getPropertyValue(name);
        if (name === "font-size" && value.endsWith("px")) {
          const reducedFont = Math.floor(parseFloat(value.substring(0, value.length - 2))) - 0.1;
          value = `${reducedFont}px`;
        }
        if (isInstanceOfElement(nativeNode, HTMLIFrameElement) && name === "display" && value === "inline") {
          value = "block";
        }
        if (name === "d" && clonedNode.getAttribute("d")) {
          value = `path(${clonedNode.getAttribute("d")})`;
        }
        targetStyle.setProperty(name, value, sourceStyle.getPropertyPriority(name));
      });
    }
  }
  function cloneInputValue(nativeNode, clonedNode) {
    if (isInstanceOfElement(nativeNode, HTMLTextAreaElement)) {
      clonedNode.innerHTML = nativeNode.value;
    }
    if (isInstanceOfElement(nativeNode, HTMLInputElement)) {
      clonedNode.setAttribute("value", nativeNode.value);
    }
  }
  function cloneSelectValue(nativeNode, clonedNode) {
    if (isInstanceOfElement(nativeNode, HTMLSelectElement)) {
      const clonedSelect = clonedNode;
      const selectedOption = Array.from(clonedSelect.children).find((child2) => nativeNode.value === child2.getAttribute("value"));
      if (selectedOption) {
        selectedOption.setAttribute("selected", "");
      }
    }
  }
  function decorate(nativeNode, clonedNode) {
    if (isInstanceOfElement(clonedNode, Element)) {
      cloneCSSStyle(nativeNode, clonedNode);
      clonePseudoElements(nativeNode, clonedNode);
      cloneInputValue(nativeNode, clonedNode);
      cloneSelectValue(nativeNode, clonedNode);
    }
    return clonedNode;
  }
  async function ensureSVGSymbols(clone, options) {
    const uses = clone.querySelectorAll ? clone.querySelectorAll("use") : [];
    if (uses.length === 0) {
      return clone;
    }
    const processedDefs = {};
    for (let i2 = 0; i2 < uses.length; i2++) {
      const use = uses[i2];
      const id = use.getAttribute("xlink:href");
      if (id) {
        const exist = clone.querySelector(id);
        const definition2 = document.querySelector(id);
        if (!exist && definition2 && !processedDefs[id]) {
          processedDefs[id] = await cloneNode(definition2, options, true);
        }
      }
    }
    const nodes = Object.values(processedDefs);
    if (nodes.length) {
      const ns = "http://www.w3.org/1999/xhtml";
      const svg = document.createElementNS(ns, "svg");
      svg.setAttribute("xmlns", ns);
      svg.style.position = "absolute";
      svg.style.width = "0";
      svg.style.height = "0";
      svg.style.overflow = "hidden";
      svg.style.display = "none";
      const defs = document.createElementNS(ns, "defs");
      svg.appendChild(defs);
      for (let i2 = 0; i2 < nodes.length; i2++) {
        defs.appendChild(nodes[i2]);
      }
      clone.appendChild(svg);
    }
    return clone;
  }
  async function cloneNode(node, options, isRoot) {
    if (!isRoot && options.filter && !options.filter(node)) {
      return null;
    }
    return Promise.resolve(node).then((clonedNode) => cloneSingleNode(clonedNode, options)).then((clonedNode) => cloneChildren(node, clonedNode, options)).then((clonedNode) => decorate(node, clonedNode)).then((clonedNode) => ensureSVGSymbols(clonedNode, options));
  }
  const URL_REGEX = /url\((['"]?)([^'"]+?)\1\)/g;
  const URL_WITH_FORMAT_REGEX = /url\([^)]+\)\s*format\((["']?)([^"']+)\1\)/g;
  const FONT_SRC_REGEX = /src:\s*(?:url\([^)]+\)\s*format\([^)]+\)[,;]\s*)+/g;
  function toRegex(url) {
    const escaped = url.replace(/([.*+?^${}()|\[\]\/\\])/g, "\\$1");
    return new RegExp(`(url\\(['"]?)(${escaped})(['"]?\\))`, "g");
  }
  function parseURLs(cssText) {
    const urls = [];
    cssText.replace(URL_REGEX, (raw, quotation, url) => {
      urls.push(url);
      return raw;
    });
    return urls.filter((url) => !isDataUrl(url));
  }
  async function embed(cssText, resourceURL, baseURL, options, getContentFromUrl) {
    try {
      const resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL;
      const contentType = getMimeType(resourceURL);
      let dataURL;
      if (getContentFromUrl) ;
      else {
        dataURL = await resourceToDataURL(resolvedURL, contentType, options);
      }
      return cssText.replace(toRegex(resourceURL), `$1${dataURL}$3`);
    } catch (error) {
    }
    return cssText;
  }
  function filterPreferredFontFormat(str, { preferredFontFormat }) {
    return !preferredFontFormat ? str : str.replace(FONT_SRC_REGEX, (match) => {
      while (true) {
        const [src, , format] = URL_WITH_FORMAT_REGEX.exec(match) || [];
        if (!format) {
          return "";
        }
        if (format === preferredFontFormat) {
          return `src: ${src};`;
        }
      }
    });
  }
  function shouldEmbed(url) {
    return url.search(URL_REGEX) !== -1;
  }
  async function embedResources(cssText, baseUrl, options) {
    if (!shouldEmbed(cssText)) {
      return cssText;
    }
    const filteredCSSText = filterPreferredFontFormat(cssText, options);
    const urls = parseURLs(filteredCSSText);
    return urls.reduce((deferred, url) => deferred.then((css) => embed(css, url, baseUrl, options)), Promise.resolve(filteredCSSText));
  }
  async function embedProp(propName, node, options) {
    var _a2;
    const propValue = (_a2 = node.style) === null || _a2 === void 0 ? void 0 : _a2.getPropertyValue(propName);
    if (propValue) {
      const cssString = await embedResources(propValue, null, options);
      node.style.setProperty(propName, cssString, node.style.getPropertyPriority(propName));
      return true;
    }
    return false;
  }
  async function embedBackground(clonedNode, options) {
    if (!await embedProp("background", clonedNode, options)) {
      await embedProp("background-image", clonedNode, options);
    }
    if (!await embedProp("mask", clonedNode, options)) {
      await embedProp("mask-image", clonedNode, options);
    }
  }
  async function embedImageNode(clonedNode, options) {
    const isImageElement = isInstanceOfElement(clonedNode, HTMLImageElement);
    if (!(isImageElement && !isDataUrl(clonedNode.src)) && !(isInstanceOfElement(clonedNode, SVGImageElement) && !isDataUrl(clonedNode.href.baseVal))) {
      return;
    }
    const url = isImageElement ? clonedNode.src : clonedNode.href.baseVal;
    const dataURL = await resourceToDataURL(url, getMimeType(url), options);
    await new Promise((resolve, reject) => {
      clonedNode.onload = resolve;
      clonedNode.onerror = reject;
      const image = clonedNode;
      if (image.decode) {
        image.decode = resolve;
      }
      if (image.loading === "lazy") {
        image.loading = "eager";
      }
      if (isImageElement) {
        clonedNode.srcset = "";
        clonedNode.src = dataURL;
      } else {
        clonedNode.href.baseVal = dataURL;
      }
    });
  }
  async function embedChildren(clonedNode, options) {
    const children = toArray(clonedNode.childNodes);
    const deferreds = children.map((child2) => embedImages(child2, options));
    await Promise.all(deferreds).then(() => clonedNode);
  }
  async function embedImages(clonedNode, options) {
    if (isInstanceOfElement(clonedNode, Element)) {
      await embedBackground(clonedNode, options);
      await embedImageNode(clonedNode, options);
      await embedChildren(clonedNode, options);
    }
  }
  function applyStyle(node, options) {
    const { style } = node;
    if (options.backgroundColor) {
      style.backgroundColor = options.backgroundColor;
    }
    if (options.width) {
      style.width = `${options.width}px`;
    }
    if (options.height) {
      style.height = `${options.height}px`;
    }
    const manual = options.style;
    if (manual != null) {
      Object.keys(manual).forEach((key) => {
        style[key] = manual[key];
      });
    }
    return node;
  }
  const cssFetchCache = {};
  async function fetchCSS(url) {
    let cache2 = cssFetchCache[url];
    if (cache2 != null) {
      return cache2;
    }
    const res = await fetch(url);
    const cssText = await res.text();
    cache2 = { url, cssText };
    cssFetchCache[url] = cache2;
    return cache2;
  }
  async function embedFonts(data, options) {
    let cssText = data.cssText;
    const regexUrl = /url\(["']?([^"')]+)["']?\)/g;
    const fontLocs = cssText.match(/url\([^)]+\)/g) || [];
    const loadFonts = fontLocs.map(async (loc) => {
      let url = loc.replace(regexUrl, "$1");
      if (!url.startsWith("https://")) {
        url = new URL(url, data.url).href;
      }
      return fetchAsDataURL(url, options.fetchRequestInit, ({ result: result2 }) => {
        cssText = cssText.replace(loc, `url(${result2})`);
        return [loc, result2];
      });
    });
    return Promise.all(loadFonts).then(() => cssText);
  }
  function parseCSS(source2) {
    if (source2 == null) {
      return [];
    }
    const result2 = [];
    const commentsRegex = /(\/\*[\s\S]*?\*\/)/gi;
    let cssText = source2.replace(commentsRegex, "");
    const keyframesRegex = new RegExp("((@.*?keyframes [\\s\\S]*?){([\\s\\S]*?}\\s*?)})", "gi");
    while (true) {
      const matches = keyframesRegex.exec(cssText);
      if (matches === null) {
        break;
      }
      result2.push(matches[0]);
    }
    cssText = cssText.replace(keyframesRegex, "");
    const importRegex = /@import[\s\S]*?url\([^)]*\)[\s\S]*?;/gi;
    const combinedCSSRegex = "((\\s*?(?:\\/\\*[\\s\\S]*?\\*\\/)?\\s*?@media[\\s\\S]*?){([\\s\\S]*?)}\\s*?})|(([\\s\\S]*?){([\\s\\S]*?)})";
    const unifiedRegex = new RegExp(combinedCSSRegex, "gi");
    while (true) {
      let matches = importRegex.exec(cssText);
      if (matches === null) {
        matches = unifiedRegex.exec(cssText);
        if (matches === null) {
          break;
        } else {
          importRegex.lastIndex = unifiedRegex.lastIndex;
        }
      } else {
        unifiedRegex.lastIndex = importRegex.lastIndex;
      }
      result2.push(matches[0]);
    }
    return result2;
  }
  async function getCSSRules(styleSheets, options) {
    const ret = [];
    const deferreds = [];
    styleSheets.forEach((sheet) => {
      if ("cssRules" in sheet) {
        try {
          toArray(sheet.cssRules || []).forEach((item, index2) => {
            if (item.type === CSSRule.IMPORT_RULE) {
              let importIndex = index2 + 1;
              const url = item.href;
              const deferred = fetchCSS(url).then((metadata) => embedFonts(metadata, options)).then((cssText) => parseCSS(cssText).forEach((rule) => {
                try {
                  sheet.insertRule(rule, rule.startsWith("@import") ? importIndex += 1 : sheet.cssRules.length);
                } catch (error) {
                  console.error("Error inserting rule from remote css", {
                    rule,
                    error
                  });
                }
              })).catch((e) => {
                console.error("Error loading remote css", e.toString());
              });
              deferreds.push(deferred);
            }
          });
        } catch (e) {
          const inline = styleSheets.find((a2) => a2.href == null) || document.styleSheets[0];
          if (sheet.href != null) {
            deferreds.push(fetchCSS(sheet.href).then((metadata) => embedFonts(metadata, options)).then((cssText) => parseCSS(cssText).forEach((rule) => {
              inline.insertRule(rule, sheet.cssRules.length);
            })).catch((err) => {
              console.error("Error loading remote stylesheet", err);
            }));
          }
          console.error("Error inlining remote css file", e);
        }
      }
    });
    return Promise.all(deferreds).then(() => {
      styleSheets.forEach((sheet) => {
        if ("cssRules" in sheet) {
          try {
            toArray(sheet.cssRules || []).forEach((item) => {
              ret.push(item);
            });
          } catch (e) {
            console.error(`Error while reading CSS rules from ${sheet.href}`, e);
          }
        }
      });
      return ret;
    });
  }
  function getWebFontRules(cssRules) {
    return cssRules.filter((rule) => rule.type === CSSRule.FONT_FACE_RULE).filter((rule) => shouldEmbed(rule.style.getPropertyValue("src")));
  }
  async function parseWebFontRules(node, options) {
    if (node.ownerDocument == null) {
      throw new Error("Provided element is not within a Document");
    }
    const styleSheets = toArray(node.ownerDocument.styleSheets);
    const cssRules = await getCSSRules(styleSheets, options);
    return getWebFontRules(cssRules);
  }
  async function getWebFontCSS(node, options) {
    const rules = await parseWebFontRules(node, options);
    const cssTexts = await Promise.all(rules.map((rule) => {
      const baseUrl = rule.parentStyleSheet ? rule.parentStyleSheet.href : null;
      return embedResources(rule.cssText, baseUrl, options);
    }));
    return cssTexts.join("\n");
  }
  async function embedWebFonts(clonedNode, options) {
    const cssText = options.fontEmbedCSS != null ? options.fontEmbedCSS : options.skipFonts ? null : await getWebFontCSS(clonedNode, options);
    if (cssText) {
      const styleNode = document.createElement("style");
      const sytleContent = document.createTextNode(cssText);
      styleNode.appendChild(sytleContent);
      if (clonedNode.firstChild) {
        clonedNode.insertBefore(styleNode, clonedNode.firstChild);
      } else {
        clonedNode.appendChild(styleNode);
      }
    }
  }
  async function toSvg(node, options = {}) {
    const { width, height } = getImageSize(node, options);
    const clonedNode = await cloneNode(node, options, true);
    await embedWebFonts(clonedNode, options);
    await embedImages(clonedNode, options);
    applyStyle(clonedNode, options);
    const datauri = await nodeToDataURL(clonedNode, width, height);
    return datauri;
  }
  async function toCanvas(node, options = {}) {
    const { width, height } = getImageSize(node, options);
    const svg = await toSvg(node, options);
    const img = await createImage(svg);
    const canvas = document.createElement("canvas");
    const context = canvas.getContext("2d");
    const ratio = options.pixelRatio || getPixelRatio();
    const canvasWidth = options.canvasWidth || width;
    const canvasHeight = options.canvasHeight || height;
    canvas.width = canvasWidth * ratio;
    canvas.height = canvasHeight * ratio;
    if (!options.skipAutoScale) {
      checkCanvasDimensions(canvas);
    }
    canvas.style.width = `${canvasWidth}`;
    canvas.style.height = `${canvasHeight}`;
    if (options.backgroundColor) {
      context.fillStyle = options.backgroundColor;
      context.fillRect(0, 0, canvas.width, canvas.height);
    }
    context.drawImage(img, 0, 0, canvas.width, canvas.height);
    return canvas;
  }
  async function toPng(node, options = {}) {
    const canvas = await toCanvas(node, options);
    return canvas.toDataURL();
  }
  mark_module_start();
  Study_table[FILENAME] = "src/lib/components/study-table.svelte";
  var root_4 = add_locations(/* @__PURE__ */ template(`<td class="w-[2.08333%] py-1"></td>`), Study_table[FILENAME], [[168, 8]]);
  var root_5 = add_locations(/* @__PURE__ */ template(`<td><div><p class="absolute top-1 text-xs"> </p> <p class="flex h-full items-center justify-center px-1"> </p> <p class="absolute bottom-1 text-xs"> </p> <p class="absolute bottom-1 right-1 text-xs"> </p></div></td>`), Study_table[FILENAME], [
    [
      170,
      8,
      [
        [
          171,
          9,
          [
            [177, 10],
            [181, 10],
            [184, 10],
            [187, 10]
          ]
        ]
      ]
    ]
  ]);
  var root_2 = add_locations(/* @__PURE__ */ template(`<tr class="h-[14.28571%] hover:bg-slate-100"><td class="p-1"> </td><!></tr>`), Study_table[FILENAME], [[164, 5, [[165, 6]]]]);
  var root_1 = add_locations(/* @__PURE__ */ template(`<div class="flex w-full flex-col justify-center p-5 shadow"><div class="w-full rounded-t-lg p-4 text-white"><p class="text-center"> </p> <p class="text-center"> </p> <p class="text-center"> </p> <p class="text-center"> </p></div> <table class="h-screen w-full rounded-b-lg bg-white shadow"><thead><tr><th class="p-1 font-light"></th><th class="p-1 font-light" colspan="4">08:00 - 09:00</th><th class="p-1 font-light" colspan="4">09:00 - 10:00</th><th class="p-1 font-light" colspan="4">10:00 - 11:00</th><th class="p-1 font-light" colspan="4">11:00 - 12:00</th><th class="p-1 font-light" colspan="4">12:00 - 13:00</th><th class="p-1 font-light" colspan="4">13:00 - 14:00</th><th class="p-1 font-light" colspan="4">14:00 - 15:00</th><th class="p-1 font-light" colspan="4">15:00 - 16:00</th><th class="p-1 font-light" colspan="4">16:00 - 17:00</th><th class="p-1 font-light" colspan="4">17:00 - 18:00</th><th class="p-1 font-light" colspan="4">18:00 - 19:00</th><th class="p-1 font-light" colspan="4">19:00 - 20:00</th></tr></thead><tbody></tbody></table></div>`), Study_table[FILENAME], [
    [
      137,
      1,
      [
        [
          138,
          2,
          [
            [139, 3],
            [140, 3],
            [141, 3],
            [142, 3]
          ]
        ],
        [
          144,
          2,
          [
            [
              145,
              3,
              [
                [
                  146,
                  4,
                  [
                    [147, 5],
                    [148, 5],
                    [149, 5],
                    [150, 5],
                    [151, 5],
                    [152, 5],
                    [153, 5],
                    [154, 5],
                    [155, 5],
                    [156, 5],
                    [157, 5],
                    [158, 5],
                    [159, 5]
                  ]
                ]
              ]
            ],
            [162, 3]
          ]
        ]
      ]
    ]
  ]);
  var root_6 = add_locations(/* @__PURE__ */ template(`<div></div>`), Study_table[FILENAME], [[200, 1]]);
  var root_9 = add_locations(/* @__PURE__ */ template(`<div class="flex items-center gap-2"><div class="relative flex flex-col gap-2"><p class="text-sm"> </p> <div class="flex gap-2"><div><input type="color" class="absolute h-5 w-5 opacity-0"> <div></div></div> <p class="text-sm">Background Color</p></div></div></div>`), Study_table[FILENAME], [
    [
      232,
      7,
      [
        [
          233,
          8,
          [
            [234, 9],
            [
              235,
              9,
              [
                [
                  236,
                  10,
                  [[237, 11], [242, 11]]
                ],
                [249, 10]
              ]
            ]
          ]
        ]
      ]
    ]
  ]);
  var root_8 = add_locations(/* @__PURE__ */ template(`<div class="absolute bottom-[110%] right-0 flex h-56 w-96 flex-col gap-2 overflow-y-auto rounded-lg border bg-white p-4 shadow"><div class="flex flex-col gap-2"><p class="text-sm">Theme</p> <div class="flex items-center gap-2"><div class="relative flex flex-col gap-2"><p class="text-sm">Header</p> <div class="flex gap-2"><div><input type="color" class="absolute h-5 w-5 opacity-0"> <div></div></div> <p class="text-sm">Background Color</p></div></div></div> <!> <button class=" flex cursor-pointer items-center justify-center rounded-lg bg-orange-500 p-2 text-white transition-all hover:bg-orange-600 active:bg-orange-400">Reset Theme</button></div></div>`), Study_table[FILENAME], [
    [
      207,
      4,
      [
        [
          210,
          5,
          [
            [211, 6],
            [
              212,
              6,
              [
                [
                  213,
                  7,
                  [
                    [214, 8],
                    [
                      215,
                      8,
                      [
                        [
                          216,
                          9,
                          [[217, 10], [222, 10]]
                        ],
                        [227, 9]
                      ]
                    ]
                  ]
                ]
              ]
            ],
            [254, 6]
          ]
        ]
      ]
    ]
  ]);
  var root_7 = add_locations(/* @__PURE__ */ template(`<div class="relative"><!> <button class=" flex cursor-pointer items-center justify-center rounded-full bg-orange-500 p-2 text-white transition-all hover:bg-orange-600 active:bg-orange-400" aria-label="customize"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L6.832 19.82a4.5 4.5 0 01-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 011.13-1.897L16.863 4.487zm0 0L19.5 7.125"></path></svg></button></div>`), Study_table[FILENAME], [
    [
      205,
      2,
      [
        [
          265,
          3,
          [[272, 4, [[280, 5]]]]
        ]
      ]
    ]
  ]);
  var root_10 = add_locations(/* @__PURE__ */ template(`<button class=" flex cursor-pointer items-center justify-center rounded-full bg-orange-500 p-2 text-white transition-all hover:bg-orange-600 active:bg-orange-400" aria-label="download"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3"></path></svg></button>`), Study_table[FILENAME], [
    [
      290,
      2,
      [[295, 3, [[303, 4]]]]
    ]
  ]);
  var root = add_locations(/* @__PURE__ */ template(`<!> <div class="fixed bottom-3 right-3 flex gap-2"><!> <!> <button class=" flex cursor-pointer items-center justify-center rounded-full bg-orange-500 p-2 text-white transition-all hover:bg-orange-600 active:bg-orange-400"> </button> <!></div>`, 1), Study_table[FILENAME], [[203, 0, [[311, 1]]]]);
  function Study_table($$anchor, $$props) {
    check_target(new.target);
    push($$props, false, Study_table);
    let schedule = prop($$props, "schedule", 24, () => []);
    let oldTable = prop($$props, "oldTable", 12);
    let faculty = prop($$props, "faculty", 8, "");
    let department = prop($$props, "department", 8, "");
    let major = prop($$props, "major", 8, "");
    let semester = prop($$props, "semester", 8, "");
    let year = prop($$props, "year", 8, "");
    let studentId = prop($$props, "studentId", 8, "");
    let studentName = prop($$props, "studentName", 8, "");
    const englishDays = [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat"
    ];
    let newTableContainer = mutable_state();
    let mode = mutable_state("new");
    const download = async () => {
      const dataUrl = await toPng(get$2(newTableContainer));
      const link2 = document.createElement("a");
      link2.download = "image.png";
      link2.href = dataUrl;
      link2.click();
    };
    const color = [
      "#ef4444",
      "#f97316",
      "#f59e0b",
      "#eab308",
      "#84cc16",
      "#22c55e",
      "#10b981",
      "#14b8a6",
      "#06b6d4",
      "#0ea5e9",
      "#3b82f6",
      "#6366f1",
      "#8b5cf6",
      "#a855f7",
      "#d946ef",
      "#ec4899",
      "#f43f5e"
    ];
    const makeTheme = () => {
      let theme2 = [];
      let usedColor = [];
      schedule().forEach((item) => {
        let themeColor = color[Math.floor(Math.random() * color.length)];
        while (usedColor.includes(themeColor)) {
          themeColor = color[Math.floor(Math.random() * color.length)];
        }
        const isAlready = theme2.find((t) => strict_equals(item.subjectId, t.subjectId));
        if (isAlready) {
          return;
        }
        theme2.push({
          subjectId: item.subjectId,
          subjectName: item.subjectName,
          color: themeColor
        });
        usedColor.push(themeColor);
      });
      return theme2;
    };
    let theme = mutable_state(makeTheme());
    const getTheme = (subjectId) => {
      const filtered = get$2(theme).filter((item) => strict_equals(item.subjectId, subjectId));
      if (filtered.length > 0) {
        return filtered[0].color;
      } else {
        return false;
      }
    };
    const createTimeSlot = (dayIndex) => {
      const filtered = schedule().filter((item) => strict_equals(item.day, dayIndex));
      const timeSlots = [];
      for (let index2 = 0; index2 < 12 * 4; index2++) {
        timeSlots.push(void 0);
      }
      filtered.forEach((item, index2) => {
        const start = item.start.split(":");
        const end = item.end.split(":");
        const startHour = parseInt(start[0]);
        const startMinute = parseInt(start[1]);
        const endHour = parseInt(end[0]);
        const endMinute = parseInt(end[1]);
        const startSlot = (startHour - 8) * 4 + Math.floor(startMinute / 15);
        const endSlot = (endHour - 8) * 4 + Math.floor(endMinute / 15);
        for (let i2 = startSlot; i2 < endSlot; i2++) {
          timeSlots[i2] = {
            subjectName: item.subjectName,
            subjectIndex: index2,
            colspan: endSlot - startSlot,
            color: color[Math.floor(Math.random() * color.length)],
            info: item
          };
        }
      });
      const final = [];
      timeSlots.forEach((item) => {
        var _a2;
        if (strict_equals(item, void 0)) {
          final.push(void 0);
        } else if (strict_equals(final[final.length - 1], void 0, false)) {
          if (strict_equals((_a2 = final[final.length - 1]) == null ? void 0 : _a2.subjectIndex, item.subjectIndex, false)) {
            final.push(item);
          }
        } else {
          final.push(item);
        }
      });
      return final;
    };
    let customizeMenu = mutable_state(false);
    let headerColor = mutable_state("#f97316");
    init();
    var fragment = root();
    var node = first_child(fragment);
    {
      var consequent_1 = ($$anchor2) => {
        var div = root_1();
        var div_1 = child(div);
        var p2 = child(div_1);
        var text2 = child(p2);
        var p_1 = sibling(p2, 2);
        var text_1 = child(p_1);
        var p_2 = sibling(p_1, 2);
        var text_2 = child(p_2);
        var p_3 = sibling(p_2, 2);
        var text_3 = child(p_3);
        var table = sibling(div_1, 2);
        var tbody = sibling(child(table));
        each(tbody, 5, () => englishDays, index, ($$anchor3, dayLabel, index$1) => {
          var tr = root_2();
          var td = child(tr);
          var text_4 = child(td);
          var node_1 = sibling(td);
          each(node_1, 1, () => createTimeSlot(index$1), index, ($$anchor4, timeSlot) => {
            var fragment_1 = comment();
            var node_2 = first_child(fragment_1);
            {
              var consequent = ($$anchor5) => {
                var td_1 = root_4();
                append($$anchor5, td_1);
              };
              var alternate = ($$anchor5) => {
                var td_2 = root_5();
                set_class(td_2, `w-[2.08333%] px-0 py-1 text-white`);
                var div_2 = child(td_2);
                set_class(div_2, `relative h-full w-full rounded p-1`);
                const style_derived = /* @__PURE__ */ derived_safe_equal(() => `background-color: ${get$2(theme) ? `${getTheme(get$2(timeSlot).info.subjectId)}` : "#64748b"}`);
                var p_4 = child(div_2);
                var text_5 = child(p_4);
                var p_5 = sibling(p_4, 2);
                var text_6 = child(p_5);
                var p_6 = sibling(p_5, 2);
                var text_7 = child(p_6);
                var p_7 = sibling(p_6, 2);
                var text_8 = child(p_7);
                template_effect(() => {
                  set_attribute(td_2, "colspan", get$2(timeSlot).colspan);
                  set_attribute(div_2, "style", get$2(style_derived));
                  set_text(text_5, `${(get$2(timeSlot).info.building ? get$2(timeSlot).info.building : "") ?? ""}
											${(get$2(timeSlot).info.room ? get$2(timeSlot).info.room : "") ?? ""}`);
                  set_text(text_6, get$2(timeSlot).subjectName);
                  set_text(text_7, `Section ${get$2(timeSlot).info.sec ?? ""} (${get$2(timeSlot).info.type ?? ""})`);
                  set_text(text_8, `${get$2(timeSlot).info.start ?? ""} - ${get$2(timeSlot).info.end ?? ""}`);
                });
                append($$anchor5, td_2);
              };
              if_block(node_2, ($$render) => {
                if (strict_equals(get$2(timeSlot), void 0)) $$render(consequent);
                else $$render(alternate, false);
              });
            }
            append($$anchor4, fragment_1);
          });
          template_effect(() => set_text(text_4, get$2(dayLabel)));
          append($$anchor3, tr);
        });
        bind_this(div, ($$value) => set(newTableContainer, $$value), () => get$2(newTableContainer));
        template_effect(() => {
          set_attribute(div_1, "style", `background-color: ${get$2(headerColor) ?? ""};`);
          set_text(text2, faculty());
          set_text(text_1, `${department() ?? ""} ${major() ?? ""}`);
          set_text(text_2, `${semester() ?? ""} ${year() ?? ""}`);
          set_text(text_3, `${studentId() ?? ""} ${studentName() ?? ""}`);
        });
        append($$anchor2, div);
      };
      var alternate_1 = ($$anchor2) => {
        var div_3 = root_6();
        bind_this(div_3, ($$value) => oldTable($$value), () => oldTable());
        append($$anchor2, div_3);
      };
      if_block(node, ($$render) => {
        if (equals(get$2(mode), "new")) $$render(consequent_1);
        else $$render(alternate_1, false);
      });
    }
    var div_4 = sibling(node, 2);
    var node_3 = child(div_4);
    {
      var consequent_3 = ($$anchor2) => {
        var div_5 = root_7();
        var node_4 = child(div_5);
        {
          var consequent_2 = ($$anchor3) => {
            var div_6 = root_8();
            var div_7 = child(div_6);
            var div_8 = sibling(child(div_7), 2);
            var div_9 = child(div_8);
            var div_10 = sibling(child(div_9), 2);
            var div_11 = child(div_10);
            var input = child(div_11);
            var div_12 = sibling(input, 2);
            set_class(div_12, `h-5 w-5 rounded-full`);
            var node_5 = sibling(div_8, 2);
            each(node_5, 1, () => get$2(theme), index, ($$anchor4, item, $$index_2) => {
              var div_13 = root_9();
              var div_14 = child(div_13);
              var p_8 = child(div_14);
              var text_9 = child(p_8);
              var div_15 = sibling(p_8, 2);
              var div_16 = child(div_15);
              var input_1 = child(div_16);
              var div_17 = sibling(input_1, 2);
              set_class(div_17, `h-5 w-5 rounded-full`);
              const style_derived_1 = /* @__PURE__ */ derived_safe_equal(() => `background-color: ${get$2(theme) ? `${getTheme(get$2(item).subjectId)}` : "#64748b"}`);
              template_effect(() => {
                set_text(text_9, get$2(item).subjectName);
                set_attribute(div_17, "style", get$2(style_derived_1));
              });
              bind_value(input_1, () => get$2(item).color, ($$value) => (get$2(item).color = $$value, invalidate_inner_signals(() => get$2(theme))));
              append($$anchor4, div_13);
            });
            var button = sibling(node_5, 2);
            template_effect(() => set_attribute(div_12, "style", `background-color: ${get$2(headerColor)}`));
            bind_value(input, () => get$2(headerColor), ($$value) => set(headerColor, $$value));
            event("click", button, () => {
              set(theme, makeTheme());
              set(headerColor, "#f97316");
            });
            append($$anchor3, div_6);
          };
          if_block(node_4, ($$render) => {
            if (get$2(customizeMenu)) $$render(consequent_2);
          });
        }
        var button_1 = sibling(node_4, 2);
        event("click", button_1, () => {
          set(customizeMenu, !get$2(customizeMenu));
        });
        append($$anchor2, div_5);
      };
      if_block(node_3, ($$render) => {
        if (equals(get$2(mode), "new")) $$render(consequent_3);
      });
    }
    var node_6 = sibling(node_3, 2);
    {
      var consequent_4 = ($$anchor2) => {
        var button_2 = root_10();
        event("click", button_2, download);
        append($$anchor2, button_2);
      };
      if_block(node_6, ($$render) => {
        if (equals(get$2(mode), "new")) $$render(consequent_4);
      });
    }
    var button_3 = sibling(node_6, 2);
    var text_10 = child(button_3);
    var node_7 = sibling(button_3, 2);
    Generate(node_7, {
      get schedule() {
        return schedule();
      }
    });
    template_effect(() => set_text(text_10, equals(get$2(mode), "new") ? "Old Design" : "New Design"));
    event("click", button_3, () => {
      set(mode, equals(get$2(mode), "new") ? "old" : "new");
    });
    append($$anchor, fragment);
    return pop({ ...legacy_api() });
  }
  mark_module_end(Study_table);
  function getinfo(rawTable) {
    var _a2, _b2, _c, _d, _e, _f, _g, _h;
    const table = rawTable.querySelectorAll("tbody")[1];
    const facultyName = ((_b2 = (_a2 = table.childNodes[6]) == null ? void 0 : _a2.textContent) == null ? void 0 : _b2.trim()) || constants.messages.scrapeError;
    const departmentSubject = ((_d = (_c = table.childNodes[10]) == null ? void 0 : _c.textContent) == null ? void 0 : _d.trim().split("   ")) || constants.messages.scrapeError;
    const departmentTerm = ((_f = (_e = table.childNodes[14]) == null ? void 0 : _e.textContent) == null ? void 0 : _f.trim().split("   ")) || constants.messages.scrapeError;
    const studentName = ((_h = (_g = table.childNodes[18]) == null ? void 0 : _g.textContent) == null ? void 0 : _h.trim().split("   ")) || constants.messages.scrapeError;
    return {
      facultyName,
      department: departmentSubject[0].trim(),
      major: departmentSubject[1].trim(),
      semester: departmentTerm[0].trim(),
      year: departmentTerm[1].trim(),
      studentId: studentName[0].trim(),
      studentName: studentName[1].trim()
    };
  }
  function scrapeTable(rawTable) {
    const studyTableRows = rawTable.querySelectorAll("tr");
    const studyTableRowsArray = Array.from(studyTableRows).filter((item) => {
      return item.childNodes.length == 37;
    }).splice(1);
    const scrapedData = [];
    studyTableRowsArray.forEach((item) => {
      const subjectId = item.childNodes[5].textContent || constants.messages.scrapeError;
      const subjectName = item.childNodes[9].textContent || constants.messages.scrapeError;
      const subjectCredits = item.childNodes[13].textContent || constants.messages.scrapeError;
      const roomInfo = item.childNodes[29];
      const room = [];
      roomInfo.childNodes.forEach((item2) => {
        if (item2.textContent) {
          room.push(item2.textContent);
        }
      });
      const lectureRoom = room[0];
      const labRoom = room[1];
      const buildingInfo = item.childNodes[33];
      const building = [];
      buildingInfo.childNodes.forEach((item2) => {
        if (item2.textContent) {
          building.push(item2.textContent);
        }
      });
      const lectureBuilding = building[0];
      const labBuilding = building[1];
      const subjectLecture = {
        building: lectureBuilding,
        room: lectureRoom,
        sec: item.childNodes[17].textContent || constants.messages.scrapeError,
        periods: []
      };
      const subjectLab = {
        building: labBuilding,
        room: labRoom,
        sec: item.childNodes[21].textContent || constants.messages.scrapeError,
        periods: []
      };
      const subjectDescription = item.childNodes[35].textContent || constants.messages.scrapeError;
      const subjectPeriod = item.childNodes[25];
      subjectPeriod.childNodes.forEach((item2) => {
        if (!item2.textContent) return;
        console.log(item2.textContent);
        const splitData = item2.textContent.split(" ");
        const time = splitData[1].split("-");
        const period = {
          day: splitData[0],
          start: time[0],
          end: time[1]
        };
        console.log(subjectLab.periods.some((savedPeriod) => savedPeriod.start === period.start));
        if (constants.scraper.classTypes.lecture.some(
          (typeString) => {
            var _a2;
            return (_a2 = item2.textContent) == null ? void 0 : _a2.includes(typeString);
          }
        ) && !subjectLecture.periods.some((savedPeriod) => savedPeriod.start === period.start)) {
          subjectLecture.periods.push(period);
        } else if (constants.scraper.classTypes.lab.some(
          (typeString) => {
            var _a2;
            return (_a2 = item2.textContent) == null ? void 0 : _a2.includes(typeString);
          }
        ) && !subjectLab.periods.some((savedPeriod) => savedPeriod.start === period.start)) {
          subjectLab.periods.push(period);
        }
      });
      const data = {
        subjectId,
        subjectName,
        subjectDescription,
        subjectCredits,
        subjectLecture,
        subjectLab
      };
      scrapedData.push(data);
    });
    console.log(scrapedData);
    return scrapedData;
  }
  function flattenStudyTable(subjects) {
    function getDayFromString(dayString) {
      return constants.scraper.days[dayString];
    }
    const flattenData = [];
    subjects.forEach((item) => {
      console.log(item);
      const {
        subjectId,
        subjectName,
        subjectCredits,
        subjectLecture,
        subjectLab,
        subjectDescription
      } = item;
      const {
        sec: lectureSec,
        periods: lecturePeriod,
        room: lectureRoom,
        building: lectureBuilding
      } = subjectLecture;
      const { sec: labSec, periods: labPeriod, room: labRoom, building: labBuilding } = subjectLab;
      if (lectureSec) {
        lecturePeriod.forEach((item2) => {
          const { day, start, end } = item2;
          const data = {
            subjectId,
            subjectName,
            subjectCredits,
            subjectDescription,
            sec: lectureSec,
            room: lectureRoom,
            building: lectureBuilding,
            type: "lecture",
            day: getDayFromString(day),
            start,
            end
          };
          flattenData.push(data);
        });
      }
      if (labSec) {
        labPeriod.forEach((item2) => {
          const { day, start, end } = item2;
          const data = {
            subjectId,
            subjectName,
            subjectCredits,
            subjectDescription,
            day: getDayFromString(day),
            start,
            end,
            type: "lab",
            sec: labSec,
            room: labRoom,
            building: labBuilding
          };
          flattenData.push(data);
        });
      }
    });
    return flattenData;
  }
  function sortByDay(scheduleItems) {
    return scheduleItems.sort((a2, b2) => {
      const dayA = a2.day;
      const dayB = b2.day;
      if (dayA < dayB) {
        return -1;
      } else if (dayA > dayB) {
        return 1;
      } else {
        if (a2.start.localeCompare(b2.start) == -1) {
          return -1;
        } else if (a2.start.localeCompare(b2.start) == 1) {
          return 1;
        }
        return 0;
      }
    });
  }
  studyTable;
  function renderStudyTable() {
    const rawStudyTable = document.querySelector("table");
    if (!rawStudyTable) throw new Error("Unable to select the raw study table");
    const info = getinfo(rawStudyTable);
    const scrapedData = sortByDay(flattenStudyTable(scrapeTable(rawStudyTable)));
    const oldTable = document.createElement("div");
    oldTable.innerHTML = document.body.innerHTML;
    const fontPrompt = document.createElement("style");
    fontPrompt.innerHTML = `
  @import url('https://fonts.googleapis.com/css2?family=Prompt:wght@300;400;500;600;700&display=swap');
  `;
    document.head.appendChild(fontPrompt);
    document.body.innerHTML = "";
    console.log(scrapedData);
    mount(Study_table, {
      target: document.body,
      props: {
        schedule: scrapedData,
        oldTable,
        faculty: info.facultyName,
        department: info.department,
        major: info.major,
        semester: info.semester,
        year: info.year,
        studentId: info.studentId,
        studentName: info.studentName
      }
    });
  }
  const definition = defineContentScript({
    matches: ["*://*.reg.kmitl.ac.th/u_student/report_studytable_show.php"],
    main() {
      renderStudyTable();
    }
  });
  studyTable;
  const browser = (
    // @ts-expect-error
    ((_b = (_a = globalThis.browser) == null ? void 0 : _a.runtime) == null ? void 0 : _b.id) == null ? globalThis.chrome : (
      // @ts-expect-error
      globalThis.browser
    )
  );
  function print$1(method, ...args) {
    if (typeof args[0] === "string") {
      const message = args.shift();
      method(`[wxt] ${message}`, ...args);
    } else {
      method("[wxt]", ...args);
    }
  }
  const logger$1 = {
    debug: (...args) => print$1(console.debug, ...args),
    log: (...args) => print$1(console.log, ...args),
    warn: (...args) => print$1(console.warn, ...args),
    error: (...args) => print$1(console.error, ...args)
  };
  const _WxtLocationChangeEvent = class _WxtLocationChangeEvent extends Event {
    constructor(newUrl, oldUrl) {
      super(_WxtLocationChangeEvent.EVENT_NAME, {});
      this.newUrl = newUrl;
      this.oldUrl = oldUrl;
    }
  };
  __publicField(_WxtLocationChangeEvent, "EVENT_NAME", getUniqueEventName("wxt:locationchange"));
  let WxtLocationChangeEvent = _WxtLocationChangeEvent;
  function getUniqueEventName(eventName) {
    var _a2;
    return `${(_a2 = browser == null ? void 0 : browser.runtime) == null ? void 0 : _a2.id}:${"study-table"}:${eventName}`;
  }
  function createLocationWatcher(ctx) {
    let interval;
    let oldUrl;
    return {
      /**
       * Ensure the location watcher is actively looking for URL changes. If it's already watching,
       * this is a noop.
       */
      run() {
        if (interval != null) return;
        oldUrl = new URL(location.href);
        interval = ctx.setInterval(() => {
          let newUrl = new URL(location.href);
          if (newUrl.href !== oldUrl.href) {
            window.dispatchEvent(new WxtLocationChangeEvent(newUrl, oldUrl));
            oldUrl = newUrl;
          }
        }, 1e3);
      }
    };
  }
  const _ContentScriptContext = class _ContentScriptContext {
    constructor(contentScriptName, options) {
      __publicField(this, "isTopFrame", window.self === window.top);
      __publicField(this, "abortController");
      __publicField(this, "locationWatcher", createLocationWatcher(this));
      __publicField(this, "receivedMessageIds", /* @__PURE__ */ new Set());
      this.contentScriptName = contentScriptName;
      this.options = options;
      this.abortController = new AbortController();
      if (this.isTopFrame) {
        this.listenForNewerScripts({ ignoreFirstEvent: true });
        this.stopOldScripts();
      } else {
        this.listenForNewerScripts();
      }
    }
    get signal() {
      return this.abortController.signal;
    }
    abort(reason) {
      return this.abortController.abort(reason);
    }
    get isInvalid() {
      if (browser.runtime.id == null) {
        this.notifyInvalidated();
      }
      return this.signal.aborted;
    }
    get isValid() {
      return !this.isInvalid;
    }
    /**
     * Add a listener that is called when the content script's context is invalidated.
     *
     * @returns A function to remove the listener.
     *
     * @example
     * browser.runtime.onMessage.addListener(cb);
     * const removeInvalidatedListener = ctx.onInvalidated(() => {
     *   browser.runtime.onMessage.removeListener(cb);
     * })
     * // ...
     * removeInvalidatedListener();
     */
    onInvalidated(cb) {
      this.signal.addEventListener("abort", cb);
      return () => this.signal.removeEventListener("abort", cb);
    }
    /**
     * Return a promise that never resolves. Useful if you have an async function that shouldn't run
     * after the context is expired.
     *
     * @example
     * const getValueFromStorage = async () => {
     *   if (ctx.isInvalid) return ctx.block();
     *
     *   // ...
     * }
     */
    block() {
      return new Promise(() => {
      });
    }
    /**
     * Wrapper around `window.setInterval` that automatically clears the interval when invalidated.
     */
    setInterval(handler, timeout) {
      const id = setInterval(() => {
        if (this.isValid) handler();
      }, timeout);
      this.onInvalidated(() => clearInterval(id));
      return id;
    }
    /**
     * Wrapper around `window.setTimeout` that automatically clears the interval when invalidated.
     */
    setTimeout(handler, timeout) {
      const id = setTimeout(() => {
        if (this.isValid) handler();
      }, timeout);
      this.onInvalidated(() => clearTimeout(id));
      return id;
    }
    /**
     * Wrapper around `window.requestAnimationFrame` that automatically cancels the request when
     * invalidated.
     */
    requestAnimationFrame(callback) {
      const id = requestAnimationFrame((...args) => {
        if (this.isValid) callback(...args);
      });
      this.onInvalidated(() => cancelAnimationFrame(id));
      return id;
    }
    /**
     * Wrapper around `window.requestIdleCallback` that automatically cancels the request when
     * invalidated.
     */
    requestIdleCallback(callback, options) {
      const id = requestIdleCallback((...args) => {
        if (!this.signal.aborted) callback(...args);
      }, options);
      this.onInvalidated(() => cancelIdleCallback(id));
      return id;
    }
    addEventListener(target, type, handler, options) {
      var _a2;
      if (type === "wxt:locationchange") {
        if (this.isValid) this.locationWatcher.run();
      }
      (_a2 = target.addEventListener) == null ? void 0 : _a2.call(
        target,
        type.startsWith("wxt:") ? getUniqueEventName(type) : type,
        handler,
        {
          ...options,
          signal: this.signal
        }
      );
    }
    /**
     * @internal
     * Abort the abort controller and execute all `onInvalidated` listeners.
     */
    notifyInvalidated() {
      this.abort("Content script context invalidated");
      logger$1.debug(
        `Content script "${this.contentScriptName}" context invalidated`
      );
    }
    stopOldScripts() {
      window.postMessage(
        {
          type: _ContentScriptContext.SCRIPT_STARTED_MESSAGE_TYPE,
          contentScriptName: this.contentScriptName,
          messageId: Math.random().toString(36).slice(2)
        },
        "*"
      );
    }
    verifyScriptStartedEvent(event2) {
      var _a2, _b2, _c;
      const isScriptStartedEvent = ((_a2 = event2.data) == null ? void 0 : _a2.type) === _ContentScriptContext.SCRIPT_STARTED_MESSAGE_TYPE;
      const isSameContentScript = ((_b2 = event2.data) == null ? void 0 : _b2.contentScriptName) === this.contentScriptName;
      const isNotDuplicate = !this.receivedMessageIds.has((_c = event2.data) == null ? void 0 : _c.messageId);
      return isScriptStartedEvent && isSameContentScript && isNotDuplicate;
    }
    listenForNewerScripts(options) {
      let isFirst = true;
      const cb = (event2) => {
        if (this.verifyScriptStartedEvent(event2)) {
          this.receivedMessageIds.add(event2.data.messageId);
          const wasFirst = isFirst;
          isFirst = false;
          if (wasFirst && (options == null ? void 0 : options.ignoreFirstEvent)) return;
          this.notifyInvalidated();
        }
      };
      addEventListener("message", cb);
      this.onInvalidated(() => removeEventListener("message", cb));
    }
  };
  __publicField(_ContentScriptContext, "SCRIPT_STARTED_MESSAGE_TYPE", getUniqueEventName(
    "wxt:content-script-started"
  ));
  let ContentScriptContext = _ContentScriptContext;
  const nullKey = Symbol("null");
  let keyCounter = 0;
  class ManyKeysMap extends Map {
    constructor() {
      super();
      this._objectHashes = /* @__PURE__ */ new WeakMap();
      this._symbolHashes = /* @__PURE__ */ new Map();
      this._publicKeys = /* @__PURE__ */ new Map();
      const [pairs] = arguments;
      if (pairs === null || pairs === void 0) {
        return;
      }
      if (typeof pairs[Symbol.iterator] !== "function") {
        throw new TypeError(typeof pairs + " is not iterable (cannot read property Symbol(Symbol.iterator))");
      }
      for (const [keys, value] of pairs) {
        this.set(keys, value);
      }
    }
    _getPublicKeys(keys, create = false) {
      if (!Array.isArray(keys)) {
        throw new TypeError("The keys parameter must be an array");
      }
      const privateKey = this._getPrivateKey(keys, create);
      let publicKey;
      if (privateKey && this._publicKeys.has(privateKey)) {
        publicKey = this._publicKeys.get(privateKey);
      } else if (create) {
        publicKey = [...keys];
        this._publicKeys.set(privateKey, publicKey);
      }
      return { privateKey, publicKey };
    }
    _getPrivateKey(keys, create = false) {
      const privateKeys = [];
      for (let key of keys) {
        if (key === null) {
          key = nullKey;
        }
        const hashes = typeof key === "object" || typeof key === "function" ? "_objectHashes" : typeof key === "symbol" ? "_symbolHashes" : false;
        if (!hashes) {
          privateKeys.push(key);
        } else if (this[hashes].has(key)) {
          privateKeys.push(this[hashes].get(key));
        } else if (create) {
          const privateKey = `@@mkm-ref-${keyCounter++}@@`;
          this[hashes].set(key, privateKey);
          privateKeys.push(privateKey);
        } else {
          return false;
        }
      }
      return JSON.stringify(privateKeys);
    }
    set(keys, value) {
      const { publicKey } = this._getPublicKeys(keys, true);
      return super.set(publicKey, value);
    }
    get(keys) {
      const { publicKey } = this._getPublicKeys(keys);
      return super.get(publicKey);
    }
    has(keys) {
      const { publicKey } = this._getPublicKeys(keys);
      return super.has(publicKey);
    }
    delete(keys) {
      const { publicKey, privateKey } = this._getPublicKeys(keys);
      return Boolean(publicKey && super.delete(publicKey) && this._publicKeys.delete(privateKey));
    }
    clear() {
      super.clear();
      this._symbolHashes.clear();
      this._publicKeys.clear();
    }
    get [Symbol.toStringTag]() {
      return "ManyKeysMap";
    }
    get size() {
      return super.size;
    }
  }
  new ManyKeysMap();
  function initPlugins() {
  }
  function print(method, ...args) {
    if (typeof args[0] === "string") {
      const message = args.shift();
      method(`[wxt] ${message}`, ...args);
    } else {
      method("[wxt]", ...args);
    }
  }
  const logger = {
    debug: (...args) => print(console.debug, ...args),
    log: (...args) => print(console.log, ...args),
    warn: (...args) => print(console.warn, ...args),
    error: (...args) => print(console.error, ...args)
  };
  const result = (async () => {
    try {
      initPlugins();
      const { main, ...options } = definition;
      const ctx = new ContentScriptContext("study-table", options);
      return await main(ctx);
    } catch (err) {
      logger.error(
        `The content script "${"study-table"}" crashed on startup!`,
        err
      );
      throw err;
    }
  })();
  return result;
}();
studyTable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
